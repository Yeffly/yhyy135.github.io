<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Acuario</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://acuario.xyz/"/>
  <updated>2019-08-11T15:02:32.071Z</updated>
  <id>https://acuario.xyz/</id>
  
  <author>
    <name>Acuario</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>《精通正则表达式》学习笔记（五）</title>
    <link href="https://acuario.xyz/mastering-regex-summary-5/"/>
    <id>https://acuario.xyz/mastering-regex-summary-5/</id>
    <published>2019-08-07T16:17:53.000Z</published>
    <updated>2019-08-11T15:02:32.071Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="/mastering-regex-summary-1/">《精通正则表达式》学习笔记（一）</a><br>Ch.1 正则表达式入门<br>Ch.2 入门示例拓展</li><li><a href="/mastering-regex-summary-2/">《精通正则表达式》学习笔记（二）</a><br>Ch.3 正则表达式的特性和流派概览</li><li><a href="/mastering-regex-summary-3/">《精通正则表达式》学习笔记（三）</a><br>Ch.4 表达式的匹配原理</li><li><a href="/mastering-regex-summary-4/">《精通正则表达式》学习笔记（四）</a><br>Ch.5 正则表达式实用技巧</li><li><a href="/mastering-regex-summary-5/">《精通正则表达式》学习笔记（五）</a><br>Ch.6 打造高效正则表达式</li></ul><hr><ul><li>因为 NFA 引擎容许用户进行精确控制，所以我们可以用心打造正则表达式。</li><li>调校表达式时需要考虑的两个因素是<strong>准确性</strong>和<strong>效率</strong>：精确匹配文本而不包含多余的内容，且速度要快。</li><li>优化表达式的关键在于彻底理解回溯背后的过程，学习些技巧来避免可能的回溯。</li><li>不同工具可能使用不同的优化措施。如果能够预先判断目标字符串基本无法匹配（例如目标宇符串缺少一个引擎能够预知的，匹配成功必须的字符），足够聪明的实现方式可以完全不应用正则表达式。</li><li>在分析效率时，不要忘了不同正则引擎的差异。</li></ul><a id="more"></a><h2 id="多选分支的顺序优化"><a href="#多选分支的顺序优化" class="headerlink" title="多选分支的顺序优化"></a>多选分支的顺序优化</h2><p>期望：匹配引号字符串（允许转义双引号）<br>RegEx：<code>&quot;(\\.|[^\\&quot;])*&quot;</code>   </p><ul><li><strong>多选分支的顺序很重要，其会影响回溯的发生与否和发生回溯的先后顺序。</strong></li><li>调换「<code>\\.</code>」和「<code>[^\\&quot;]</code>」的顺序，只有在遇到字符串中的转义字符时才会按照多选结构进行回溯，这样增加了第一个多选分支的成功匹配次数，有效减少回溯的次数。</li><li>为提高效率修改正则表达式时最需要考虑的问题是，改动是否会影响匹配的准确性。在关注效率的时候，万不可忘记准确性。<em>重新安排多选分支的顺序</em>这种操作，只有在排序与匹配成功无关时才不会影响准确性。</li><li>在任意正则表达式中，星号会对每个普通字符进行迭代（或者说“重复”），重复进入一退出多选结构（和括号）。星号量词作用于括号内的子表达式，每次迭代都需要进入然后再退出括号，因为引擎需要记录括号内的子表达式匹配的文本。为此必须进行处理。</li><li>优化表达式时，使一次迭代中读入尽可能多的字符，尽量减少发生回溯的次数，把星号迭代的次数减少到最小：</li></ul><p><img src="https://i.loli.net/2019/07/25/5d3925bdeb92a68557.jpg" alt></p><h2 id="指数级匹配（超线性，super-linear）"><a href="#指数级匹配（超线性，super-linear）" class="headerlink" title="指数级匹配（超线性，super-linear）"></a>指数级匹配（超线性，super-linear）</h2><ul><li>表达式「<code>&quot;([^\\&quot;]+|\\.)*&quot;</code>」在 POSIX NFA 中匹配 <code>very ...... long</code> 时需要超过 3 亿亿亿次回溯。因为正则表达式中某个元素受加号限定的同时，还受括号外的星号限定，无法区分哪个量词控制哪个特殊的字符。</li><li>对正则表达式「<code>([^\\&quot;]+)*</code>」来说，加号和星号二者分割（divvy up）字符串的可能性是成指数形式增长的。</li><li>对不同类型引擎指数级匹配的差异：<ul><li>如果其中的某个表达式，即使不能匹配，也能很快给出结果，那可能就是 DFA。</li><li>如果只有在能够匹配时才很快出结果，那就是传统型 NFA。</li><li>如果总是很慢，那就是 POSIX NFA。</li></ul></li></ul><h2 id="回溯实例"><a href="#回溯实例" class="headerlink" title="回溯实例"></a>回溯实例</h2><h3 id="匹配成功的回溯"><a href="#匹配成功的回溯" class="headerlink" title="匹配成功的回溯"></a>匹配成功的回溯</h3><ul><li>从局部来看，回溯就是倒退至未尝试的分支。</li></ul><p><img src="https://i.loli.net/2019/07/26/5d3a6ab8dec8f93141.jpg" alt="图像 (9).jpg"></p><ul><li>表达式「<code>&quot;.*&quot;</code>」在 <strong>NFA</strong> 引擎中的匹配过程如图所示：   <ol><li>多次匹配失败直到 A 处   </li><li>从 <code>A-B</code> 处均匹配成功，并在每个位置（共计 46 处）撒下面包屑，记录保存状态   </li><li>从 <code>B-C</code> 开始逐步回溯，直到 <code>C</code> 处匹配成功   </li></ol></li><li>表达式「<code>&quot;.*&quot;</code>」在 <strong>POSIX NFA</strong> 引擎中的匹配过程与 <strong>NFA</strong> 类似，但为了确认<strong><em>最长的匹配</em></strong>，还需进行一些确认操作：   <ol><li>多次匹配失败直到 <code>A</code> 处   </li><li>从 <code>A-B</code> 处均匹配成功，并在每个位置（共计 46 处）撒下面包屑，记录保存状态   </li><li>从 <code>B-C</code> 开始逐步回溯，知道 <code>C</code> 处匹配成功   </li><li>尝试过程 <code>D-E-F</code> 和 <code>F-G-H</code> 类似 <code>B-C-D</code>，只是 <code>F</code> 和 <code>H</code> 会被抛弃，因为它们匹配的文本都比 <code>D</code> 更短</li><li><code>I</code> 位置完成当前匹配的所有回溯，重新启动驱动过程，进行下一轮匹配尝试。但由于已经有匹配成功的文本，所以直接返回匹配结果。</li></ol></li></ul><h3 id="无法匹配成功的回溯"><a href="#无法匹配成功的回溯" class="headerlink" title="无法匹配成功的回溯"></a>无法匹配成功的回溯</h3><p>表达式「<code>&quot;.*&quot;!</code>」无法匹配范例文本，在匹配过程中进行多轮匹配尝试，每次尝试都有回溯产生，其匹配过程如图所示：</p><p><img src="https://i.loli.net/2019/07/26/5d3a6ab8eee6752532.jpg" alt></p><h3 id="通过优化表达式来减少回溯"><a href="#通过优化表达式来减少回溯" class="headerlink" title="通过优化表达式来减少回溯"></a>通过优化表达式来减少回溯</h3><p>表达式「<code>&quot;[^&quot;]*&quot;!</code>」通过使用「<code>[^&quot;]</code>」来替代「<code>.*</code>」，通过减少可能匹配的字符，从而大大降低了回溯产生的次数。减少的回溯就是有意的<strong>伴随效应（side effect）</strong></p><p><img src="https://i.loli.net/2019/07/26/5d3a6ab8c8c5e54462.jpg" alt></p><h3 id="多选结构的回溯"><a href="#多选结构的回溯" class="headerlink" title="多选结构的回溯"></a>多选结构的回溯</h3><p>使用多选结构时，需要注意引起的回溯对性能的影响。</p><p>文本：<code>The name &quot;McDonald&#39;s&quot; is said &quot;makudonarudo&quot; in Japanese</code>.<br>期望：<code>makudonarudo</code>   </p><table><thead><tr><th>RegEx</th><th>回溯次数</th></tr></thead><tbody><tr><td>「<code>[uvwxyz]</code>」</td><td>34</td></tr><tr><td>「<code>u|v|w|x|y|z</code>」</td><td>204</td></tr></tbody></table><h2 id="常见优化原理"><a href="#常见优化原理" class="headerlink" title="常见优化原理"></a>常见优化原理</h2><ul><li>提高匹配效率的优化原理主要有：<ol><li><strong>加速某些操作</strong></li><li><strong>避免冗余操作</strong></li></ol></li><li>只有在检测优化措施是否可行所需的时间少于节省下来的匹配时间的情况下，优化才是有益的。</li><li>优化所需的时间、节省的时间、优化的可能性这三者间存在互相制约的关系。</li></ul><h3 id="应用前的优化"><a href="#应用前的优化" class="headerlink" title="应用前的优化"></a>应用前的优化</h3><ul><li>编译缓存：<ul><li>正则表达式使用之前先进行错误检查，之后编译为内部形式检查字符串。</li><li>为提高编译效率，首次编译之后的内部形式会被保存或缓存下来，在此后的循坏中复用。</li><li>集成式处理中的编译缓存：正则表达式可能每次循环都会变化，优化措施是检査插值后的结果（也就是正则表达式的具体值），只有当具体值发生变化时才重新编译。</li><li>集成式处理中的编译缓存：编译形式与表达式在程序中所处的具体位置相关，正则表达式变化时，先检査插值后的结果（即正则表达式的具体值），当具体值发生变化时才重新编译。</li><li>程序式处理中的编译缓存：<ul><li>编译形式与表达式在程序中所处的具体位置无关，每次调用函数时，正则表达式必须重新编译。</li><li>将最近使用的正则表达式模式（regex pattern）缓存后关联到最终的编译形式。</li><li>调用“应用此表达式”函数之后，作为参数的正则表达式模式会与保存的正则表达式相比较，如果已存在于缓存中，就使用缓存的版本。如果没有，就直接编译这个正则表达式，将其存入缓存。无可用缓存时，丢弃一个最久未使用的编译形式。</li></ul></li><li>面向对象式处理中的编译缓存：正则表达式何时编译完全由程序决定。通过构造函数来进行编译。通过对象析构函数抛弃编译好的正则表达式。</li></ul></li><li>预查（子）字符串优化：在实际应用正则表达式之前，在目标字符串中快速扫描，检査所需的字符或者字符串一如果不存在，根本就不需要进行任何尝试。</li><li>长度判断优化：预先判断目标文本的长度是否满足正则表达式要求的最小长度，若不满足，则不进行任何尝试。</li></ul><h3 id="传动装置的优化"><a href="#传动装置的优化" class="headerlink" title="传动装置的优化"></a>传动装置的优化</h3><table><thead><tr><th>优化策略</th><th>释义</th><th>栗子</th></tr></thead><tbody><tr><td>字符串起始 / 行锚点</td><td>任何以「<code>^</code>」开头的正则表达式只能在「<code>^</code>」能够匹配的情况下才可能匹配。</td><td>「<code>^this|^that</code>」修改为「<code>^(this|that)</code>」或 「<code>^(?:this|that)</code>」</td></tr><tr><td>隐式锚点</td><td>如果正则表达式以「<code>.*</code>」或「<code>.+</code>」开头，且没有全局性多选结构（global alternation），则可以认为此正则表达式的开头有一个看不见的「<code>^</code>」。则使用上一节的“字符串起始 / 行锚点优化”，节省大量的时间。</td><td></td></tr><tr><td>字符串结束 / 行锚点</td><td>遇到末尾为「<code>$</code>」或其他结束锚点的正则表达式时，能够从字符申末尾倒数若干字符的位置开始尝试匹配。</td><td>「<code>regex(es)?$</code>」从倒数第 8 个字符开始匹配</td></tr><tr><td>开头字符 / 字符组 / 子串识别</td><td>容许传动装置预先检查字符串中的每个字符，只在可能匹配的位置进行应用，这样能节省大量的时间。避免从错误的位置开始执行匹配尝试。</td><td>「<code>this|that|other</code>」只能从「<code>[ot]</code>」位置开始匹配</td></tr><tr><td>内嵌文字字符串检查</td><td>类似初始字符串识别优化，使用高速的 Boyer-Moore 字符串检索算法寻找目标位置。</td><td></td></tr><tr><td>长度识别传动</td><td>当前位置距离字符申末尾的长度小于成功匹配所需最小长度，传动装置会停止匹配尝试。</td><td></td></tr></tbody></table><h3 id="正则表达式本身的优化"><a href="#正则表达式本身的优化" class="headerlink" title="正则表达式本身的优化"></a>正则表达式本身的优化</h3><ul><li>文字字符串连接：把多个字符串当作整体而非分离的个体，例如将「<code>abc</code>」视为整体而非，「<code>a</code>」然后「<code>b</code>」然后「<code>c</code>」。</li><li>化简量词：约束普通元素的加号、星号之类的量词。避免普通 NFA 引擎的大部分逐步处理开销（step-by-step overhead）。例如「<code>.*</code>」和「<code>(?:.)*</code>」在逻辑上是相等的，但是在进行此优化的系统中，「<code>.*</code>」实际上更快。</li><li>消除无必要括号：使用无括号的等价的表达式进行替换。如使用「<code>.*</code>」替换「<code>(?:.)*</code>」。</li><li>消除不需要的字符组：将只包含单个字符的字符组在内部进行转换。如「<code>[.]</code>」转换为「<code>\.</code>」。</li><li>忽略优先量词之后的字符优化：忽略优先量词通常比匹配优先量词要慢。如果文字字符跟在忽略优先量词之后，只要引擎没有触及那个文字字符，忽略优先量词可以作为普通的匹配优先量词来处理，从而跳过常规的“忽略”状态。</li><li>“过度”回溯检测：限定回溯堆栈的大小，即限定回溯的次数，在“超限”时停止匹配。</li><li>避免指数级匹配：在匹配尝试进入超线性状态时进行检测，记录每个量词对应的子表达式尝试匹配的位置，绕过重复尝试。</li><li>使用占有优先量词削减状态：不保留“在此处不进行匹配”的状态，在量词全部尝试完成之后抛弃所有备用状态，每一轮迭代时抛弃上轮的备用状态。否则，如应用「<code>.*</code>」会在匹配每个字符时创造一个状态，如果字符串很长，会占用大量的内存。</li><li>量词等价转换：根据不同语言的正则表达式特性，对量词进行替换，如「<code>\d\d\d\d</code>」替换为「<code>\d{4}</code>」。</li><li>需求识别：预先取消它认为对匹配结果没有价值的工作。</li></ul><h2 id="常见优化方法"><a href="#常见优化方法" class="headerlink" title="常见优化方法"></a>常见优化方法</h2><table><thead><tr><th>优化方法</th><th>释义</th><th>栗子</th></tr></thead><tbody><tr><td>避免重新编译</td><td>编译和定义正则表达式的次数应该尽可能的少。在循环外创建正则表达式对象，在循环中重复使用。函数式处理要保证循环中使用的正则表达式的数目少于工具所能缓存的上限。集成式处理避免在循环内的正则表达式中使用变量插值。</td><td></td></tr><tr><td>使用非捕获型括号</td><td>不需要引用的文本，使用非捕获型括号「<code>(?:...)</code>」节省捕获时间，减少回溯使用的状态的数量。</td><td></td></tr><tr><td>不要滥用括号</td><td>使用括号会阻止某些优化措施。</td><td></td></tr><tr><td>不要滥用字符组</td><td>使用元字符来替代单个字符的字符组</td><td>使用「<code>\.</code>」来替代「<code>[.]</code>」</td></tr><tr><td>使用起始锚点</td><td>以「<code>.*</code>」开头的正则表达式都应该在最前面添加「<code>^</code>」或者「<code>\A</code>」。配合开头字符 / 字符串 / 字串识别优化，节省不必要的工作。</td><td></td></tr><tr><td>将文字文本独立出来</td><td>“提取”必要元素：暴露必须的匹配内容。</td><td>使用「<code>xx*</code>」替代「<code>x+</code>」暴露匹配 <code>x</code>，使用「<code>------{0,2}</code>」替代「<code>-{5,7}</code>」暴露匹配 <code>-</code>。</td></tr><tr><td>将文字文本独立出来</td><td>“提取”多选结构开头的必须元素</td><td>使用「<code>------{0,2}</code>」替代「<code>-{5,7}</code>」暴露匹配 <code>-</code>。</td></tr><tr><td>将锚点独立出来</td><td>在表达式前面独立出 <code>^</code> 和 <code>\G</code></td><td></td></tr><tr><td>将锚点独立出来</td><td>在表达式末尾独立出 <code>$</code></td><td></td></tr></tbody></table><ul><li>如果目标字符串很长：<ul><li>分号接近字符串的开头，使用忽略优先量词。</li><li>分号接近宇符串末尾的位置，使用匹配优先量词。</li><li>若是随机数据，又不知道分号接近文首或文尾，则使用匹配优先的量词。</li></ul></li><li>如果目标字符串很短，使用何种优先量词无所谓。</li><li>多个小正则表达式的速度比一个大正则表达式要快得多。</li><li>在表达式的开头添加合适的环视结构，可以让表达式对文本进行“预査”，选择合适的开始位置。</li><li>固化分组和占有优先量词能够极大地提高匹配速度，而不会改变匹配结果。</li><li>主导引擎的匹配<ul><li>将最可能匹配的多选分支放在前头：许多时候多选分支的摆放顺序比优化更重要，但如果顺序与匹配正确无关，就应该把最可能匹配的多选分支放在首位。这一点只对传统型 NFA 引擎且只有存在匹配的时候才适用。对 POSIX NFA 或不存在匹配时，所有的多选分支都必须检测，所以顺序是无关紧要的。</li><li>将结尾部分分散到多选结构内：把尾部通配表达式加到多选结构之内，匹配时不需要退出多选结构就能发现失败，则匹配失败的更快。</li></ul></li><li>各种优化都是平等的，在优化时请务必小心，不要因小失大。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/mastering-regex-summary-1/&quot;&gt;《精通正则表达式》学习笔记（一）&lt;/a&gt;&lt;br&gt;Ch.1 正则表达式入门&lt;br&gt;Ch.2 入门示例拓展&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/mastering-regex-summary-2/&quot;&gt;《精通正则表达式》学习笔记（二）&lt;/a&gt;&lt;br&gt;Ch.3 正则表达式的特性和流派概览&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/mastering-regex-summary-3/&quot;&gt;《精通正则表达式》学习笔记（三）&lt;/a&gt;&lt;br&gt;Ch.4 表达式的匹配原理&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/mastering-regex-summary-4/&quot;&gt;《精通正则表达式》学习笔记（四）&lt;/a&gt;&lt;br&gt;Ch.5 正则表达式实用技巧&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/mastering-regex-summary-5/&quot;&gt;《精通正则表达式》学习笔记（五）&lt;/a&gt;&lt;br&gt;Ch.6 打造高效正则表达式&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;因为 NFA 引擎容许用户进行精确控制，所以我们可以用心打造正则表达式。&lt;/li&gt;
&lt;li&gt;调校表达式时需要考虑的两个因素是&lt;strong&gt;准确性&lt;/strong&gt;和&lt;strong&gt;效率&lt;/strong&gt;：精确匹配文本而不包含多余的内容，且速度要快。&lt;/li&gt;
&lt;li&gt;优化表达式的关键在于彻底理解回溯背后的过程，学习些技巧来避免可能的回溯。&lt;/li&gt;
&lt;li&gt;不同工具可能使用不同的优化措施。如果能够预先判断目标字符串基本无法匹配（例如目标宇符串缺少一个引擎能够预知的，匹配成功必须的字符），足够聪明的实现方式可以完全不应用正则表达式。&lt;/li&gt;
&lt;li&gt;在分析效率时，不要忘了不同正则引擎的差异。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="https://acuario.xyz/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="RegEx" scheme="https://acuario.xyz/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/RegEx/"/>
    
    
      <category term="学习笔记" scheme="https://acuario.xyz/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="精通正则表达式" scheme="https://acuario.xyz/tags/%E7%B2%BE%E9%80%9A%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
      <category term="RegEx" scheme="https://acuario.xyz/tags/RegEx/"/>
    
      <category term="正则表达式的优化" scheme="https://acuario.xyz/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>SSH配置登陆密钥和别名</title>
    <link href="https://acuario.xyz/configure-ssh-host-and-keychain/"/>
    <id>https://acuario.xyz/configure-ssh-host-and-keychain/</id>
    <published>2019-07-29T16:30:07.000Z</published>
    <updated>2019-08-02T16:50:30.831Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>通常在 Shell 中使用 SSH 连接远程服务器时，我们需要输入完整的 SSH 命令，如：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ssh user@example.com#连接远端22端口并输入密码登陆</span><br></pre></td></tr></table></figure><p>然后根据提示输入 <code>user</code> 用户的密码登陆主机。</p><p>有两个常用的参数：</p><ul><li><code>-p</code> 指定其他 SSH 端口，如 SSH 端口非 22 端口，可用此参数指定</li><li><code>-i</code> 指定私钥通过密钥登陆，可配置好密钥后对免密登陆</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 连接远端1234端口</span><br><span class="line">$ ssh user@example.com -p 1234</span><br><span class="line"></span><br><span class="line"># 使用私钥id_rsa登陆</span><br><span class="line">$ ssh user@example.com -i ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure><p>但是随着手头服务器配置的增加，而不同服务器 IP、端口、用户、使用的密钥均不同，每次繁琐地查询和输入这么多配置和参数实在是麻烦，何况我怎么记得住这么多 IP 地址啊！（主要还是因为懒</p><a id="more"></a><h1 id="配置密钥登陆"><a href="#配置密钥登陆" class="headerlink" title="配置密钥登陆"></a>配置密钥登陆</h1><p>通过修改 SSH 的配置文件，为服务器预先配置好各主机的私钥和别名，之后就可以方便快捷地登陆服务器。</p><p>修改 <code>~/.ssh/config</code> 文件，格式如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Host *</span><br><span class="line">AddKeysToAgent yes</span><br><span class="line">IdentityFile ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure><p>上例配置 SSH 默认使用私钥 <code>~/.ssh/id_rsa</code> 进行连接。如果远端服务器已经事先将 <code>~/.ssh/id_rsa.pub</code> 添加到对应用户的 <code>~/.ssh/authorized_keys</code> 文件中，那么在本地执行命令 <code>$ ssh user@example.com</code> 后就可以自动免密登陆主机 <code>example.com</code></p><h1 id="配置主机别名"><a href="#配置主机别名" class="headerlink" title="配置主机别名"></a>配置主机别名</h1><p>对于个别不同的服务器配置，我们可以继续在 <code>~/.ssh/config</code> 文件中添加配置：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Host test</span><br><span class="line">Hostname localhost.test</span><br><span class="line">Port 1234</span><br><span class="line">IdentityFile ~/.ssh/test_rsa</span><br><span class="line">User ubuntu</span><br></pre></td></tr></table></figure><p>上例配置主机 <code>localhost.test:1234</code> 使用用户 <code>ubuntu</code> 和私钥 <code>~/.ssh/test_rsa</code> 进行连接。如果不配置 <code>IdentityFile</code> 则会提示输入密码才能登陆。</p><p>可以看到上述配置的 <code>Host</code> 项即为 SSH 连接的别名。该例中 <code>Host</code> 值为 <code>test</code>，那么我们在需要 SSH 连接主机 <code>localhost.test:1234</code> 的时候就可以直接执行命令立即免密登陆远端主机：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh test</span><br></pre></td></tr></table></figure><h1 id="命令别名"><a href="#命令别名" class="headerlink" title="命令别名"></a>命令别名</h1><p>如果不想这么麻烦，也可以通过设置命令别名来达到目的</p><p>修改 <code>~/.bash_profile</code> 文件，并根据服务器配置添加不同的命令别名：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alias myserver=&quot;ssh user@example.com&quot;</span><br><span class="line">alias myserver1234=&quot;ssh user@localhost.test -p 1234&quot;</span><br><span class="line">alias myserver=&quot;ssh user@remote.test -i ~/.ssh/id_rsa&quot;</span><br></pre></td></tr></table></figure><p>需要 SSH 连接主机 <code>localhost.test:1234</code> 的时候执行命令 <code>$ myserver1234</code> 即可。</p><p>真是好方便呢！</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;通常在 Shell 中使用 SSH 连接远程服务器时，我们需要输入完整的 SSH 命令，如：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ ssh user@example.com			#连接远端22端口并输入密码登陆&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后根据提示输入 &lt;code&gt;user&lt;/code&gt; 用户的密码登陆主机。&lt;/p&gt;
&lt;p&gt;有两个常用的参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-p&lt;/code&gt; 指定其他 SSH 端口，如 SSH 端口非 22 端口，可用此参数指定&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-i&lt;/code&gt; 指定私钥通过密钥登陆，可配置好密钥后对免密登陆&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# 连接远端1234端口&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ ssh user@example.com -p 1234&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 使用私钥id_rsa登陆&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ ssh user@example.com -i ~/.ssh/id_rsa&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;但是随着手头服务器配置的增加，而不同服务器 IP、端口、用户、使用的密钥均不同，每次繁琐地查询和输入这么多配置和参数实在是麻烦，何况我怎么记得住这么多 IP 地址啊！（主要还是因为懒&lt;/p&gt;
    
    </summary>
    
      <category term="教程" scheme="https://acuario.xyz/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="教程" scheme="https://acuario.xyz/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="SSH" scheme="https://acuario.xyz/tags/SSH/"/>
    
  </entry>
  
  <entry>
    <title>《精通正则表达式》学习笔记（四）</title>
    <link href="https://acuario.xyz/mastering-regex-summary-4/"/>
    <id>https://acuario.xyz/mastering-regex-summary-4/</id>
    <published>2019-07-23T13:44:11.000Z</published>
    <updated>2019-08-07T16:19:36.586Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="/mastering-regex-summary-1/">《精通正则表达式》学习笔记（一）</a><br>Ch.1 正则表达式入门<br>Ch.2 入门示例拓展</li><li><a href="/mastering-regex-summary-2/">《精通正则表达式》学习笔记（二）</a><br>Ch.3 正则表达式的特性和流派概览</li><li><a href="/mastering-regex-summary-3/">《精通正则表达式》学习笔记（三）</a><br>Ch.4 表达式的匹配原理</li><li><a href="/mastering-regex-summary-4/">《精通正则表达式》学习笔记（四）</a><br>Ch.5 正则表达式实用技巧</li><li><a href="/mastering-regex-summary-5/">《精通正则表达式》学习笔记（五）</a><br>Ch.6 打造高效正则表达式</li></ul><hr><blockquote><p>编写巧妙的正则表达式不仅仅是一种手艺(skill) 而且还是一种艺术(art)。</p></blockquote><h1 id="正则引擎的平衡法则"><a href="#正则引擎的平衡法则" class="headerlink" title="正则引擎的平衡法则"></a>正则引擎的平衡法则</h1><ul><li>只匹配期望的文本，排除不期望的文本。</li><li>易于控制和理解。</li><li>使用NFA引擎时必须保证效率——能够匹配时立即返回匹配结果，不能匹配时尽快报告匹配失败。</li></ul><a id="more"></a><h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><h2 id="匹配-IP-地址"><a href="#匹配-IP-地址" class="headerlink" title="匹配 IP 地址"></a>匹配 IP 地址</h2><ul><li>「<code>[0-9]*\.[0-9]*\.[0-9]*\.[0-9]*</code>」会匹配 <code>and then ......</code></li><li>「<code>^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$</code>」字符组书写重复</li><li>「<code>^\d+\.\d+\.\d+\.\d+$</code>」会匹配非 IP 地址文本如：<code>1234.5678.9101112.131415</code></li><li>「<code>^\d\d\d\.\d\d\d\.\d\d\d\.\d\d\d$</code>」数字部分匹配不够灵活，仅能匹配 3 位数字</li><li>下面三个表达式会匹配非法 IP 地址数字 <code>999</code><ul><li>「<code>^\d{1,3}.\d{1,3}.\d{1,3}.\d{1,3}$</code>」</li><li>「<code>\d\d?\d?.\d\d?\d?.\d\d?\d?.\d\d?\d?$</code>」</li><li>「<code>\d(\d\d?)?.\d(\d\d?)?.\d(\d\d?)?.\d(\d\d?)?$</code>」</li></ul></li><li>分析 IP 地址结构可以得出以下规律：<ul><li>只包含一个或两个数字的字段，无需考虑合法性，即「<code>\d|\d\d</code>」。</li><li><code>0</code> 或 <code>1</code> 开头的三位数（<code>000</code>-<code>199</code>）都合法。即「<code>[01]\d\d</code>」。</li><li><code>2</code> 开头的三位数字，第二位数字小于 <code>5</code> 则合法（<code>255</code>），即「<code>2[0-4]\d</code>」。</li><li>若第二位数字是 <code>5</code>，第三位数字就必须小于 <code>6</code>（<code>256</code>），即「<code>25[0-5]</code>」。</li><li>上述结果为「<code>\d|\d\d|[01]\d\d|2[0-4]\d|25[0-5]</code>」</li><li>合并前三个多选分支「<code>\d|\d\d|[01]\d\d</code>」为「<code>[01]?\d\d?</code>」</li><li>综上，一个 IP 地址数字的表达式结果为「<code>[01]?\d\d?|2[0-4]\d|25[0-5]</code>」</li></ul></li><li><p>匹配一个 IP 地址的表达式为：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">「^([01]?\d\d?|2[0-4]\d|25[0-5])\.([01]?\d\d?|2[0-4]\d|25[0-5])\.([01]?\d\d?|2[0-4]\d|25[0-5])\.([01]?\d\d?|2[0-4]\d|25[0-5])$」</span><br></pre></td></tr></table></figure></li><li><p>在「<code>^</code>」后添加环视「<code>(?!0+\.0+\.0+\.0+$)</code>」来避免匹配 <code>0.0.0.0</code></p></li><li>在表达式首尾添加环视「<code>(?&lt;![\w.])</code>…<code>(?![\w.])</code>」或使用「<code>(^| )</code>…<code>( |$)</code>」来保证匹配文本前后不出现「<code>[\w.]</code>」能匹配的字符，避免匹配嵌套型字符 <code>1.2.3.4.5.6</code> 中的 <code>1.2.3.4</code> 等类似 IP 地址的文本</li><li>某些时候，处理各种极端情形会降低投入产出比。更合适的做法是<strong>不依赖正则表达式完成全部工作，善用其他工具辅助验证</strong>。</li></ul><h2 id="处理文件名"><a href="#处理文件名" class="headerlink" title="处理文件名"></a>处理文件名</h2><p>文本：<code>/usr/local/bin/gcc</code><br>期望：<code>gcc</code>   </p><ol><li>去掉文件名开头的路径<br>RegEx：<code>^.*/</code><br>释义：使用匹配优先（贪婪）特性，匹配一整行，然后回溯到最后的斜线   </li></ol><ul><li>若匹配一个恰好没有斜线的字符串，正则引擎会在字符串的起始位置开始搜索。「<code>.*</code>」抵达字符串的末尾，但不断回退，直到最后它交还了匹配的所有字符，仍然无法匹配。此时，正则引擎得知<strong>在字符串的起始位</strong>不存在匹配。</li><li>之后传动装置开始工作，从第 2 个字符开始，依次尝试匹配整个正则表达式，在字符串的每个位置进行扫描回溯。若字符串很长，就可能存在大量的回溯（DFA 不存在这个问题)。</li><li>几乎所有以「<code>.*</code>」开头的正则表达式，在某个字符串的起始位置不能匹配，也就不能在其他任何位置匹配，它只会在字符串的起始位置尝试一次。</li><li>在正则表达式中写明开头位置的匹配规则更明智一些。</li></ul><ol start="2"><li>从路径中获取文件名<br>RegEx：<code>([^/]*)$</code><br>释义：在结尾设置一个锚点，忽略路径，从最后一个斜线开始匹配所有内容。   </li></ol><ul><li>该表达式的唯一要求是字符串有 <code>$</code> 能够匹配的结束位置</li><li>在 NFA 中，该表达式的效率很低，要进行 40+ 次回溯。</li></ul><ol start="3"><li>所在路径和文件名<br>RegEx：<code>^(.*)/(.*)$</code><br>释义：使用 <code>$1</code> 和 <code>$2</code> 来提取所在路径和文件名。第一个「<code>.*</code>」先捕获所有文本，不给「<code>/</code>」和 <code>$2</code> 留下任何字符，在尝试匹配「<code>/(.*)$</code>」时发生的回溯会把“交还的”部分留给后面的「<code>.*</code>」。   </li></ol><h2 id="匹配对称的括号"><a href="#匹配对称的括号" class="headerlink" title="匹配对称的括号"></a>匹配对称的括号</h2><ol><li>「<code>\(.*\)</code>」 匹配括号及括号内部的任何字符。</li><li>「<code>\([^)]*\)</code>」 匹配从一个开括号到最近的闭括号。</li><li>「<code>\([^()]*\)</code>」 匹配从一个开括号到最近的闭括号，但是不容许其中包含开括号。</li></ol><ul><li>上下述三个表达式用于匹配带括号的文本内容，匹配结果如图</li></ul><p><img src="https://i.loli.net/2019/07/17/5d2e05fe2848445405.png" alt="匹配带括号的文本"></p><ul><li>为解决<strong>正则表达式无法匹配任意深度的嵌套结构</strong>的问题，可以用正则表达式来匹<br>配特定深度的嵌套括号，但不是任意深度的嵌套括号。</li><li>处理单层嵌套的正则表达式是:「<code>\([^()]*(\([^()]*\)[^()]*)*\)</code>」</li></ul><h2 id="匹配浮点数"><a href="#匹配浮点数" class="headerlink" title="匹配浮点数"></a>匹配浮点数</h2><ul><li>「<code>-?[0-9]*\.?[0-9]*</code>」会匹配 <code>-.0</code></li><li>「<code>-?[0-9]*\.?[0-9]*</code>」会产生空匹配（匹配没有任何必须的元素），如 <code>this has no number</code>、<code>nothing here</code></li><li><strong>把真正意图表达清楚</strong>非常重要：一个浮点数必须要有至少一位数字，否则就不是一个合法的值。</li><li>「<code>-?[0-9]+</code>」用于限定浮点数含有数字的特性</li><li>「<code>(\.[0-9]*)?</code>」用于限定浮点数的<em>小数点</em>和<em>小数部分</em></li><li>综上，「<code>-?[0-9]+(\.[0-9]*)?</code>」即可用于匹配浮点数而不匹配空字符，即不产生<strong>空匹配</strong></li></ul><h2 id="匹配分隔符之内的文本"><a href="#匹配分隔符之内的文本" class="headerlink" title="匹配分隔符之内的文本"></a>匹配分隔符之内的文本</h2><p>文本：<code>a passport needs a &quot;2\&quot;x3\&quot; likeness&quot; of the holder</code><br>期望：<code>&quot;2\&quot;x3\&quot; likeness&quot;</code>   </p><ul><li>匹配分隔符之内的文本的主要步骤：<ol><li>匹配起始分隔符(opening delimiter)。</li><li>匹配正文(main text,即结束分隔符之前的所有文本)。</li><li>匹配结束分隔符。</li></ol></li><li>匹配开始和结束分隔符很容易，但匹配正文的时不能超越结束分隔符：<ul><li>匹配非引号内容：「<code>[^&quot;]</code>」   </li><li>匹配转义的反斜线需要使用环视：「<code>(?&lt;=\\)&quot;</code>」   </li><li>综上得出的表达式为「<code>&quot;([^&quot;]|(?&lt;=\\)&quot;)*&quot;</code>」，此时可以匹配 <code>2\&quot;x3\&quot;</code></li></ul></li></ul><p>文本：<code>&quot;/-|-\\&quot; or &quot;[^-^]&quot;</code><br>期望：<code>&quot;/-|-\\&quot;</code><br>RegEx：<code>&quot;([^&quot;]|(?&lt;=\\)&quot;)*&quot;</code><br>结果：<code>&quot;/-|-\\&quot; or &quot;</code>   </p><ul><li>第一个闭引号之前存在一个反斜线，该反斜线本身是被转义的，其后的引号是表示引用文本的结束。逆序环视无法识别这个被转义的反斜线。</li><li>匹配的位于开始分隔符和结東分隔符之间的文本可以包括转义的字符「<code>\\.</code>」，也可以包括非引号的任何字符「<code>[^&quot;]</code>」。</li><li>综上得出的表达式为「<code>&quot;(\\.|[^&quot;])*&quot;</code>」</li><li>匹配优先和忽略优先都期望获得匹配，如果找不到结束的引号，它就会回溯，从而降低性能。</li><li>如果回溯会导致不期望，与多选结构有关的匹配结果，可能是因为任何成功的匹配都不过是多选分支的排列顺序造成的偶然结果，</li><li>如果有<strong>占有优先量词</strong>或者是<strong>固化分组</strong>，那么这个正则表达式可以被持续优化以提升性能（特别是对于 NFA）</li></ul><h2 id="去除文本首尾的空白字符"><a href="#去除文本首尾的空白字符" class="headerlink" title="去除文本首尾的空白字符"></a>去除文本首尾的空白字符</h2><ol><li>去除文本首部的空白字符「<code>s/^\s+//</code>」<br>去除文本末尾的空白字符「<code>s/\s+$/</code>」   </li><li>去除文本首尾空白字符的表达式：「<code>s/\s*(.*?)\s*$/$1/s</code>」<br>该表达式因为忽略优先约束的点号每次应用时都要检查「<code>\s*$</code>」导致大量回溯，严重影响效率。</li><li>去除文本首尾空白字符的表达式：「<code>s/^\s*((?:.*\S)?)\s*$/$1/s</code>」后面的「<code>\S</code>」强迫回溯直到找到一个非空字符，把剩下的空白字符留给最后的「<code>\s*$</code>」，捕获括号之外的内容。</li></ol><h1 id="HTML-相关范例"><a href="#HTML-相关范例" class="headerlink" title="HTML 相关范例"></a>HTML 相关范例</h1><h2 id="匹配-HTML-Tag"><a href="#匹配-HTML-Tag" class="headerlink" title="匹配 HTML Tag"></a>匹配 HTML Tag</h2><p>RegEx：<code>&lt;(&quot;[^&quot;]*&quot;|&#39;[^&#39;]*&#39;|[^&#39;&quot;&gt;])*&gt;</code><br>释义：<br><img src="https://i.loli.net/2019/07/20/5d31ec5ad68a949796.png" alt="匹配 HTML Tag"></p><ul><li>引用字符串可能为空（例如 <code>alt=&quot;&quot;</code>）, 所以最开始的两个多选分支的引号中使用「<code>*</code>」而非「<code>+</code>」。</li><li>NFA 引擎下，多选分支之间不存在重复，所以最后的「<code>&gt;</code>」无法匹配是产生的回溯是不需要的，可使用非捕获型括号改写表达式以提高效率。</li></ul><h2 id="匹配-HTML-Link"><a href="#匹配-HTML-Link" class="headerlink" title="匹配 HTML Link"></a>匹配 HTML Link</h2><p>文本：<code>...&lt;a href=&quot;http://www.oreilly.com&quot;&gt;O&#39;Reilly Media&lt;/a&gt;...</code><br>期望：<code>http://www.oreilly.com</code> 和 <code>O&#39;Reilly Media</code><br>RegEx：<code>\b HRFF\s* = \s*(?:&quot;([^&quot;]*)&quot;|&#39;([^&#39;]*)&#39;|([^&#39;&quot;&gt;\S]+))</code><br>释义：<br><img src="https://i.loli.net/2019/07/20/5d31f0a71ac2934742.png" alt="匹配 HTML Link"></p><h2 id="校验-HTTP-URL"><a href="#校验-HTTP-URL" class="headerlink" title="校验 HTTP URL"></a>校验 HTTP URL</h2><p>将 URL 地址分解为主机名（hostname）和路径（path）两部分。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">^http://        # 匹配协议</span><br><span class="line">([^/:]+)        # 捕获主机名</span><br><span class="line">(:(\d+))?       # 匹配端口号（可能没有）</span><br><span class="line">(/.*)?$         # 捕获路径</span><br></pre></td></tr></table></figure><h2 id="提取-URL"><a href="#提取-URL" class="headerlink" title="提取 URL"></a>提取 URL</h2><p>从纯文本中提取 URL 的正则表达式框架如下：<br><img src="https://i.loli.net/2019/07/22/5d34a44a170a511410.png" alt="提取纯文本中的URL"></p><h2 id="几个保持数据协调性的原则"><a href="#几个保持数据协调性的原则" class="headerlink" title="几个保持数据协调性的原则"></a>几个保持数据协调性的原则</h2><p>手动保持正则引擎的协调，才能忽略不需要的文本。有时为了提高表达式的效率，应该选择跳过不需要的文本，而非使用正向思维直接匹配目标文本。</p><ol><li>根据期望保持匹配的协调性<br>合理使用忽略优先量词，在后面的表达式失败之前，优先忽略容易引起大范围匹配成功的匹配操作。跳过我们希望跳过的文本而进行匹配。</li><li>不匹配时也应当保证协调性   </li><li>使用「<code>\G</code>」保证协调<br>「<code>\G</code>」用于匹配上一次匹配结束的位置。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/mastering-regex-summary-1/&quot;&gt;《精通正则表达式》学习笔记（一）&lt;/a&gt;&lt;br&gt;Ch.1 正则表达式入门&lt;br&gt;Ch.2 入门示例拓展&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/mastering-regex-summary-2/&quot;&gt;《精通正则表达式》学习笔记（二）&lt;/a&gt;&lt;br&gt;Ch.3 正则表达式的特性和流派概览&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/mastering-regex-summary-3/&quot;&gt;《精通正则表达式》学习笔记（三）&lt;/a&gt;&lt;br&gt;Ch.4 表达式的匹配原理&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/mastering-regex-summary-4/&quot;&gt;《精通正则表达式》学习笔记（四）&lt;/a&gt;&lt;br&gt;Ch.5 正则表达式实用技巧&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/mastering-regex-summary-5/&quot;&gt;《精通正则表达式》学习笔记（五）&lt;/a&gt;&lt;br&gt;Ch.6 打造高效正则表达式&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;编写巧妙的正则表达式不仅仅是一种手艺(skill) 而且还是一种艺术(art)。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;正则引擎的平衡法则&quot;&gt;&lt;a href=&quot;#正则引擎的平衡法则&quot; class=&quot;headerlink&quot; title=&quot;正则引擎的平衡法则&quot;&gt;&lt;/a&gt;正则引擎的平衡法则&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;只匹配期望的文本，排除不期望的文本。&lt;/li&gt;
&lt;li&gt;易于控制和理解。&lt;/li&gt;
&lt;li&gt;使用NFA引擎时必须保证效率——能够匹配时立即返回匹配结果，不能匹配时尽快报告匹配失败。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="https://acuario.xyz/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="RegEx" scheme="https://acuario.xyz/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/RegEx/"/>
    
    
      <category term="学习笔记" scheme="https://acuario.xyz/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="精通正则表达式" scheme="https://acuario.xyz/tags/%E7%B2%BE%E9%80%9A%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
      <category term="RegEx" scheme="https://acuario.xyz/tags/RegEx/"/>
    
      <category term="正则引擎" scheme="https://acuario.xyz/tags/%E6%AD%A3%E5%88%99%E5%BC%95%E6%93%8E/"/>
    
      <category term="平衡法则" scheme="https://acuario.xyz/tags/%E5%B9%B3%E8%A1%A1%E6%B3%95%E5%88%99/"/>
    
      <category term="正则表达式实例" scheme="https://acuario.xyz/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%AE%9E%E4%BE%8B/"/>
    
  </entry>
  
  <entry>
    <title>《精通正则表达式》学习笔记（三）</title>
    <link href="https://acuario.xyz/mastering-regex-summary-3/"/>
    <id>https://acuario.xyz/mastering-regex-summary-3/</id>
    <published>2019-07-14T15:27:11.000Z</published>
    <updated>2019-08-07T16:19:52.645Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="/mastering-regex-summary-1/">《精通正则表达式》学习笔记（一）</a><br>Ch.1 正则表达式入门<br>Ch.2 入门示例拓展</li><li><a href="/mastering-regex-summary-2/">《精通正则表达式》学习笔记（二）</a><br>Ch.3 正则表达式的特性和流派概览</li><li><a href="/mastering-regex-summary-3/">《精通正则表达式》学习笔记（三）</a><br>Ch.4 表达式的匹配原理</li><li><a href="/mastering-regex-summary-4/">《精通正则表达式》学习笔记（四）</a><br>Ch.5 正则表达式实用技巧</li><li><a href="/mastering-regex-summary-5/">《精通正则表达式》学习笔记（五）</a><br>Ch.6 打造高效正则表达式</li></ul><hr><h1 id="正则引擎的分类"><a href="#正则引擎的分类" class="headerlink" title="正则引擎的分类"></a>正则引擎的分类</h1><p>正则引擎主要分为 3 类：</p><ol><li>DFA（符合或不符合 POSIX 标准的都属此类）</li><li>传统型 NFA</li><li>POSIX NFA</li></ol><table><thead><tr><th>引擎类型</th><th>程序</th><th>忽略优先量词（懒惰）</th><th>捕获型括号</th><th>回溯</th></tr></thead><tbody><tr><td>DFA</td><td><code>awk</code>（大多数版本）、<code>egrep</code>（大多数版本）、<code>flex</code>、<code>lex</code>、MySQL、Procmail</td><td>不支持</td><td>不支持</td><td>不支持</td></tr><tr><td>传统型 NFA</td><td>GNU Emacs、Java、<code>grep</code>（大多数版本）、<code>less</code>、<code>more</code>、.NET 语言、PCRE library、Perl、PHP（所有三套正则库）、Python、Ruby、sed（大多数版本）、<code>vi</code></td><td>支持</td><td>支持</td><td>支持，但性能差</td></tr><tr><td>POSIX NFA</td><td><code>mawk</code>、Mortice Kern Systems’utilities、GNU Emacs（明确指定时使用）</td><td>不支持</td><td>支持</td><td>支持，但性能差</td></tr><tr><td>DFA/NFA 混合</td><td>GNU <code>awk</code>、GNU <code>grep/egrep</code>、Tcl</td><td>支持</td><td>支持</td><td>DFA 支持</td></tr></tbody></table><ul><li>判断是否传统型 NFA：是否支持忽略优先量词（懒惰）。使用正则表达式 <code>nfa|nfa not</code> 来匹配字符串 <code>nfa not</code>，如果只匹配了 <code>nfa</code>，这就是传统型 NFA。如果整个 <code>nfa not</code> 都能匹配，则此引擎要么是 POSIXNFA，要么是 DFA。</li></ul><a id="more"></a><h1 id="匹配的基础"><a href="#匹配的基础" class="headerlink" title="匹配的基础"></a>匹配的基础</h1><p>普适规则：</p><ol><li>优先选择最左端（最靠开头）的匹配结果。</li><li>标准的匹配量词（<code>*</code>、<code>+</code>、<code>?</code> 和 <code>{m，n}</code>）是匹配优先（greedy，贪婪）的。</li></ol><ul><li>标准匹配量词的结果“可能”并非所有可能中最长的，但它们总是尝试匹配尽可能多的字符，直到<strong>匹配上限</strong>为止。如果最终结果并非该表达式的所有可能中最长的，原因肯定是匹配字符过多导致匹配失败。</li><li>「<code>.*</code>」永远不会失败，因为“不匹配任何字符”也是「<code>.*</code>」的可能结果之一。</li><li>「<code>(.*).*</code>」结果没有变化。开头的「<code>.*</code>」（括号中的）会霸占整个标题的文本，而不给第二个「<code>.*</code>」留下任何字符。而第二个「<code>.*</code>」的匹配失败并不要紧，因为「<code>.*</code>」不匹配任何字符也能成功。如果我们给第二个「<code>.*</code>」也加上括号，<code>$2</code>将会是空白。</li><li>表达式中的某些部分可能“<strong>强迫</strong>”之前匹配优先的部分“释放”（或者说“交还（unmatch）”） 某些字符。例如：「<code>^.*([0-9][0-9])</code>」将“<strong>强迫</strong>”「<code>.*</code>」交还两个数字使得匹配成功。</li><li>多个贪婪贪婪量词之间遵循「<strong>先来先服务</strong>」原则。例如：「<code>^.*([0-9]+)</code>」试图匹配 <code>copyright 2003</code> 时，「<code>([0-9]+)</code>」只能匹配到「3」而非「2003」，在该例子中，首先服务「<code>^.*</code>」，使其满足最贪婪的要求，然后才服务「<code>([0-9]+)</code>」。</li></ul><h1 id="表达式主导与文本主导"><a href="#表达式主导与文本主导" class="headerlink" title="表达式主导与文本主导"></a>表达式主导与文本主导</h1><ul><li>DFA：确定型有穷自动机</li><li>NFA：非确定型有穷自动机</li></ul><blockquote><p>NFA 以表达式本身为依据，进行匹配尝试，DFA 以匹配文本为依据，观察子表达式是否匹配成功。</p></blockquote><ul><li>NFA 引擎：表达式主导（regex-directed）——表达式中的控制权在不同的元素之间转换。正则表达式每次检查一部分（由引擎查看表达式的一部分），同时检查“当前文本（current text）”是否匹配表达式的当前部分。如果是，则继续表达式的下一部分，如此继续，直到表达式的所有部分都能匹配，即整个表达式能够匹配成功。</li><li>DFA 引擎：文本主导（text-directed）——在扫描字符串时，会记录“当前有效（currently in the works）”的所有匹配可能。</li><li>DFA引擎在扫描字符串时，会记录“当前有效（currently in the works）”的所有匹配可能。</li><li>DFA 扫描的字符串中的每个字符都对引擎进行了控制。在本例中，某个未完成的匹配也许是任意多个（只要可行）匹配的开始。不合适的匹配可能在扫描后继文字时会被去除。文本中出现的某个字符会令所有处理中的匹配可能失效，就会返回某个之前保留的完整匹配。如果不存在这样的完整匹配，则要报告在当前位置无法匹配。</li></ul><h2 id="NFA-和-DFA-比较"><a href="#NFA-和-DFA-比较" class="headerlink" title="NFA 和 DFA 比较"></a>NFA 和 DFA 比较</h2><ul><li>一般情况下，文本主导的 DFA 引擎要快一些。正则表达式主导的 NFA 引擎，因为需要对同样的文本尝试不同的子表达式匹配，可能会浪费时间。</li><li>在 NFA 的匹配过程中，目标文本中的某个字符可能会被正则表达式中的不同部分重复检测（甚至有可能被同一部分反复检测）。</li><li>DFA 引擎则是确定型的（deterministic）——目标文本中的每个字符只会检查（最多）一遍。</li><li>DFA 引擎会同时记录所有的匹配选择，所以不同表达式最终能够捕获的文本相同，在写法上的差异并无意义，选择哪一个表达式并无区别。</li><li>DFA 匹配很迅速、一致。</li></ul><h1 id="回溯"><a href="#回溯" class="headerlink" title="回溯"></a>回溯</h1><ul><li>如果正则表达式中余下的部分最终匹配失败，引擎会知道需要<strong>回溯</strong>到之前做出选择的地方，选择其他的备用分支继续尝试。</li><li>回溯仅发生于 NFA 引擎执行匹配时，这是由 NFA 的特性导致——NFA 引擎是表达式主导，在每次扫描文本后都检测是否满足量词和多选结构，如果不满足且无待扫描文本，则会一次又一次「撤销」扫描，取出最近一次满足匹配的结果。这个回滚动作就是「回溯」。</li><li><p>回溯的机制类似于面包屑 / 压栈（LIFO，Last In First Out，后进先出），也可以说面包屑即为压栈存储的一个个<strong>备用状态</strong>。</p><p>举个栗子，用「<code>[0-9+]</code>」来匹配 <code>a 1234 num</code> 的过程中：</p><p><img src="https://i.loli.net/2019/06/21/5d0c38074ab5f56669.png" alt></p><p>锚点从上到下形如面包屑，在匹配失败时回到上一级继续尝试匹配。<br>四个锚点的的状态都会作为保留状态记录下来，依次查看最长的匹配文本，并在匹配失败时一个接一个回溯回来。</p></li><li><p>回溯机制不但需要重新计算正则表达式和文本的对应位置，也需要维护括号内的子表达式所匹配文本的状态。</p></li><li>在匹配过程中，每次回溯都把当前状态中正则表达式的对应位置指向括号之前。</li><li>回溯对括号的这种处理，不但需要同时维护 <code>$1</code> 的状态，也会影响匹配的效率。</li><li>由星号（或其他任何匹配优先量词）限定的部分不受后面元素影响，而只是匹配尽可能多的内容。</li><li>忽略优先的匹配（懒惰）的原因在于，其首先考虑尝试忽略，如「<code>b??</code>」中的懒惰量词「<code>??</code>」会首先<strong>匹配零个</strong>文本 <code>b</code>（注意并不是<strong>不匹配</strong>）</li><li>简单说，懒惰量词就是匹配其能力的下限，比如「<code>b{3,8}?</code>」在匹配 <code>bbbbbbb</code> 时只匹配 3 个 <code>b</code>；「<code>b+?</code>」在匹配 <code>bbbbbbb</code> 时只匹配 1 个 <code>b</code>。</li></ul><h1 id="关于贪婪、懒惰和回溯的要点"><a href="#关于贪婪、懒惰和回溯的要点" class="headerlink" title="关于贪婪、懒惰和回溯的要点"></a>关于贪婪、懒惰和回溯的要点</h1><ul><li><p>由于「<code>*</code>」是贪婪的量词，所以在使用时还需谨慎，不能过分依赖。举个栗子：<br>文本：<code>The name &quot;McDonald&#39;s&quot; is said &quot;makudonarudo&quot; in Japanese.</code></p><ol><li><p>RegEx：<code>&quot;.*&quot;</code><br>结果：<code>&quot;McDonald&#39;s&quot; is said &quot;makudonarudo&quot;</code><br>释义：贪婪量词尽可能多地进行匹配</p></li><li><p>RegEx：<code>&quot;[^&quot;]*&quot;</code><br>结果：<code>&quot;McDonald&#39;s&quot;</code><br>释义：「<code>[^&quot;]</code>」尽可能多地匹配非<code>&quot;</code>的字符，即<code>&quot;</code>前的字母</p></li></ol></li><li><p>善用<strong>懒惰量词</strong>解决成对标签的问题。举个栗子：<br>文本：<code>...&lt;B&gt;Billions&lt;/B&gt; and &lt;B&gt;Zillions&lt;/B&gt; of suns....</code><br>期望：<code>&lt;B&gt;Billions&lt;/B&gt;</code></p><ol><li><p>RegEx：<code>&lt;B&gt;[^&lt;/B&gt;]&lt;/B&gt;</code><br>结果：匹配失败<br>释义：<code>[]</code>是字符范围元字符，无法表达<code>非&lt;/B&gt;</code>的含义，可以使用环视功能进行匹配</p></li><li><p>RegEx：<code>&lt;B&gt;.*?&lt;/B&gt;</code><br>结果：<code>&lt;B&gt;Billions&lt;/B&gt;</code><br>释义：「<code>*?</code>」为懒惰量词，可以尽可能少地匹配文本</p></li></ol></li><li><p>懒惰量词有时在处理成对符号时并不完美。举个栗子：<br>文本：<code>...&lt;B&gt;Billions and &lt;B&gt;Zillions&lt;/B&gt; of suns....</code><br>期望：<code>&lt;B&gt;Zillions&lt;/B&gt;</code></p><ol><li><p>RegEx：<code>&lt;B&gt;.*?&lt;/B&gt;</code><br>结果：<code>&lt;B&gt;Billions and &lt;B&gt;Zillions&lt;/B&gt;</code><br>释义：「<code>.*?</code>」会匹配左边的<code>&lt;B&gt;</code>标签，这是不满足期望的，可以使用<strong>排除环视</strong>功能进行匹配</p></li><li><p>RegEx：<br><img src="https://i.loli.net/2019/07/04/5d1e1c173fa1470167.png" alt><br>结果：<code>&lt;B&gt;Billions&lt;/B&gt;</code></p></li><li><p>RegEx：<br><img src="https://i.loli.net/2019/07/04/5d1e1c6c2cb0387976.png" alt><br>结果：<code>&lt;B&gt;Billions&lt;/B&gt;</code></p></li></ol></li><li><p>有一些问题是贪婪和懒惰都无法解决的问题，举个例子：<br>文本：<code>1.62500000002828</code>，<code>9.43</code>，<code>27.625</code><br>期望：替换过长小数为三位小数 <code>1.625</code>，<code>9.43</code>，<code>27.625</code></p><ol><li><p>RegEx：<code>$prive =~ s/(\.\d\d[1-9]?)\d*/$1/;</code><br>结果：<code>$1 = 1.625</code><br>释义：对于匹配三位小数，此表达式效率还不够高，部分匹配过程存在浪费</p></li><li><p>RegEx：<code>$prive =~ s/(\.\d\d[1-9]?)\d+/$1/;</code><br>结果：<code>$1 = 1.625</code>（正常替换），<code>$1 = 9.43</code> （不替换），<code>$1 = 27.62</code><br>释义：「<code>\.\d\d</code>」匹配了 <code>27.62</code>，「<code>\d+</code>」匹配了 <code>5</code>，「<code>[1-9]?</code>」为可选分支，优先级别比「<code>\d+</code>」低，不进行任何匹配，于是最终导致 <code>27.625</code> 被替换为 <code>27.62</code></p></li></ol></li><li><p>在<strong>只有一条可能的匹配路径时</strong>，使用<em>贪婪</em>和<em>懒惰</em>量词的正则表达式对结果无影响,只是因其尝试路径的次序不同，引擎尝试匹配的次数不同，即<strong>效率不同</strong>。</p></li></ul><h1 id="固化分组"><a href="#固化分组" class="headerlink" title="固化分组"></a>固化分组</h1><ul><li>在固化分组「<code>(?&gt;……)</code>」匹配结束时，它已经匹配的文本已经固化为一个单元，只能作为整体而保留或放弃。回溯永远也不能选择其中的状态。举个例子：「<code>(\.\d\d(?&gt;[1-9]?))\d+</code>」中固化分组「<code>(?&gt;[1-9]?)</code>」使得 <code>.625</code> 末尾的 5 会遭遇 「<code>[1-9]?</code>」的固化匹配，然后再「<code>\d+</code>」需要回溯时匹配失败，从而导致 <code>.625</code> 整个文本匹配失败，从而不被处理，提升执行效率。</li><li>贪婪和懒惰影响检测顺序，固化分组影响备用状态（面包屑）的取舍。</li><li>[<code>(?&gt;.*?)</code>」是一个相当复杂的正则表达式，它永远无法匹配任何字符。「<code>.*?</code>」是「<code>.*</code>」的忽略优先（懒惰）表示，它限定的是一个点号，所以首选的分支是忽略点号，把匹配点号的状态保留下来备用。但该备用状态马上又会因为匹配退出了固化分组而被放弃。</li><li>「<code>^\w+:</code>」无法匹配 <code>Subject</code>，但正则表达式必须从末尾依次向前尝试匹配各种备用状态后才能得出匹配失败的结论。使用固化分组正则表达式「<code>^(?&gt;\w+):</code>」将在尝试「<code>:</code>」匹配失败后直接抛弃固化分组内容「<code>\w+</code>」，即只需尝试 1 次匹配便得出匹配失败结论。<strong>大大提高匹配效率。</strong></li></ul><h1 id="环视"><a href="#环视" class="headerlink" title="环视"></a>环视</h1><ul><li>环视结构的匹配尝试结束，它就不会留下任何备用状态。</li><li>在肯定环视中使用捕获括号，就能模拟实现固化分组和占有优先量词。「<code>(?&gt;regex)</code>」可以用「<code>(?=(regex))\1</code>」来模拟。举个栗子：<ul><li>「<code>(?&gt;\w+):</code>」为固化分组表达式</li><li>「<code>^(?=(\w+))\1:</code>」为环视表达式，环视中的「<code>\w+</code>」是贪婪匹配的，匹配整个单词。当环视结束之后，备用状态都会被放弃(和固化分组一样)。但与固化分组不同：虽然此时捕获了单词，但它不是全局匹配的一部分。「<code>\1</code>」的使用是为了把匹配从这个单词结束的位置进行下去。</li></ul></li></ul><h1 id="多选结构"><a href="#多选结构" class="headerlink" title="多选结构"></a>多选结构</h1><ul><li>对 NFA 来说，多选结构既<strong>不是匹配优先的</strong>，也<strong>不是忽略优先的</strong>，而是<strong>按顺序排列</strong>的。</li><li>对 DFA 来说，多选结构匹配所有多选分支中能匹配最多文本的那个。</li><li>如果多选分支是<strong>按顺序排列</strong>的。，而能够匹配同样文本的多选分支又<strong>不只一个</strong>，就要小心安排多选分支的<strong>先后顺序</strong>。</li></ul><p>文本：<code>Jan 31 is Dad&#39;s birthday</code><br>期望：<code>Jan 31</code></p><ol><li><p>RegEx：<code>Jan (0?[1-9]|[12][0-9]|3[01])</code><br>结果：<code>Jan 3</code><br>释义：「<code>0?</code>」不会匹配成功，但后续的「<code>[0-9]</code>」会匹配 <code>3</code>，此时完成所有匹配需求，故匹配成功。</p></li><li><p>RegEx：<code>Jan ([12][0-9]|3[01]|0?[1-9])</code><br>RegEx：<code>Jan (31|[123]0|[012?[1-9]])</code><br>结果：<code>Jan 31</code><br>释义：上述两个 RegeEx 的多选结构顺序保证了匹配的内容与期望相符</p></li><li><p>RegEx：<code>Jan (0[1-9]|[12][0-9]?|3[01]?|[4-9])</code><br>结果：<code>Jan 31</code><br>释义：上述多选结构不受内部多选分支的顺序影响，均可匹配成功</p></li></ol><h1 id="NFA、DFA-和-POSIX"><a href="#NFA、DFA-和-POSIX" class="headerlink" title="NFA、DFA 和 POSIX"></a>NFA、DFA 和 POSIX</h1><p>NFA 和 DFA 引擎理应匹配相同文本，提供相同功能。但在实际中，因为人们需要更强的功能，更具表达能力的正则表达式，它们各自的表达式语意（解析方式）发生了变化。</p><h2 id="最左最长规则"><a href="#最左最长规则" class="headerlink" title="最左最长规则"></a>最左最长规则</h2><ul><li>如果传动装置在文本的某个特定位置启动 DFA 引擎，而在此位置又有一个或多个匹配的可能，DFA 就会选择这些可能中最长的。</li><li>POSIX 标准规定，如果在字符串的某个位置存在多个可能的匹配，应当返回的是最长的匹配。</li></ul><h2 id="速度和效率"><a href="#速度和效率" class="headerlink" title="速度和效率"></a>速度和效率</h2><ul><li>POSIX NFA 需要进行更多的回溯，尝试正则表达式的所有变体。所以表达式的差异会极大影响其匹配的效率。</li><li>DFA 引擎用更多时间和空间来换取匹配效率。</li></ul><table><thead><tr><th></th><th>DFA</th><th>NFA</th></tr></thead><tbody><tr><td>预编译阶段</td><td>优化措施的效果更好</td><td>编译更快，所需内存更少</td></tr><tr><td>匹配速度</td><td>与表达式无关</td><td>与表达式有关</td></tr><tr><td>匹配速度</td><td></td><td>NFA 尝试表达式的所有变体后才报告匹配失败，POSIX NFA 尝试匹配最长文本</td></tr><tr><td>匹配结果</td><td>返回最左最长文本</td><td>NFA 返回最左最长文本 / 其他文本</td></tr><tr><td>匹配能力</td><td></td><td>1. 支持捕获括号内的子表达式的文本（eg. 反向引用 / 后匹配信息）</td></tr><tr><td>匹配能力</td><td></td><td>2. 支持环视和其他零长度确认</td></tr><tr><td>匹配能力</td><td></td><td>3. 支持懒惰量词和多选结构</td></tr><tr><td>匹配能力</td><td></td><td>4. 支持贪婪量词和固化分子</td></tr><tr><td>实现难度</td><td></td><td>实现简单</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/mastering-regex-summary-1/&quot;&gt;《精通正则表达式》学习笔记（一）&lt;/a&gt;&lt;br&gt;Ch.1 正则表达式入门&lt;br&gt;Ch.2 入门示例拓展&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/mastering-regex-summary-2/&quot;&gt;《精通正则表达式》学习笔记（二）&lt;/a&gt;&lt;br&gt;Ch.3 正则表达式的特性和流派概览&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/mastering-regex-summary-3/&quot;&gt;《精通正则表达式》学习笔记（三）&lt;/a&gt;&lt;br&gt;Ch.4 表达式的匹配原理&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/mastering-regex-summary-4/&quot;&gt;《精通正则表达式》学习笔记（四）&lt;/a&gt;&lt;br&gt;Ch.5 正则表达式实用技巧&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/mastering-regex-summary-5/&quot;&gt;《精通正则表达式》学习笔记（五）&lt;/a&gt;&lt;br&gt;Ch.6 打造高效正则表达式&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&quot;正则引擎的分类&quot;&gt;&lt;a href=&quot;#正则引擎的分类&quot; class=&quot;headerlink&quot; title=&quot;正则引擎的分类&quot;&gt;&lt;/a&gt;正则引擎的分类&lt;/h1&gt;&lt;p&gt;正则引擎主要分为 3 类：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;DFA（符合或不符合 POSIX 标准的都属此类）&lt;/li&gt;
&lt;li&gt;传统型 NFA&lt;/li&gt;
&lt;li&gt;POSIX NFA&lt;/li&gt;
&lt;/ol&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;引擎类型&lt;/th&gt;
&lt;th&gt;程序&lt;/th&gt;
&lt;th&gt;忽略优先量词（懒惰）&lt;/th&gt;
&lt;th&gt;捕获型括号&lt;/th&gt;
&lt;th&gt;回溯&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;DFA&lt;/td&gt;
&lt;td&gt;&lt;code&gt;awk&lt;/code&gt;（大多数版本）、&lt;code&gt;egrep&lt;/code&gt;（大多数版本）、&lt;code&gt;flex&lt;/code&gt;、&lt;code&gt;lex&lt;/code&gt;、MySQL、Procmail&lt;/td&gt;
&lt;td&gt;不支持&lt;/td&gt;
&lt;td&gt;不支持&lt;/td&gt;
&lt;td&gt;不支持&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;传统型 NFA&lt;/td&gt;
&lt;td&gt;GNU Emacs、Java、&lt;code&gt;grep&lt;/code&gt;（大多数版本）、&lt;code&gt;less&lt;/code&gt;、&lt;code&gt;more&lt;/code&gt;、.NET 语言、PCRE library、Perl、PHP（所有三套正则库）、Python、Ruby、sed（大多数版本）、&lt;code&gt;vi&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;支持&lt;/td&gt;
&lt;td&gt;支持&lt;/td&gt;
&lt;td&gt;支持，但性能差&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;POSIX NFA&lt;/td&gt;
&lt;td&gt;&lt;code&gt;mawk&lt;/code&gt;、Mortice Kern Systems’utilities、GNU Emacs（明确指定时使用）&lt;/td&gt;
&lt;td&gt;不支持&lt;/td&gt;
&lt;td&gt;支持&lt;/td&gt;
&lt;td&gt;支持，但性能差&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DFA/NFA 混合&lt;/td&gt;
&lt;td&gt;GNU &lt;code&gt;awk&lt;/code&gt;、GNU &lt;code&gt;grep/egrep&lt;/code&gt;、Tcl&lt;/td&gt;
&lt;td&gt;支持&lt;/td&gt;
&lt;td&gt;支持&lt;/td&gt;
&lt;td&gt;DFA 支持&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;判断是否传统型 NFA：是否支持忽略优先量词（懒惰）。使用正则表达式 &lt;code&gt;nfa|nfa not&lt;/code&gt; 来匹配字符串 &lt;code&gt;nfa not&lt;/code&gt;，如果只匹配了 &lt;code&gt;nfa&lt;/code&gt;，这就是传统型 NFA。如果整个 &lt;code&gt;nfa not&lt;/code&gt; 都能匹配，则此引擎要么是 POSIXNFA，要么是 DFA。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="https://acuario.xyz/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="RegEx" scheme="https://acuario.xyz/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/RegEx/"/>
    
    
      <category term="学习笔记" scheme="https://acuario.xyz/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="精通正则表达式" scheme="https://acuario.xyz/tags/%E7%B2%BE%E9%80%9A%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
      <category term="RegEx" scheme="https://acuario.xyz/tags/RegEx/"/>
    
      <category term="正则引擎" scheme="https://acuario.xyz/tags/%E6%AD%A3%E5%88%99%E5%BC%95%E6%93%8E/"/>
    
      <category term="NFA" scheme="https://acuario.xyz/tags/NFA/"/>
    
      <category term="DFA" scheme="https://acuario.xyz/tags/DFA/"/>
    
      <category term="POSIX NFA" scheme="https://acuario.xyz/tags/POSIX-NFA/"/>
    
  </entry>
  
  <entry>
    <title>播客札记（三）</title>
    <link href="https://acuario.xyz/podcast-note-3/"/>
    <id>https://acuario.xyz/podcast-note-3/</id>
    <published>2019-06-07T05:04:59.000Z</published>
    <updated>2019-06-07T05:18:47.107Z</updated>
    
    <content type="html"><![CDATA[<h1 id="八分-第-80-期-剧透的思考练习：言论自由还是道德错误？"><a href="#八分-第-80-期-剧透的思考练习：言论自由还是道德错误？" class="headerlink" title="八分 第 80 期 | 剧透的思考练习：言论自由还是道德错误？"></a>八分 第 80 期 | 剧透的思考练习：言论自由还是道德错误？</h1><p><a href="https://overcast.fm/+Oh0W-o4Pc" target="_blank" rel="noopener">Episode Archive</a></p><ul><li>剧透的伦理学基础：功利主义（效用主义）。</li><li>功利主义含义：所谓最大善的计算则必须依靠此行为所涉及的每个个体之苦乐感觉的总和，其中每个个体都被视为具相同分量，且快乐与痛苦是能够换算的，痛苦仅是 “负的快乐”。判断一件事的好坏，依据就是其是否增进人类最大的善，即增加人类的总体快乐。</li><li>剧透带来的双成伤害：<ol><li>剧透减少了观影的悬疑性，破坏了观影过程的乐趣；</li><li>剧透破坏了观影前对影视作品的期待与喜悦。</li></ol></li><li>剧透的言论自由基础：卡尔·波普尔在《开放社会及其敌人》中提出的「宽容悖论」。</li><li><p>宽容悖论：</p><blockquote><p>无限的宽容必然导致宽容的消失。如果我们把无限的宽容延伸到那些不宽容的人身上，如果我们不准备捍卫宽容社会以抵抗不宽容的冲击，那么宽容将被摧毁，并且我们还将容忍他们。</p></blockquote></li><li><p>穆勒认为，除非某个人的言论或行为伤害（肉体或利益受损）而非冒犯（情绪、尊严受损）到一个人，否则其言论或行为不应被任何力量禁止。</p></li><li>剧透是否是对肉体和精神的真实伤害？还是仅仅只是一种冒犯？</li><li>剧透与权利的关系：如果剧透者是创作者本人，其是否有权剧透？这一剧透行为是否有合理性？</li><li>剧透与历史的关系：历史作品是否可以剧透？</li><li>真正伟大的作品不惧怕剧透。类型文学 / 作品是不可被剧透的。</li><li>剧透的另一种观赏乐趣：心平气和地感受作品的细节。</li><li>互联网的出现为剧透文化带来的改变：电影预告片即是对剧透文化的利用。</li><li>希区柯克的《惊魂记》告诫观众请勿剧透，助长了影片本身的神秘性。</li></ul><a id="more"></a><hr><h1 id="翻电-Special-VOL02-如何看待外卖行业和我们的责任？"><a href="#翻电-Special-VOL02-如何看待外卖行业和我们的责任？" class="headerlink" title="翻电 Special VOL02 | 如何看待外卖行业和我们的责任？"></a>翻电 Special VOL02 | 如何看待外卖行业和我们的责任？</h1><p><a href="https://overcast.fm/+GsFhie5AY" target="_blank" rel="noopener">Episode Archive</a></p><h2 id="劳动异化理论"><a href="#劳动异化理论" class="headerlink" title="劳动异化理论"></a>劳动异化理论</h2><ul><li>劳动者是否掌握生产资料</li><li>如果劳动者被劳动以外的要素强迫，且劳动目的不属于自己、劳动对象不是自己，则该劳动过程将出现劳动异化</li></ul><h2 id="外卖工作为何是劳动异化的极端"><a href="#外卖工作为何是劳动异化的极端" class="headerlink" title="外卖工作为何是劳动异化的极端"></a>外卖工作为何是劳动异化的极端</h2><p>现代社会普遍存在劳动异化，外卖是劳动异化的极端例子：</p><ol><li>外卖的工作空间为社会飞地，工作时没有任何主要（固定）的社会空间，完全游离于世界之外；</li><li>外卖者对外交流的对象并不固定，且人际交流时间非常短暂。相比之下，出租车司机与乘客也有相对长时间的共处；</li><li>外卖工作不掌握任何生产资料，在社会生产链条中一无所有，没有任何生产实践。相比之下，风投工作亦是如此；</li><li>外卖工作不具备任何工作经验、技能的积累，纵使有产生了经验、技能，也很难复用到其他工作。</li></ol><h2 id="为何作为一个工作，外卖依然有伦理风险"><a href="#为何作为一个工作，外卖依然有伦理风险" class="headerlink" title="为何作为一个工作，外卖依然有伦理风险"></a>为何作为一个工作，外卖依然有伦理风险</h2><ul><li>社会底线不是维持社会成为一个好社会的标准，而是维持社会不崩溃的标准</li><li>外卖工作虽没有触及社会底线，但却是劳动异化最极端的状态。</li><li>「谁雇佣谁负责 / 谁施行谁负责」是缺乏说服力的，由自我需求产生的特定现实需要需求方承担社会责任。反例为儿童色情 / 毒品问题。</li></ul><h2 id="为何我们不是雇佣者也应该关注外卖"><a href="#为何我们不是雇佣者也应该关注外卖" class="headerlink" title="为何我们不是雇佣者也应该关注外卖"></a>为何我们不是雇佣者也应该关注外卖</h2><ul><li>外卖需求建立在手机、互联网之上。消费者为了避免与人交流，产生了这样「过度的」需求，这样的需求是商品社会「方便主义」至上的后果，它把心理负担和成本转嫁到外卖者身上。没有买卖就没有伤害。</li><li>大众具有选择性的同理心。体谅和同理心的适用对象不应只限于特殊岗位，如公权力赋权的对象，比如消防员。</li><li>同理心的对象不应以利益绑定为标准。仅对利益共同体给与同理心是功利主义的，若长此以往，互助互利的社会风气将会逐渐消解。</li><li>由于存在实然和应然的问题，带着负罪感的作为至少比毫不反思和理解要好，尝试理解外卖工作的特殊性和其中存在的道德风险，胜过以方便主义理所应当享用外卖服务。</li></ul><h2 id="问题反思"><a href="#问题反思" class="headerlink" title="问题反思"></a>问题反思</h2><p>主要的问题在于：</p><ol><li>要在多大程度上对马克思经济学的基本概念进行外延？</li><li>导致事情极端，不是一个因素的决定，而是多个因素的共同作用</li><li>劳动异化简而言之是：站在人的自身发展、自我意志的角度，来看待人与工作的关系。异化程度越高，对人本身的发展越不利。其他方面按下不表，因为前述论点足够进行话题讨论。</li></ol><p>反思结论如下：</p><ol><li>劳动异化这个概念，是对资本主义框架的一种解释。在讨论成熟的商业行为时，我们不妨先用该理论作为基础进行分析，当然也可以有其他理论的探讨。</li><li>现代性中很重要的一点就是时间和空间的概念与古时不同，城市的出现本就是一个以空间作为明显标志的产物。所以工作空间的固定对劳动者本身的劳动异化是有弱化作用的，这一点对城市内的从业者更加明显。</li><li>工作的技能经验在此可以理解为对某一工作本身熟悉度的掌握，对外卖行业而言这一点无从谈起。更加熟悉路况、地形，然后应用到出租车行业？除此之外的积累又有几多？出租车行业本身在其他几点上的情况也极其糟糕，劳动异化程度也不低。</li><li>对前述论点举特例无非是五十步笑一百步，劳动异化是多因素的共同作用，而非某一单一因素，恰恰只有外卖行业在前述劳动异化的极端性 (1)(2)(3)(4) 点上均有涉及，且程度不小，所以才可以讨论其职业道德风险的问题。而其他例子总能因某一因素的缺失而削弱其劳动异化程度。比如程序员寡言、风投行业不掌握生产资料，但其获得的回报（物质、心理、社会层面）在一定程度上能够弥补劳动异化带来的损失（物质 &amp; 精神层面）。</li><li>「方便无罪」让我想到「技术无罪」论，手机和互联网的出现在社会层面的积极作用当然不用多说，但如果基于功利主义来讨论「外卖是否更利于人与人的交流」的话，笔者认为答案是否定的。而且笔者也不认为「方便」在多大程度上促进了外卖从业者自我人格的发展。倒是在消费者口中助长了工具理性的态度。我们现在反对和反思的不恰恰就是工具理性的消费主义吗？</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;八分-第-80-期-剧透的思考练习：言论自由还是道德错误？&quot;&gt;&lt;a href=&quot;#八分-第-80-期-剧透的思考练习：言论自由还是道德错误？&quot; class=&quot;headerlink&quot; title=&quot;八分 第 80 期 | 剧透的思考练习：言论自由还是道德错误？&quot;&gt;&lt;/a&gt;八分 第 80 期 | 剧透的思考练习：言论自由还是道德错误？&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://overcast.fm/+Oh0W-o4Pc&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Episode Archive&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;剧透的伦理学基础：功利主义（效用主义）。&lt;/li&gt;
&lt;li&gt;功利主义含义：所谓最大善的计算则必须依靠此行为所涉及的每个个体之苦乐感觉的总和，其中每个个体都被视为具相同分量，且快乐与痛苦是能够换算的，痛苦仅是 “负的快乐”。判断一件事的好坏，依据就是其是否增进人类最大的善，即增加人类的总体快乐。&lt;/li&gt;
&lt;li&gt;剧透带来的双成伤害：&lt;ol&gt;
&lt;li&gt;剧透减少了观影的悬疑性，破坏了观影过程的乐趣；&lt;/li&gt;
&lt;li&gt;剧透破坏了观影前对影视作品的期待与喜悦。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;剧透的言论自由基础：卡尔·波普尔在《开放社会及其敌人》中提出的「宽容悖论」。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;宽容悖论：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;无限的宽容必然导致宽容的消失。如果我们把无限的宽容延伸到那些不宽容的人身上，如果我们不准备捍卫宽容社会以抵抗不宽容的冲击，那么宽容将被摧毁，并且我们还将容忍他们。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;穆勒认为，除非某个人的言论或行为伤害（肉体或利益受损）而非冒犯（情绪、尊严受损）到一个人，否则其言论或行为不应被任何力量禁止。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;剧透是否是对肉体和精神的真实伤害？还是仅仅只是一种冒犯？&lt;/li&gt;
&lt;li&gt;剧透与权利的关系：如果剧透者是创作者本人，其是否有权剧透？这一剧透行为是否有合理性？&lt;/li&gt;
&lt;li&gt;剧透与历史的关系：历史作品是否可以剧透？&lt;/li&gt;
&lt;li&gt;真正伟大的作品不惧怕剧透。类型文学 / 作品是不可被剧透的。&lt;/li&gt;
&lt;li&gt;剧透的另一种观赏乐趣：心平气和地感受作品的细节。&lt;/li&gt;
&lt;li&gt;互联网的出现为剧透文化带来的改变：电影预告片即是对剧透文化的利用。&lt;/li&gt;
&lt;li&gt;希区柯克的《惊魂记》告诫观众请勿剧透，助长了影片本身的神秘性。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="播客札记" scheme="https://acuario.xyz/categories/%E6%92%AD%E5%AE%A2%E6%9C%AD%E8%AE%B0/"/>
    
    
      <category term="Podcast" scheme="https://acuario.xyz/tags/Podcast/"/>
    
      <category term="播客" scheme="https://acuario.xyz/tags/%E6%92%AD%E5%AE%A2/"/>
    
      <category term="翻转电台" scheme="https://acuario.xyz/tags/%E7%BF%BB%E8%BD%AC%E7%94%B5%E5%8F%B0/"/>
    
      <category term="剧透" scheme="https://acuario.xyz/tags/%E5%89%A7%E9%80%8F/"/>
    
      <category term="言论自由" scheme="https://acuario.xyz/tags/%E8%A8%80%E8%AE%BA%E8%87%AA%E7%94%B1/"/>
    
      <category term="外卖" scheme="https://acuario.xyz/tags/%E5%A4%96%E5%8D%96/"/>
    
      <category term="功利主义" scheme="https://acuario.xyz/tags/%E5%8A%9F%E5%88%A9%E4%B8%BB%E4%B9%89/"/>
    
      <category term="劳动异化" scheme="https://acuario.xyz/tags/%E5%8A%B3%E5%8A%A8%E5%BC%82%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>《精通正则表达式》学习笔记（二）</title>
    <link href="https://acuario.xyz/mastering-regex-summary-2/"/>
    <id>https://acuario.xyz/mastering-regex-summary-2/</id>
    <published>2019-06-05T13:35:55.000Z</published>
    <updated>2019-08-07T16:20:04.176Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="/mastering-regex-summary-1/">《精通正则表达式》学习笔记（一）</a><br>Ch.1 正则表达式入门<br>Ch.2 入门示例拓展</li><li><a href="/mastering-regex-summary-2/">《精通正则表达式》学习笔记（二）</a><br>Ch.3 正则表达式的特性和流派概览</li><li><a href="/mastering-regex-summary-3/">《精通正则表达式》学习笔记（三）</a><br>Ch.4 表达式的匹配原理</li><li><a href="/mastering-regex-summary-4/">《精通正则表达式》学习笔记（四）</a><br>Ch.5 正则表达式实用技巧</li><li><a href="/mastering-regex-summary-5/">《精通正则表达式》学习笔记（五）</a><br>Ch.6 打造高效正则表达式</li></ul><hr><h1 id="正则表达式的发展历程"><a href="#正则表达式的发展历程" class="headerlink" title="正则表达式的发展历程"></a>正则表达式的发展历程</h1><ul><li><p>1968 年 Ken Thompson 的文章 Regular Expression Search Algorithm 描述了一种正则表达式编译器，该编译器生成了 IBM7094 的 object 代码。由此也诞生了他的 <code>qed</code>，这种编辑器后来成了 Unix 中 <code>ed</code> 编辑器的基础。</p></li><li><p><code>ed</code> 有条命令 <code>g/Regular Expression/p</code>，读作 <em>Gjobal Regular Expression，Print</em>（应用正则表达式的全局输出）。这个功能最终成为独立的工具 <code>grep</code>，之后又产生了 <code>egrep</code>(Extended grep)。</p><ul><li>POSIX（Portable Operating System Interface，可移植操作系统接口）诞生于 1986 年，它是一系列标准，确保操作系统之间的移植性。POSIX 把各种常见的流派分为两大类：<br>Basic Regular Expressions（BREs）和 Extended Regular Expressions（EREs）。POSIX 程序必须支持其中的任意一种。</li></ul></li></ul><p><img src="https://i.loli.net/2019/05/30/5cef9d6eddef290952.png" alt="POSIX 正则表达式流派"></p><ul><li><p>Perl 的特性中值得一提的是，它提供了传统上只有专用工具 <code>sed</code> 和 <code>awk</code> 才提供的正则表达式操作符——这在通用脚本语言中是个首创。正则引擎的代码来自一个早期的项目——Larry 的新闻阅读器 <code>rn</code>（其中的正则表达式代码来自 James Gosling 的 <code>Emacs</code>。（James Gosling 后来去开发他自己的语言 <code>Java</code>，Java 1.4 提供了一个标准的正则表达式包。）</p></li><li><p>1997 年 Philip Hazel 开发了 <code>PCRE</code>，这是一套兼容 Perl 正则表达式的库，全面仿制 Perl 的正则表达式的语法和语义。其他的开发人员可以把 PCRE 整合到自己的工具和语言中，许多流行的软件都使用了 PCRE，例如 <code>PHP</code>、<code>Apache 2</code>、<code>Exim</code>、<code>Postfix</code> 和 <code>Nmap</code>。</p><a id="more"></a></li></ul><h1 id="正则表达式的注意事项和处理方法"><a href="#正则表达式的注意事项和处理方法" class="headerlink" title="正则表达式的注意事项和处理方法"></a>正则表达式的注意事项和处理方法</h1><p><img src="https://i.loli.net/2019/06/03/5cf503b6304ca16665.png" alt="若干常用工具的 Flavor 的简要考察"></p><ul><li><p>一款工具软件能够利用正则表达式实现的功能，通常比它所属的正则流派更重要。</p></li><li><p>程序设计语言有 3 种处理正则表达式的方式：</p><ol><li>集成式（integrated）：直接内建在语言之中，如 Perl。</li><li>程序式（procedural）</li><li>面向对象式（object-oriented）</li></ol><ul><li>程序式和面向对象式，是由普通的函数接收普通的字符串，把它们作为正则表达式进行处理。由不同的函数进行不同的、关系到一个或多个正则表达式的操作。</li></ul></li></ul><h1 id="字符串、字符编码和匹配模式"><a href="#字符串、字符编码和匹配模式" class="headerlink" title="字符串、字符编码和匹配模式"></a>字符串、字符编码和匹配模式</h1><ul><li><p><code>Unicode</code> 是一组字符设定，或者是从数字和字符之间的逻辑映射的<strong>概念编码</strong>。一个 “代码点（code point）”，通常用十六进制来表示，以 “<code>U+</code>” 开头。</p></li><li><p>支持 Unicode 的程序中的正则表达式通常支持 <code>\unum</code> 元序列，用来匹配一个具体的 Unicode 字符。</p></li><li><p>Unicode Version 3.1 诞生于 2001 年中期，增加了 <code>u+FFFF</code> 之后的代码点。例如，代表音乐谱号 <code>C</code>（Clef）的字符对应代码点 <code>U+1D121</code>。之前那些仅支持低于 <code>U+FPPP</code> 字符的程序无法处理这种情况。大多数程序的 <code>\unum</code> 只能支持最多 4 位十六进制数值。</p></li><li><p>能够处理这类新字符的程序通常提供了 <code>\x{nuwm}</code> 序列，<code>num</code> 可以为任意多位数字（这是为了增强只支持 4 位数字的 <code>\unum</code> 表示法）。你可以使用 <code>\x{1D121}</code> 来匹配这类 “谱号 <code>C</code>” 之类的字符。</p></li><li><p>正则模式和匹配模式</p><ul><li>不区分大小写的匹配模式：在匹配过程中会忽略字母的大小写。</li><li>宽松排列和注释模式：忽略字符组外部的所有空白字符。字符组内部的空白字符仍然有效，<code>#</code> 符号和换行符之间的内容视为注释。</li><li>点号通配模式（dot-match-all match mode，也叫 single-line mode “单行模式 “）：点号不受限制，可以匹配任何字符，包括换行符。修改了点号处理换行符的方式，从 “需要特殊处理” 变为 “不需要特殊处理”</li><li>增强的行锚点模式（Enhanced line-anchor match mode，也叫 “多行文本模式 “）：「<code>^</code>」能够匹配字符串中内嵌的文本行的开头位置，「<code>$</code>」能够匹配字符串中内嵌的文本行的换行符。改变了「<code>^</code>」和「<code>$</code>」匹配换行符的方式，从 “不需要特殊处理” 变为 “需要特殊处理”。</li><li>文字文本模式：几乎不识别任何正则表达式元字符。</li></ul></li></ul><h1 id="常用的元字符和特性"><a href="#常用的元字符和特性" class="headerlink" title="常用的元字符和特性"></a>常用的元字符和特性</h1><ul><li><p>字符表示法</p><ul><li>字符缩略表示法：<code>\n</code>、<code>\t</code>、<code>\a</code>、<code>\b</code>、<code>\e</code>、<code>\f</code>、<code>\r</code>、<code>\v</code>…</li><li>八进制转义：<code>\num</code></li><li>十六进制 /Unicode 转义：<code>\xnum</code>、<code>\x{num}</code>、<code>\unum</code>、<code>\Unum</code>…</li><li>控制字符：<code>\cchar</code></li></ul></li><li><p>字符组及相关结构</p><ul><li>普通字符组：<code>[a-z]</code> 和 <code>[*a-z]</code></li><li>几乎能匹配任何字符的元字符：点号</li><li>单个字节：<code>\C</code></li><li>Unicode 组合字符序列：<code>\X</code></li><li>字符组缩略表示法：<code>\w</code>、<code>\d</code>、<code>\s</code>、<code>\W</code>、<code>\D</code>、<code>\S</code></li><li>Unicode 属性、区块和分类：<code>\p{Prop}</code>、<code>\P{Prop}</code></li><li>字符组运算符：<code>[[a-z]&amp;&amp;[^aeiou]]</code></li></ul></li><li><p>锚点及其他 “零长度断言”</p><ul><li>行 / 字符串起点：<code>^</code>、<code>\A</code></li><li>行 / 字符串终点：<code>$</code>、<code>\Z</code>、<code>\z</code></li><li>本次匹配的开始位置（或者上次匹配的结束位置）：<code>\G</code></li><li>单词分界符：<code>\b</code>、<code>\B</code>、<code>\&lt;</code>、<code>\&gt;</code>…</li><li>顺序环视 <code>(?=…)</code>、<code>(?!…)</code>；</li><li>逆序环视 <code>(?&lt;=…)</code>、<code>(?&lt;!…)</code></li></ul></li><li><p>注释和模式修饰词</p><ul><li>模式修饰词：<code>(?modifier)</code>，例如 <code>(?i)</code> 或 <code>(?-i)</code></li><li>模式作用范围：<code>(?modifier:…)</code>，例如 <code>(?i:…)</code></li><li>注释：<code>(?#…)</code> 和 <code>#…</code></li><li>文字文本范围：<code>\Q…\E</code></li></ul></li><li><p>分组，捕获，条件判断和控制：</p><ul><li>捕获 / 分组括号：<code>(…)</code>、<code>\1</code>、<code>\2</code>，…</li><li>仅用于分组的括号：<code>(?:…)</code></li><li>命名捕获：<code>(?&lt;Name&gt;…)</code></li><li>固化分组：<code>(?&gt;…)</code> 永远也不会 “交还” 分组内已经匹配的任何内容。</li><li>多选结构：<code>…|…|…</code></li><li>条件判断：<code>(?if then|else)</code></li><li>匹配优先量词：<code>*</code>、<code>+</code>、<code>?</code>、<code>{num，num}</code> 贪心（greedy）模式，<strong>默认的</strong>量词匹配模式，匹配尽可能多的内容。</li><li>忽略优先量词：<code>*?</code>、<code>+?</code>、<code>??</code>、<code>{num，num)?</code> 懒惰模式，匹配尽可能少的内容，只需要满足下限，匹配就能成功。</li><li>占有优先量词：<code>*+</code>、<code>++</code>、<code>?+</code>、<code>{nuwm，nuwm}+</code> 类似固化分组，一旦匹配某些内容，就不会“交还”。</li></ul></li><li><p>固化分组就是一个<strong>只进不出</strong>的栈，被匹配入栈的内容不会交还，这导致若匹配了更多无关内容，将导致匹配失败（因为之前的匹配无法交还），最终的匹配结果将为空。例如：<code>!.+!</code> 可以匹配 <code>!Hola!</code>，但 <code>!(?&gt;.+)!</code> 无法匹配 <code>!Hola!</code>。其首先匹配尽可能多的内容 <code>Hola!</code>，但是之后的 <code>!</code> 无法匹配，会强迫 <code>.+</code> 释放之前匹配的 <code>!</code>，但固化分组无法释放，最终导致匹配失败。</p></li><li><p>所有的正则引擎都不会对单词进行语意分析：它们认为 “NE14AD8” 是一个单词，而 “M.I.T.” 不是。</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/mastering-regex-summary-1/&quot;&gt;《精通正则表达式》学习笔记（一）&lt;/a&gt;&lt;br&gt;Ch.1 正则表达式入门&lt;br&gt;Ch.2 入门示例拓展&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/mastering-regex-summary-2/&quot;&gt;《精通正则表达式》学习笔记（二）&lt;/a&gt;&lt;br&gt;Ch.3 正则表达式的特性和流派概览&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/mastering-regex-summary-3/&quot;&gt;《精通正则表达式》学习笔记（三）&lt;/a&gt;&lt;br&gt;Ch.4 表达式的匹配原理&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/mastering-regex-summary-4/&quot;&gt;《精通正则表达式》学习笔记（四）&lt;/a&gt;&lt;br&gt;Ch.5 正则表达式实用技巧&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/mastering-regex-summary-5/&quot;&gt;《精通正则表达式》学习笔记（五）&lt;/a&gt;&lt;br&gt;Ch.6 打造高效正则表达式&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&quot;正则表达式的发展历程&quot;&gt;&lt;a href=&quot;#正则表达式的发展历程&quot; class=&quot;headerlink&quot; title=&quot;正则表达式的发展历程&quot;&gt;&lt;/a&gt;正则表达式的发展历程&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;1968 年 Ken Thompson 的文章 Regular Expression Search Algorithm 描述了一种正则表达式编译器，该编译器生成了 IBM7094 的 object 代码。由此也诞生了他的 &lt;code&gt;qed&lt;/code&gt;，这种编辑器后来成了 Unix 中 &lt;code&gt;ed&lt;/code&gt; 编辑器的基础。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;ed&lt;/code&gt; 有条命令 &lt;code&gt;g/Regular Expression/p&lt;/code&gt;，读作 &lt;em&gt;Gjobal Regular Expression，Print&lt;/em&gt;（应用正则表达式的全局输出）。这个功能最终成为独立的工具 &lt;code&gt;grep&lt;/code&gt;，之后又产生了 &lt;code&gt;egrep&lt;/code&gt;(Extended grep)。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;POSIX（Portable Operating System Interface，可移植操作系统接口）诞生于 1986 年，它是一系列标准，确保操作系统之间的移植性。POSIX 把各种常见的流派分为两大类：&lt;br&gt;Basic Regular Expressions（BREs）和 Extended Regular Expressions（EREs）。POSIX 程序必须支持其中的任意一种。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/05/30/5cef9d6eddef290952.png&quot; alt=&quot;POSIX 正则表达式流派&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Perl 的特性中值得一提的是，它提供了传统上只有专用工具 &lt;code&gt;sed&lt;/code&gt; 和 &lt;code&gt;awk&lt;/code&gt; 才提供的正则表达式操作符——这在通用脚本语言中是个首创。正则引擎的代码来自一个早期的项目——Larry 的新闻阅读器 &lt;code&gt;rn&lt;/code&gt;（其中的正则表达式代码来自 James Gosling 的 &lt;code&gt;Emacs&lt;/code&gt;。（James Gosling 后来去开发他自己的语言 &lt;code&gt;Java&lt;/code&gt;，Java 1.4 提供了一个标准的正则表达式包。）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;1997 年 Philip Hazel 开发了 &lt;code&gt;PCRE&lt;/code&gt;，这是一套兼容 Perl 正则表达式的库，全面仿制 Perl 的正则表达式的语法和语义。其他的开发人员可以把 PCRE 整合到自己的工具和语言中，许多流行的软件都使用了 PCRE，例如 &lt;code&gt;PHP&lt;/code&gt;、&lt;code&gt;Apache 2&lt;/code&gt;、&lt;code&gt;Exim&lt;/code&gt;、&lt;code&gt;Postfix&lt;/code&gt; 和 &lt;code&gt;Nmap&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="https://acuario.xyz/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="RegEx" scheme="https://acuario.xyz/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/RegEx/"/>
    
    
      <category term="学习笔记" scheme="https://acuario.xyz/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="精通正则表达式" scheme="https://acuario.xyz/tags/%E7%B2%BE%E9%80%9A%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
      <category term="RegEx" scheme="https://acuario.xyz/tags/RegEx/"/>
    
      <category term="正则流派" scheme="https://acuario.xyz/tags/%E6%AD%A3%E5%88%99%E6%B5%81%E6%B4%BE/"/>
    
      <category term="正则特性" scheme="https://acuario.xyz/tags/%E6%AD%A3%E5%88%99%E7%89%B9%E6%80%A7/"/>
    
      <category term="正则元字符" scheme="https://acuario.xyz/tags/%E6%AD%A3%E5%88%99%E5%85%83%E5%AD%97%E7%AC%A6/"/>
    
  </entry>
  
  <entry>
    <title>如何加固Linux服务器[译]</title>
    <link href="https://acuario.xyz/how-to-secure-your-linux-server/"/>
    <id>https://acuario.xyz/how-to-secure-your-linux-server/</id>
    <published>2019-04-27T08:54:32.000Z</published>
    <updated>2019-04-29T14:53:29.810Z</updated>
    
    <content type="html"><![CDATA[<p><em>原文 <a href="https://medium.com/servers-101/how-to-secure-your-linux-server-6026cfcdefd8" target="_blank" rel="noopener">How To Secure Your Linux Server In 7 Easy Steps</a> 由 <a href="https://medium.com/@mutendebrian" target="_blank" rel="noopener">Brian Mutende</a> 发布于 Medium，翻译转载已获作者允许。<br>为配合博客目录系统显示，对原文章节名略有修改。</em></p><hr><p>大多数服务器经常会被黑客攻击。所以我决定写一篇简短的教程，让读者轻松加固自己的 Linux 服务器。</p><p>这并不是一篇完整的安全指南，但是它可以帮你阻断近九成常见的后端攻击，例如<strong>暴力破解</strong>和 <strong>DDoS</strong>。</p><p>最棒的是，你可以在一两个小时内就完成操作。</p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><ol><li>你需要一台Linux服务器。</li><li>你需要对命令行有基本的了解。<a href="https://learncodethehardway.org/unix/bash_cheat_sheet.pdf" target="_blank" rel="noopener">这里</a>提供一份 cheet sheet 供你使用。</li></ol><p>如果你已万事俱备，那就开始吧。</p><a id="more"></a><h1 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h1><h2 id="配置-SSH-密钥"><a href="#配置-SSH-密钥" class="headerlink" title="配置 SSH 密钥"></a>配置 SSH 密钥</h2><p>要访问远程服务器，你务必使用 SSH 密钥登录而不是使用密码登录。</p><p>密码登录的问题在于其很容易被暴力破解（你将在下文学到如何进一步防止这种情况）。另外，在每次访问服务器时，你都必须输入密码。为避免上述缺点，你必须设置 <strong>SSH 密钥验证</strong>。它比使用密码更安全，因为黑客无法将其暴力破解。除此以外，使用密钥也可以更方便和快速地连接服务器，而无需输入密码。</p><p>下面介绍如何为服务器设置 SSH 身份验证。</p><ul><li><p>在本地计算机上，运行下列命令生成 SSH 密钥对：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen</span><br></pre></td></tr></table></figure><p>上述命令将引导你在几步之内生成 SSH 密钥。当然别忘了记住你保存密钥文件的位置。</p></li><li><p>使用以下命令将公钥添加到服务器：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-copy-id username@remote_host</span><br></pre></td></tr></table></figure><p>务必使用你的用户名和服务器的 IP 地址替换 <em>username</em> 和 <em>remote_host</em>。系统将提示你输入密码。</p></li><li><p>尝试使用以下命令登录服务器：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh username@remote_host</span><br></pre></td></tr></table></figure><p>别忘了将 <em>username</em> 和 <em>remote_host</em> 替换为服务器的详细信息。这时你会注意到，本次登录不再提示你输入密码。</p></li></ul><h2 id="保持系统时间最新"><a href="#保持系统时间最新" class="headerlink" title="保持系统时间最新"></a>保持系统时间最新</h2><p>许多安全协议依托于你的系统时间来执行定时任务，生成当天的日志和执行其他关键任务。</p><p>如果你的系统时间有误，可能会对你的服务器造成危害。为防止这种情况发生，你可以安装 NTP 客户端。该程序将使你的系统时间与全球 NTP 服务器保持同步。</p><p>安装 NTP 客户端命令如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt install ntp</span><br></pre></td></tr></table></figure><p>之后你再也不用担心设置系统日期。</p><h2 id="查看活动端口"><a href="#查看活动端口" class="headerlink" title="查看活动端口"></a>查看活动端口</h2><p>服务器程序会暴露某些端口，以便于网络中的其他应用程序对其进行访问。黑客也可以在你的服务器上安装后门并暴露端口，从而控制你的服务器。因此，我们不希望服务器上的未知端口被请求侦听。</p><p>要查看活动端口，可以使用以下命令：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo ss -lntup</span><br></pre></td></tr></table></figure><p>查看输出并检查任何你并不熟悉的端口或进程。尝试发现并追踪可能有害的服务和流程。如果你不知从何下手，请可以查看这份<a href="https://www.garykessler.net/library/bad_ports.html" target="_blank" rel="noopener">《「糟糕的」TCP/UDP 端口列表》</a>。</p><h2 id="设置防火墙"><a href="#设置防火墙" class="headerlink" title="设置防火墙"></a>设置防火墙</h2><p>防火墙允许你控制服务器上传入 / 传出特定端口的网络流量。通常我使用 UFW（<em>uncomplicated firewall</em>，简单防火墙）。（译者注：UFW 是 Ubuntu 系统上默认的防火墙组件）</p><p>你可以配置下述规则来控制 UFW 的运行：</p><ul><li>允许 / 禁止</li><li>传入流量 / 传出流量</li><li>流量目的地 / 流量源</li><li>特定端口 / 所有端口</li></ul><p>完成下面的例子，你将阻止白名单之外的所有网络流量。如果之后安装了其他程序，别忘了将运行所需的必要端口加入白名单。</p><h3 id="设置-UFW"><a href="#设置-UFW" class="headerlink" title="设置 UFW"></a>设置 UFW</h3><ul><li>安装ufw。</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install ufw</span><br></pre></td></tr></table></figure><ul><li>你可以禁止所有传出流量</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo ufw default deny outgoing comment &apos;deny all outgoing traffic&apos;</span><br></pre></td></tr></table></figure><ul><li>或者允许所有传出流量</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo ufw default allow outgoing comment &apos;allow all outgoing traffic&apos;</span><br></pre></td></tr></table></figure><ul><li>接下来，我们要禁止所有传入的流量……</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo ufw default deny incoming comment &apos;deny all incoming traffic&apos;</span><br></pre></td></tr></table></figure><ul><li>…将 SSH 连接加入例外，以便访问系统。</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo ufw limit in ssh comment &apos;allow SSH connections in&apos;</span><br></pre></td></tr></table></figure><ul><li>如果你将 UFW 配置为禁止所有传出流量，别忘了根据需要允许特定流量。比如：</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#允许端口 53 的流量输出 -  DNS </span><br><span class="line">sudo ufw allow out 53 comment &apos;allow DNS calls out&apos;</span><br><span class="line"></span><br><span class="line">#允许端口 123 的流量输出 -  NTP </span><br><span class="line">sudo ufw allow out 123 comment &apos;allow NTP out&apos;</span><br><span class="line"></span><br><span class="line">#允许 HTTP，HTTPS 或 FTP 的流量</span><br><span class="line">#根据你使用的 apt 源的不同，apt 可能需要如下设置</span><br><span class="line">sudo ufw allow out http comment &apos;allow HTTP traffic out&apos;</span><br><span class="line">sudo ufw allow out https comment &apos;allow HTTPS traffic out&apos;</span><br><span class="line">sudo ufw allow out ftp comment &apos;allow FTP traffic out&apos;</span><br><span class="line"></span><br><span class="line">#允许 whois</span><br><span class="line">sudo ufw allow out whois comment &apos;allow whois&apos;</span><br><span class="line"></span><br><span class="line">#允许端口 68 的流量输出 -  DHCP 客户端</span><br><span class="line">#如果你正在使用 DHCP，则需要如下设置</span><br><span class="line">sudo ufw allow out 68 comment &apos;allow the DHCP client to update&apos;</span><br></pre></td></tr></table></figure><ul><li>如需拒绝端口 99 上的任何流量，可使用以下命令：</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo ufw deny 99</span><br></pre></td></tr></table></figure><ul><li>最后，使用以下命令启动 UFW：</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo ufw enable</span><br></pre></td></tr></table></figure><p>你还可以使用以下命令查看 UFW 状态：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo ufw status</span><br></pre></td></tr></table></figure><h2 id="防止自动化攻击"><a href="#防止自动化攻击" class="headerlink" title="防止自动化攻击"></a>防止自动化攻击</h2><p>你可以使用两个程序来阻止大多数自动化攻击：</p><ul><li><a href="http://www.cipherdyne.org/psad/" target="_blank" rel="noopener">PSAD</a></li><li><a href="https://www.fail2ban.org/" target="_blank" rel="noopener">Fail2Ban</a></li></ul><h3 id="PSAD-和-Fail2Ban-之间的区别"><a href="#PSAD-和-Fail2Ban-之间的区别" class="headerlink" title="PSAD 和 Fail2Ban 之间的区别"></a>PSAD 和 Fail2Ban 之间的区别</h3><p>我们知道，端口可以提供给服务器上的应用程序进行访问。攻击者为了访问你的服务器，也许会扫描你的服务器目前开放的端口。</p><p><strong>PSAD</strong> 监视网络活动，以检测并自定义阻止端口扫描和其他类型的可疑流量，如 DDoS 攻击或操作系统指纹识别尝试。</p><p><strong>Fail2Ban</strong> 扫描各种应用程序（如 FTP）的日志文件，并自动封禁有明显恶意行为（如自动登录尝试）的 IP。</p><p>以下指南将向你展示如何安装和配置 PSAD 和 Fail2Ban，以便它们与 UFW 一起使用。</p><ul><li><a href="https://zaiste.net/intro_fail2ban_with_ufw/" target="_blank" rel="noopener">安装 Fail2Ban</a></li><li><a href="https://gist.github.com/netson/c45b2dc4e835761fbccc" target="_blank" rel="noopener">安装 PSAD</a></li></ul><h2 id="安装-logwatch"><a href="#安装-logwatch" class="headerlink" title="安装 logwatch"></a>安装 logwatch</h2><p>服务器上的应用程序通常会将日志消息保存到日志文件中。除非你要手动监控日志文件，否则需要安装 logwatch。logwatch 将扫描系统日志文件并对其进行汇总。</p><p>你可以直接从命令行或计划任务运行 logwatch。例如，你可以配置 logwatch 将日志文件的每日摘要以电子邮件的形式发送给你。注意确保你的服务器可以正常发送电子邮件。</p><p>logwatch 通过 service 文件来获取读取和汇总日志文件的方式。你可以在 <code>/usr/share/logwatch/scripts/services</code> 中查看所有 service 文件。</p><p>logwatch 默认配置文件是 <code>/usr/share/logwatch/default.conf/logwatch.conf</code>。你可以通过使用命令行参数更改配置。</p><p>在 Ubuntu 或 Debian 上安装 logwatch，可运行以下命令：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt-get install logwatch</span><br></pre></td></tr></table></figure><p>对于其他 Linux 发行版的用户，请查看 Linode 的<a href="https://www.linode.com/docs/uptime/monitoring/monitor-systems-logwatch/" target="_blank" rel="noopener">这篇指南</a>。</p><p>如果你需要查看 logwatch 收集的日志样本，你可以尝试直接运行 logwatch。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo /usr/sbin/logwatch --output stdout --format text --range yesterday --service all</span><br></pre></td></tr></table></figure><p>最后，然后 logwatch 每天发送一封电子邮件，其中包含我们日志文件的摘要。为实现此需求，可以打开文件 <em>/etc/cron.daily/00logwatch</em> 并找到 <em>execute</em> 行，然后将其更改为以下内容：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/usr/sbin/logwatch --output mail --format html --mailto root --range yesterday --service all</span><br></pre></td></tr></table></figure><h2 id="执行安全审计"><a href="#执行安全审计" class="headerlink" title="执行安全审计"></a>执行安全审计</h2><p>在加固 Linux 服务器后，你应该进行安全审计，以便排查任何可能被忽视的安全漏洞。为此，你可以使用 Lynis，这是一个可以实现以下功能的开源软件：</p><ul><li>安全审计。</li><li>一致性测试（例如 PCI，HIPAA，SOx）。</li><li>渗透测试。</li><li>漏洞检测。</li><li>系统强化。</li></ul><h3 id="如何使用-Lynis"><a href="#如何使用-Lynis" class="headerlink" title="如何使用 Lynis"></a>如何使用 Lynis</h3><p>首先，通过克隆其 Github 仓库来安装 Lynis。这可确保安装的是最新版本的 Lynis。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/CISOfy/lynis</span><br></pre></td></tr></table></figure><p>切换到我们克隆 Lynis 的目录：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd lynis</span><br></pre></td></tr></table></figure><p>最后，使用以下命令运行第一次安全审计：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lynis audit system</span><br></pre></td></tr></table></figure><p>你可以在 Lynis 的<a href="https://cisofy.com/lynis/" target="_blank" rel="noopener">官方网站</a>上了解更多相关信息。</p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>很高兴你能阅读这篇有关加固 Linux 服务器的 how-to 指南。希望你能从中获益。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;原文 &lt;a href=&quot;https://medium.com/servers-101/how-to-secure-your-linux-server-6026cfcdefd8&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;How To Secure Your Linux Server In 7 Easy Steps&lt;/a&gt; 由 &lt;a href=&quot;https://medium.com/@mutendebrian&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Brian Mutende&lt;/a&gt; 发布于 Medium，翻译转载已获作者允许。&lt;br&gt;为配合博客目录系统显示，对原文章节名略有修改。&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;大多数服务器经常会被黑客攻击。所以我决定写一篇简短的教程，让读者轻松加固自己的 Linux 服务器。&lt;/p&gt;
&lt;p&gt;这并不是一篇完整的安全指南，但是它可以帮你阻断近九成常见的后端攻击，例如&lt;strong&gt;暴力破解&lt;/strong&gt;和 &lt;strong&gt;DDoS&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;最棒的是，你可以在一两个小时内就完成操作。&lt;/p&gt;
&lt;h1 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;你需要一台Linux服务器。&lt;/li&gt;
&lt;li&gt;你需要对命令行有基本的了解。&lt;a href=&quot;https://learncodethehardway.org/unix/bash_cheat_sheet.pdf&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;这里&lt;/a&gt;提供一份 cheet sheet 供你使用。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果你已万事俱备，那就开始吧。&lt;/p&gt;
    
    </summary>
    
      <category term="教程" scheme="https://acuario.xyz/categories/%E6%95%99%E7%A8%8B/"/>
    
      <category term="Linux" scheme="https://acuario.xyz/categories/%E6%95%99%E7%A8%8B/Linux/"/>
    
    
      <category term="教程" scheme="https://acuario.xyz/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="Linux" scheme="https://acuario.xyz/tags/Linux/"/>
    
      <category term="命令行" scheme="https://acuario.xyz/tags/%E5%91%BD%E4%BB%A4%E8%A1%8C/"/>
    
      <category term="服务器安全" scheme="https://acuario.xyz/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>播客札记（二）</title>
    <link href="https://acuario.xyz/podcast-note-2/"/>
    <id>https://acuario.xyz/podcast-note-2/</id>
    <published>2019-04-24T16:00:00.000Z</published>
    <updated>2019-04-28T09:23:43.218Z</updated>
    
    <content type="html"><![CDATA[<h1 id="翻电-Special-VOL04-996-不仅是道德问题"><a href="#翻电-Special-VOL04-996-不仅是道德问题" class="headerlink" title="翻电 Special VOL04 | 996 不仅是道德问题"></a>翻电 Special VOL04 | 996 不仅是道德问题</h1><p><a href="https://overcast.fm/+GsFgwEus4" target="_blank" rel="noopener">Episode Archive</a></p><h2 id="996-的现状和成因"><a href="#996-的现状和成因" class="headerlink" title="996 的现状和成因"></a>996 的现状和成因</h2><ul><li>超时工作 / 加班最多的工作往往处于社会两端：高收入者（高管、投行）和低收入者（工厂工人、出租车司机、快递员、外卖员）。</li><li>高收入者超时工作的原因：由于社会分工程度有上限，具有创造性的工作实际难以再被细节分工。而此类工作大多是无法分工的高产出单人项目。</li><li>低收入者超时工作的原因：此类工作是计件工资制度，多劳多得。</li><li>正常工作是固定工资模式，其处于高收入者和低收入者之间，涉及的创造性的工作和计件工作不多。</li><li>996 运动的爆发来源于高收入者工作模式对正常工作，即固定工资模式的侵入。</li><li>互联网行业的军备竞赛导致了对 996 工作制的需求。</li><li>不患寡而患不均，996 的出现往往是企业文化的整体问题，而非个别部门的个别现象。</li></ul><h2 id="商业模式与-996-的关系"><a href="#商业模式与-996-的关系" class="headerlink" title="商业模式与 996 的关系"></a>商业模式与 996 的关系</h2><ul><li>普通企业的盈利是基于商品的利润。工作量增多带来的投入产出比相对较低。</li><li>互联网行业的盈利是基于股本的增值。估值方法为公司的产品能力、用户数等因素。</li><li>劳动与劳动的区分不在于脑体，而在于资本密集程度。资本市场的存在催生互联网行业和投行等领域的高薪 996。</li><li>八小时工作制最早由英国空想社会主义者罗伯特・欧文于 1817 年 8 月提出。其后由于欧美资本家对劳工的剥削不断加剧，1886 年 5 月 1 日美国芝加哥爆发了历史最大的罢工，倡导实行八小时工作制。</li><li>经济下行期强调、诉求加班文化的企业将会越来越多。在经济下行期，加班将不再只是劳资问题，而将是企业与企业之间军备竞赛的问题。企业主认为在经济下行期控制支出成本的同时提高工作产出，形成企业与企业之间的重商主义。为合理化这一观念，将会出现越来越多提倡奋斗、勤劳文化的论调。</li></ul><a id="more"></a><hr><h1 id="翻转问答-VOL19-应该成为多才多艺的人吗？"><a href="#翻转问答-VOL19-应该成为多才多艺的人吗？" class="headerlink" title="翻转问答 VOL19 | 应该成为多才多艺的人吗？"></a>翻转问答 VOL19 | 应该成为多才多艺的人吗？</h1><p><a href="https://overcast.fm/+GsFiolXRY" target="_blank" rel="noopener">Episode Archive</a></p><h2 id="多样的人生有什么样的假设基础"><a href="#多样的人生有什么样的假设基础" class="headerlink" title="多样的人生有什么样的假设基础"></a>多样的人生有什么样的假设基础</h2><ul><li>假设基础：世间的很多禀赋没有高下之分，各种的才能之间都是平等的。</li><li>上述假设是多元主义的，同时也具有平民主义的特点。</li></ul><h2 id="过去的年代人们有什么样的生活重心"><a href="#过去的年代人们有什么样的生活重心" class="headerlink" title="过去的年代人们有什么样的生活重心"></a>过去的年代人们有什么样的生活重心</h2><ul><li>中世纪社会认为人寻求救赎、追求彼岸最重要，所以僧侣的地位最高。</li><li>法国大革命将第一阶级和第三阶级平等化，不因不同社会分工而地位不同。</li><li>古希腊没有社会分工，专业化只存在于奴隶中。但依然有依据城邦的存续而发展出来的作为人的第一要务——成为伟大的战士、成为关心城邦政事的自由民。eg.埃斯库罗斯的墓志铭</li><li>儒家的承礼启仁是古时的时代精神。</li><li>现代社会多才多艺的精英来自于文艺复兴时期的知识分子。</li></ul><h2 id="今天为何生活失去重心"><a href="#今天为何生活失去重心" class="headerlink" title="今天为何生活失去重心"></a>今天为何生活失去重心</h2><ul><li>今天的时代失去重心，一切问题没有被化解和体认，而是被掩盖起来，最终导致了现代社会推崇多元精英。</li><li>我们不应宣扬没有实指的东西（eg. 优秀、厉害），而应该宣扬找到自己的使命和重心。</li></ul><h2 id="技术化生活的起点和有效性"><a href="#技术化生活的起点和有效性" class="headerlink" title="技术化生活的起点和有效性"></a>技术化生活的起点和有效性</h2><ul><li>一切多元精英论调的滥觞——《高效人士的 7 个习惯》。</li><li>网络上充斥的技术化指导实际难有成效，如：<ol><li><em>有效时间内提高产出</em>；</li><li><em>如何面临抉择</em>。</li></ol></li><li>上述技术化指导有效的前提假设是：一个人只要改变想法就可以改变行为，改变行为就可以改变生活。但是改变想法、改变行为和改变生活之间并未有很强的联系。</li></ul><h2 id="每一个时代都有唯一重要的事"><a href="#每一个时代都有唯一重要的事" class="headerlink" title="每一个时代都有唯一重要的事"></a>每一个时代都有唯一重要的事</h2><ul><li>每一个时代都有唯一重要和可欲的事，不代表所有人必须做同样的事。根据人的理解不同，切入点可以不同。</li><li>可欲的事非常少，每个人都应以自己的方式体认这个时代的时代精神，并以自己的特殊性和个体性切入行事当中。</li></ul><h2 id="面向真相敞开"><a href="#面向真相敞开" class="headerlink" title="面向真相敞开"></a>面向真相敞开</h2><ul><li>如果要接近时代症结，就需要面向真相敞开。由于现代社会语言已经弱化和腐化，从语言的方向接近真相已经比较困难，所以可以尝试回到身体感受，从具有个体性的身体感受开始找回自己的重心，不要被人为的概念和方法影响。</li><li>我们不应该要求自己成为一个比别人更优秀和厉害的人，因为在任何领域毫无止境的比较将把人拉入没有赢面的游戏之中。</li><li>不仅仅接受哲学道理，而是感悟其人的经历和经历对其道理带来的影响。eg. 维特根斯坦</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;翻电-Special-VOL04-996-不仅是道德问题&quot;&gt;&lt;a href=&quot;#翻电-Special-VOL04-996-不仅是道德问题&quot; class=&quot;headerlink&quot; title=&quot;翻电 Special VOL04 | 996 不仅是道德问题&quot;&gt;&lt;/a&gt;翻电 Special VOL04 | 996 不仅是道德问题&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://overcast.fm/+GsFgwEus4&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Episode Archive&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;996-的现状和成因&quot;&gt;&lt;a href=&quot;#996-的现状和成因&quot; class=&quot;headerlink&quot; title=&quot;996 的现状和成因&quot;&gt;&lt;/a&gt;996 的现状和成因&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;超时工作 / 加班最多的工作往往处于社会两端：高收入者（高管、投行）和低收入者（工厂工人、出租车司机、快递员、外卖员）。&lt;/li&gt;
&lt;li&gt;高收入者超时工作的原因：由于社会分工程度有上限，具有创造性的工作实际难以再被细节分工。而此类工作大多是无法分工的高产出单人项目。&lt;/li&gt;
&lt;li&gt;低收入者超时工作的原因：此类工作是计件工资制度，多劳多得。&lt;/li&gt;
&lt;li&gt;正常工作是固定工资模式，其处于高收入者和低收入者之间，涉及的创造性的工作和计件工作不多。&lt;/li&gt;
&lt;li&gt;996 运动的爆发来源于高收入者工作模式对正常工作，即固定工资模式的侵入。&lt;/li&gt;
&lt;li&gt;互联网行业的军备竞赛导致了对 996 工作制的需求。&lt;/li&gt;
&lt;li&gt;不患寡而患不均，996 的出现往往是企业文化的整体问题，而非个别部门的个别现象。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;商业模式与-996-的关系&quot;&gt;&lt;a href=&quot;#商业模式与-996-的关系&quot; class=&quot;headerlink&quot; title=&quot;商业模式与 996 的关系&quot;&gt;&lt;/a&gt;商业模式与 996 的关系&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;普通企业的盈利是基于商品的利润。工作量增多带来的投入产出比相对较低。&lt;/li&gt;
&lt;li&gt;互联网行业的盈利是基于股本的增值。估值方法为公司的产品能力、用户数等因素。&lt;/li&gt;
&lt;li&gt;劳动与劳动的区分不在于脑体，而在于资本密集程度。资本市场的存在催生互联网行业和投行等领域的高薪 996。&lt;/li&gt;
&lt;li&gt;八小时工作制最早由英国空想社会主义者罗伯特・欧文于 1817 年 8 月提出。其后由于欧美资本家对劳工的剥削不断加剧，1886 年 5 月 1 日美国芝加哥爆发了历史最大的罢工，倡导实行八小时工作制。&lt;/li&gt;
&lt;li&gt;经济下行期强调、诉求加班文化的企业将会越来越多。在经济下行期，加班将不再只是劳资问题，而将是企业与企业之间军备竞赛的问题。企业主认为在经济下行期控制支出成本的同时提高工作产出，形成企业与企业之间的重商主义。为合理化这一观念，将会出现越来越多提倡奋斗、勤劳文化的论调。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="播客札记" scheme="https://acuario.xyz/categories/%E6%92%AD%E5%AE%A2%E6%9C%AD%E8%AE%B0/"/>
    
    
      <category term="Podcast" scheme="https://acuario.xyz/tags/Podcast/"/>
    
      <category term="播客" scheme="https://acuario.xyz/tags/%E6%92%AD%E5%AE%A2/"/>
    
      <category term="翻转电台" scheme="https://acuario.xyz/tags/%E7%BF%BB%E8%BD%AC%E7%94%B5%E5%8F%B0/"/>
    
      <category term="996" scheme="https://acuario.xyz/tags/996/"/>
    
      <category term="加班文化" scheme="https://acuario.xyz/tags/%E5%8A%A0%E7%8F%AD%E6%96%87%E5%8C%96/"/>
    
      <category term="多才多艺的人生" scheme="https://acuario.xyz/tags/%E5%A4%9A%E6%89%8D%E5%A4%9A%E8%89%BA%E7%9A%84%E4%BA%BA%E7%94%9F/"/>
    
  </entry>
  
  <entry>
    <title>InnoDB 与 MyISAM 的区别</title>
    <link href="https://acuario.xyz/differences-between-innodb-and-myisam/"/>
    <id>https://acuario.xyz/differences-between-innodb-and-myisam/</id>
    <published>2019-04-21T09:24:56.000Z</published>
    <updated>2019-04-21T10:12:49.618Z</updated>
    
    <content type="html"><![CDATA[<p>目前 MySQL 的数据库引擎一般使用 InnoDB 和 MyISAM，但两者存在一些差别。网上零零散散的文章看起来比较麻烦，这里以表格汇总对比二者区别。如有纰漏，还望读者在评论区指正。</p><table><thead><tr><th></th><th>InnoDB</th><th>MyISAM</th></tr></thead><tbody><tr><td>MySQL 默认引擎</td><td>✅</td><td>❌</td></tr><tr><td>事务</td><td>✅</td><td>❌</td></tr><tr><td>并发</td><td>表级锁 ✅<br>行级锁 ✅，采用 MVCC 来支持高并发，有可能死锁</td><td>表级锁 ✅<br>行级锁 ❌</td></tr><tr><td>外键</td><td>✅</td><td>❌</td></tr><tr><td>在线热备份</td><td>✅</td><td>❌</td></tr><tr><td>COUNT (*)</td><td>无 meta-data 缓存，查全表获取</td><td>有 meta-data 缓存，直接获取</td></tr><tr><td>崩溃恢复</td><td>通过事务日志来恢复数据库</td><td>损坏率高，恢复速度慢，不能安全恢复</td></tr><tr><td>其他</td><td>默认隔离级别是可重复读（REPEATABLE READ），通过多版本并发控制（MVCC）+ 间隙锁（Next-Key Locking）防止幻影读</td><td>设计简单，数据以紧密格式存储</td></tr><tr><td>索引特性</td><td>主索引是聚簇索引，在索引中保存了数据，从而避免直接读取磁盘，因此对查询性能有很大的提升。</td><td>DELAY_KEY_WRITE 选项：修改后，新索引数据写入内存中的键缓冲区，清理键缓冲区或者关闭表时才写入磁盘。极大提升写入性能，但崩溃时会造成索引损坏</td></tr><tr><td>全文索引</td><td>>= MySQL 5.6.4 ✅<br>  &lt; MySQL 5.6.4 ❌</td><td>✅<br>支持 BLOB 和 TEXT 的前 500 个字符索引</td></tr><tr><td>自有特性</td><td>内部优化：<br>1. 可预测性读加快读操作<br>2. 自适应哈希索引加速插入操作的插入缓冲区</td><td>1. 支持压缩表和空间数据索引<br>2.并发插入（CONCURRENT INSERT）：在表有读取操作的同时，也可以往表中插入新的记录</td></tr></tbody></table><hr><p>参考链接：<br><a href="https://github.com/CyC2018/CS-Notes/blob/master/docs/notes/MySQL.md#%E4%B8%89%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E" target="_blank" rel="noopener">技术面试必备基础知识：MySQL</a><br><a href="http://cxymrzero.github.io/blog/2015/08/17/myisam-innodb/" target="_blank" rel="noopener">MyISAM 与 InnoDB 区别</a><br><a href="https://juejin.im/post/5b1685bef265da6e5c3c1c34" target="_blank" rel="noopener">MySQL 常见的两种存储引擎：MyISAM 与 InnoDB 的爱恨情仇</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;目前 MySQL 的数据库引擎一般使用 InnoDB 和 MyISAM，但两者存在一些差别。网上零零散散的文章看起来比较麻烦，这里以表格汇总对比二者区别。如有纰漏，还望读者在评论区指正。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Inno
      
    
    </summary>
    
      <category term="学习笔记" scheme="https://acuario.xyz/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="MySQL" scheme="https://acuario.xyz/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/MySQL/"/>
    
    
      <category term="MySQL" scheme="https://acuario.xyz/tags/MySQL/"/>
    
      <category term="数据库" scheme="https://acuario.xyz/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="学习笔记" scheme="https://acuario.xyz/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>播客札记（一）</title>
    <link href="https://acuario.xyz/podcast-note-1/"/>
    <id>https://acuario.xyz/podcast-note-1/</id>
    <published>2019-04-11T16:00:00.000Z</published>
    <updated>2019-04-28T09:22:12.282Z</updated>
    
    <content type="html"><![CDATA[<h1 id="翻转问答-VOL8-亲密关系"><a href="#翻转问答-VOL8-亲密关系" class="headerlink" title="翻转问答 VOL8 | 亲密关系"></a>翻转问答 VOL8 | 亲密关系</h1><p><a href="https://overcast.fm/+GsFgR-JZI" target="_blank" rel="noopener">Episode Archive</a></p><h2 id="亲密关系的特点"><a href="#亲密关系的特点" class="headerlink" title="亲密关系的特点"></a>亲密关系的特点</h2><ul><li>个人主义社会——代表排除共同体、排除外部主张的合理性，关注自我的合理性，且自我合理性不与所处共同体相关，是一种纯粹的根本的自我。</li><li>亲密关系是一种纯粹关系，与个人主义的自我产生关联，过去的亲密关系属于共同体（家庭、集体），如今属于自我。</li><li>现代自我拥有物理和心理意义上更多的私人空间，亲密关系与私人空间的冲突恰是其特殊性。</li><li>亲密关系可以充分满足自我认可。因为：<ol><li>亲密关系是自信心和基础安全感的来源；</li><li>亲密关系是制度化社会中几乎唯一的非制度要素的情景，用以释放制度压抑（福柯提出性和药物释放制度压抑）；</li><li>荣格心理学认为，亲密关系是人与自身异性人格（anima 和 animus）达成和解的要素，即是自身自信。</li></ol></li></ul><h2 id="亲密关系为何脆弱"><a href="#亲密关系为何脆弱" class="headerlink" title="亲密关系为何脆弱"></a>亲密关系为何脆弱</h2><ul><li>现代生活中，维系亲密关系的外部必然性消失，促使人反思自身的亲密关系，但亲密关系本身禁不起反思。</li><li>社会流动性越来越大，增加了更多亲密关系的选择。</li><li>亲密关系博弈成为囚徒困境博弈，结合亲密关系边际效应使人更愿意考虑成本和收益而做出选择。</li><li>开放式关系看似消解了亲密关系的囚徒困境，但依旧无法达成 anima 和 animus 和解，且个人主义的本质下，亲密关系是一对一的。</li></ul><a id="more"></a><h2 id="现代知识异化中对亲密关系的-5-种关键隐喻"><a href="#现代知识异化中对亲密关系的-5-种关键隐喻" class="headerlink" title="现代知识异化中对亲密关系的 5 种关键隐喻"></a>现代知识异化中对亲密关系的 5 种关键隐喻</h2><ol><li>健康——感情健康。根本原因是纯粹的亲密关系失去了基础。难免被套用到客观评判体系，引入制度和技术对亲密关系进行调和。</li><li>企业——如何「经营」感情。</li><li>镜像神经元——充分了解对方、完全换位思考理解对方。</li><li>信仰——亲密关系是心诚则灵的东西。信仰在宗教中只照顾生活中与自我存在相关的绝对要素，如救赎——而不是现实功利主义在乎的东西。</li><li>自我——爱别人首先要爱自己。这是纯粹个人主义对亲密关系的排除。但除了自恋之外的「爱」本身就是否定自我的过程，要爱自己，不得不承认宾我与主我的存在，并反对接受宾我的反思。能够做到彻底的自爱的人，定是一个绝对自私的人。</li></ol><h2 id="如何保卫亲密关系"><a href="#如何保卫亲密关系" class="headerlink" title="如何保卫亲密关系"></a>如何保卫亲密关系</h2><ol><li>不仅保卫亲密关系，也要保卫其他真正的关系——如亲情关系、友情关系。</li><li>通过其他真正的关系来锻炼自己承担人际风险的能力，从而减弱自己的胆怯和容易在亲密关系中收到的伤害。</li></ol><hr><h1 id="翻转问答-VOL9-如何看待中医和西医的对比"><a href="#翻转问答-VOL9-如何看待中医和西医的对比" class="headerlink" title="翻转问答 VOL9 | 如何看待中医和西医的对比"></a>翻转问答 VOL9 | 如何看待中医和西医的对比</h1><p><a href="https://overcast.fm/+GsFjiSGOA" target="_blank" rel="noopener">Episode Archive</a></p><ul><li>伪科学是指任何经宣称为科学，或描述方式看起来像科学，但实际上并不符合科学方法基本要求的知识、缺乏支持证据，经不起可信性测试，或缺乏科学形式，伪科学常常使用模糊的、自相矛盾的、夸张的或无法证明的主张，过度依赖确认而不是严格的反驳，缺乏其它专家的公开确认，缺乏系统化、理性化的理论过程。</li><li>中医是“伪科学”还是“非科学”？</li><li>科学还原论试图将各种领域完全祛魅，进行彻底的科学化。中医是否需要像艺术、宗教一样进行科学化？人的身体和医学一定要“科学化”吗？</li></ul><h2 id="物理世界是否必须科学化？"><a href="#物理世界是否必须科学化？" class="headerlink" title="物理世界是否必须科学化？"></a>物理世界是否必须科学化？</h2><ul><li>物理世界的分类：<ol><li>真实感受建构的世界：食物-味觉，按摩-触觉；</li><li>目的建构的世界：与目的高度相关——交通、建筑；</li><li>数学建构的世界：完全的抽象世界。</li></ol></li><li>真实感受的物理世界的语汇与科学的语汇存在范式差异：如味觉「鲜」（厨师烹饪时加糖提鲜）实际并非用科学语境下的「鲜味」。所以并非所有场景都要用科学语汇来替代真实感受的物理世界的语汇。</li><li>目的的物理世界由于存在理论与实践的差异，但并非所有实践都需要确切的理论认识：如鸟的飞行行为本身并不依赖于理论认识；部分尖端科技的发现（认识）是实践（实验）中的偶然，并非现有认识才有实践。</li><li>数学（及其相关）的物理世界由于完全抽象而进行了科学化：如天文学的观测结果、基因层面的理论等。</li></ul><h2 id="医学是否应该属于数学的物理世界？"><a href="#医学是否应该属于数学的物理世界？" class="headerlink" title="医学是否应该属于数学的物理世界？"></a>医学是否应该属于数学的物理世界？</h2><ul><li>基础假设：科学构筑了现象世界以外的不能被感官感知的现象，这些东西是比被感官感知的东西更本质的原因。即如果能找到非无感现象的原因，则五感现象基本都是偏见和错误。</li><li>相信科学即相信上述基础假设。</li><li>现代医学的专业化细分使其可以属于数学的物理世界这一范畴。西医对细节化学现象的分析、对人体化学还原的做法是逻辑自洽的。</li><li>医学自洽是对细节化学现象的自洽，而非对人整体的自洽。</li><li>副作用的存在没有证伪任何化学理论，而是提出了更多难以解释的现象。</li></ul><h2 id="证伪是什么意思？证伪很重要吗？"><a href="#证伪是什么意思？证伪很重要吗？" class="headerlink" title="证伪是什么意思？证伪很重要吗？"></a>证伪是什么意思？证伪很重要吗？</h2><ul><li>「证伪 = 求真」是语言误用。</li><li>被证伪不代表因果性不存在。</li><li>只有科学可以被证伪，但日常医学实践并未以证伪的方式推进科学。</li><li>证伪、实证并非最重要的方法论。</li></ul><h2 id="西医的现状和逻辑问题"><a href="#西医的现状和逻辑问题" class="headerlink" title="西医的现状和逻辑问题"></a>西医的现状和逻辑问题</h2><ul><li>西医治疗的是微观的现象（症状），而非整个人体本身。</li><li>人体的健康状况不是细节现象，而整体宏观秩序。</li><li>西医的统计学基础决定了受众是社会整体，而非单个个体，西医以社会工程学为基础，而非个体研究为基础。临床检验流程，是从社会工程学角度确定药物对社会的安全性，而非对独立个体的安全性。同时，统计样本的选取，也左右着西医实际参考价值。个体差异的复杂性导致个体参与医学治疗的差异性。</li></ul><h2 id="中医有没有理论？"><a href="#中医有没有理论？" class="headerlink" title="中医有没有理论？"></a>中医有没有理论？</h2><ul><li>专家崇拜是现代性的一大问题。以信托的方式相信专家，是存在实际风险和问题的。</li><li>中医并非没有理论，而是非科学理论。</li><li>中医的理论前提是阴阳五行的信念，西医的理论前提是数学理论的实在。</li><li>实用主义角度来看，阴阳五行理论在某种程度上阐释了身体的现象和关系。我们承认其有理，但为何我们否认其「真」？</li></ul><h2 id="我们需要的一种“本体论”清醒"><a href="#我们需要的一种“本体论”清醒" class="headerlink" title="我们需要的一种“本体论”清醒"></a>我们需要的一种“本体论”清醒</h2><ul><li>认为科学发展可以一往无前，将有科学宗教和科学迷信的风险。</li><li>大多数科学的发现是应用领域的新应用，而非原理领域的新发现。</li><li>科学意义的「存在」和我们五感的「存在」并非相同意义，我们虽未以五感方式认知其科学「存在」，但我们对其有信任。这与阴阳五行理论的「存在」并无本质差异。</li><li>真理掌握我们，而非我们掌握真理。</li></ul><h2 id="为何中医话题敏感？"><a href="#为何中医话题敏感？" class="headerlink" title="为何中医话题敏感？"></a>为何中医话题敏感？</h2><ul><li>以公共说理和公共舆论为重要基础，科学的公共话题变得比较敏感。</li><li>人被隔绝的日常实践，通过口头表达和表达被人承认获得自我认知和实现。</li><li>随着互联网发展，公共言论和公共舆论与权力高度相关。</li><li>在公共说理领域，面对多变的环境和不确定性的受众，我们需要一种货币一样的硬通货来说理——普遍主义。</li><li>启蒙理性和科学，诞生于对神学的批判，但在批驳的同时继承了神学的确定性和普遍主义。</li><li>科学无法争取的普遍主义的领域，将被权力斥为不重要和无意义。如艺术、形而上学、人生价值。</li><li>认为「一个领域必须留给其专业的、有其实践经验的人」的想法，是十分傲慢、不负责任、导致社会进一步切割的观念。专家崇拜是现代性涌现的巨大问题，它带来社会盲目和个体自信心和安全感的丧失。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;翻转问答-VOL8-亲密关系&quot;&gt;&lt;a href=&quot;#翻转问答-VOL8-亲密关系&quot; class=&quot;headerlink&quot; title=&quot;翻转问答 VOL8 | 亲密关系&quot;&gt;&lt;/a&gt;翻转问答 VOL8 | 亲密关系&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://overcast.fm/+GsFgR-JZI&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Episode Archive&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;亲密关系的特点&quot;&gt;&lt;a href=&quot;#亲密关系的特点&quot; class=&quot;headerlink&quot; title=&quot;亲密关系的特点&quot;&gt;&lt;/a&gt;亲密关系的特点&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;个人主义社会——代表排除共同体、排除外部主张的合理性，关注自我的合理性，且自我合理性不与所处共同体相关，是一种纯粹的根本的自我。&lt;/li&gt;
&lt;li&gt;亲密关系是一种纯粹关系，与个人主义的自我产生关联，过去的亲密关系属于共同体（家庭、集体），如今属于自我。&lt;/li&gt;
&lt;li&gt;现代自我拥有物理和心理意义上更多的私人空间，亲密关系与私人空间的冲突恰是其特殊性。&lt;/li&gt;
&lt;li&gt;亲密关系可以充分满足自我认可。因为：&lt;ol&gt;
&lt;li&gt;亲密关系是自信心和基础安全感的来源；&lt;/li&gt;
&lt;li&gt;亲密关系是制度化社会中几乎唯一的非制度要素的情景，用以释放制度压抑（福柯提出性和药物释放制度压抑）；&lt;/li&gt;
&lt;li&gt;荣格心理学认为，亲密关系是人与自身异性人格（anima 和 animus）达成和解的要素，即是自身自信。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;亲密关系为何脆弱&quot;&gt;&lt;a href=&quot;#亲密关系为何脆弱&quot; class=&quot;headerlink&quot; title=&quot;亲密关系为何脆弱&quot;&gt;&lt;/a&gt;亲密关系为何脆弱&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;现代生活中，维系亲密关系的外部必然性消失，促使人反思自身的亲密关系，但亲密关系本身禁不起反思。&lt;/li&gt;
&lt;li&gt;社会流动性越来越大，增加了更多亲密关系的选择。&lt;/li&gt;
&lt;li&gt;亲密关系博弈成为囚徒困境博弈，结合亲密关系边际效应使人更愿意考虑成本和收益而做出选择。&lt;/li&gt;
&lt;li&gt;开放式关系看似消解了亲密关系的囚徒困境，但依旧无法达成 anima 和 animus 和解，且个人主义的本质下，亲密关系是一对一的。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="播客札记" scheme="https://acuario.xyz/categories/%E6%92%AD%E5%AE%A2%E6%9C%AD%E8%AE%B0/"/>
    
    
      <category term="Podcast" scheme="https://acuario.xyz/tags/Podcast/"/>
    
      <category term="播客" scheme="https://acuario.xyz/tags/%E6%92%AD%E5%AE%A2/"/>
    
      <category term="翻转电台" scheme="https://acuario.xyz/tags/%E7%BF%BB%E8%BD%AC%E7%94%B5%E5%8F%B0/"/>
    
      <category term="亲密关系" scheme="https://acuario.xyz/tags/%E4%BA%B2%E5%AF%86%E5%85%B3%E7%B3%BB/"/>
    
      <category term="中医" scheme="https://acuario.xyz/tags/%E4%B8%AD%E5%8C%BB/"/>
    
  </entry>
  
  <entry>
    <title>SS/SSR中转V2ray起飞教程</title>
    <link href="https://acuario.xyz/delegate-v2ray-traffic-to-ss-or-ssr/"/>
    <id>https://acuario.xyz/delegate-v2ray-traffic-to-ss-or-ssr/</id>
    <published>2019-04-01T07:58:18.000Z</published>
    <updated>2019-06-07T15:07:53.593Z</updated>
    
    <content type="html"><![CDATA[<p>本文目标读者：</p><ul><li>拥有自建 V2Ray 代理</li><li>有机场使用经验</li><li>没钱买高价机场 / 乐于使(bái)用(piáo)公益机场</li><li>使用机场服务，但忌惮流量安全</li></ul><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>目前市面上已经有很多机场（提供 SS/SSR 服务的网站），且不乏众多公益机场，这些机场因为拥有一些好线路的服务器，所以在使用的时候可以获得较好的突破网络封锁的体验。比起自己购买一个垃圾服务器，使用时的龟速；以及购买一个优质线路服务器，承受每月高额费用；更不用说还要担心自己服务器被 GFW 认证的风险——使用机场真是省钱省心。但是隐私问题也不容小觑，支付时的隐私泄露按下不表，本文的初衷是规避使用机场时流量隐私泄露的问题——如何使用机场服务的同时不暴露自己的流量隐私。</p><p>V2Ray 除了支持自有协议 VMess 之外，还支持 Socks、Shadowsocks 等协议，配合自带的流量中转功能，可以在保护流量隐私的同时，借助机场起飞，最大程度上提升代理使用体验。</p><p>前面说这么多，说人话就是——花最少的钱，用最好的线路，让偷窥流量 / 监控流量的机场见鬼去吧。</p><h1 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h1><p><img src="https://i.loli.net/2019/04/01/5ca1b95248225.png" alt="无标题.png"></p><a id="more"></a><p>基本原理大致如下：</p><ol><li>V2Ray 客户端先将流量使用 VMess 协议加密</li><li>按照不同的加密方法：<br> SS 中转：V2Ray 客户端再使用 SS 协议加密，把两次加密后的流量发送到机场服务器进行中转<br> SSR 中转：V2Ray 客户端把 VMess 加密流量发给 SSR 客户端，SSR 客户端再使用 SSR 协议加密，把两次加密后的流量发送到机场服务器进行中转</li><li>机场服务器对流量进行 SS/SSR 解密后再把流量（VMess 协议加密流量）发往我们自建的 V2Ray 服务器</li><li>V2Ray 服务器正常访问网站</li><li>网站返回的数据按上述步骤和处理方式原路返回</li></ol><p>由于机场服务器收到的是 VMess 协议加密后的流量，加密方法又是我们自定义的，所以机场几无可能掌握我们的真实流量。下面动手实操。</p><h1 id="SS-中转-V2Ray-流量"><a href="#SS-中转-V2Ray-流量" class="headerlink" title="SS 中转 V2Ray 流量"></a>SS 中转 V2Ray 流量</h1><p>V2Ray 自身支持 Shadowsocks 协议，所以 SS 中转 V2Ray 流量按照官方的<a href="https://toutyrater.github.io/advanced/outboundproxy.html" target="_blank" rel="noopener">白话文教程</a>来操作就行了。简单来说就是把配置文件中的 <code>outbounds</code> 部分设置为这样：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;outbounds&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;protocol&quot;: &quot;vmess&quot;,</span><br><span class="line">      &quot;settings&quot;: &#123; // 此处根据自己的V2Ray设置修改</span><br><span class="line">        &quot;vnext&quot;: [</span><br><span class="line">          &#123;</span><br><span class="line">            &quot;address&quot;: &quot;1.1.1.1&quot;,</span><br><span class="line">            &quot;port&quot;: 8888,</span><br><span class="line">            &quot;users&quot;: [</span><br><span class="line">              &#123;</span><br><span class="line">                &quot;alterId&quot;: 64,</span><br><span class="line">                &quot;id&quot;: &quot;b12614c5-5ca4-4eba-a215-c61d642116ce&quot;</span><br><span class="line">              &#125;</span><br><span class="line">            ]</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;proxySettings&quot;: &#123;</span><br><span class="line">          &quot;tag&quot;: &quot;transit&quot;  // 把 V2Ray 流量发给 tag 名为 transit 的代理进行转发</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;protocol&quot;: &quot;shadowsocks&quot;,</span><br><span class="line">      &quot;settings&quot;: &#123; // 此处填上机场某个 SS 服务器的配置</span><br><span class="line">        &quot;servers&quot;: [</span><br><span class="line">          &#123;</span><br><span class="line">            &quot;address&quot;: &quot;2.2.2.2&quot;,</span><br><span class="line">            &quot;method&quot;: &quot;aes-256-cfb&quot;,</span><br><span class="line">            &quot;ota&quot;: false,</span><br><span class="line">            &quot;password&quot;: &quot;password&quot;,</span><br><span class="line">            &quot;port&quot;: 1024</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;tag&quot;: &quot;transit&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br></pre></td></tr></table></figure></p><h1 id="SSR-中转-V2Ray-流量"><a href="#SSR-中转-V2Ray-流量" class="headerlink" title="SSR 中转 V2Ray 流量"></a>SSR 中转 V2Ray 流量</h1><p>但是很多机场都是 SSR 机场，没有提供 SS 配置，那岂不是就不能用上面的骚操作了？既然 SSR 支持监听本地的 Socks 流量，V2Ray 又支持 Socks 协议传出，那我们只需要在本地同时打开 V2Ray 和 SSR 客户端，然后用 Socks 协议连接二者通信即可，相当于把上一节中 V2Ray 传出目标从服务器改为本地 SSR。那么配置文件中的 <code>outbounds</code> 部分就设置为这样：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;outbounds&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;protocol&quot;: &quot;vmess&quot;,</span><br><span class="line">      &quot;settings&quot;: &#123; // 此处根据自己的V2Ray设置修改</span><br><span class="line">        &quot;vnext&quot;: [</span><br><span class="line">          &#123;</span><br><span class="line">            &quot;address&quot;: &quot;1.1.1.1&quot;,</span><br><span class="line">            &quot;port&quot;: 8888,</span><br><span class="line">            &quot;users&quot;: [</span><br><span class="line">              &#123;</span><br><span class="line">                &quot;alterId&quot;: 64,</span><br><span class="line">                &quot;id&quot;: &quot;b12614c5-5ca4-4eba-a215-c61d642116ce&quot;</span><br><span class="line">              &#125;</span><br><span class="line">            ]</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;proxySettings&quot;: &#123;</span><br><span class="line">          &quot;tag&quot;: &quot;transit&quot;  // 把 V2Ray 流量发给 tag 名为 transit 的代理进行转发</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;protocol&quot;: &quot;socks&quot;,</span><br><span class="line">      &quot;settings&quot;: &#123;</span><br><span class="line">        &quot;servers&quot;: [</span><br><span class="line">          &#123;</span><br><span class="line">          &quot;address&quot;: &quot;127.0.0.1&quot;,</span><br><span class="line">          &quot;port&quot;: 1080  // 此处填写 SSR 客户端监听的本地端口</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;tag&quot;: &quot;transit&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br></pre></td></tr></table></figure></p><p>以 Windows 平台为例，我们可以在客户端的「选项设置」中「允许来自局域网的连接」，并且设置 SSR 客户端监听的本地端口：</p><p><img src="https://i.loli.net/2019/04/01/5ca1b95b997fe.png" alt="SSR设置"></p><p>完成设置后，在 SSR 客户端中选择想要使用的服务器节点，并且打开 V2Ray，需要代理的流量全部访问 <strong>V2Ray 客户端监听的端口</strong>即可。</p><p><img src="https://i.loli.net/2019/04/01/5ca1b95d2597b.png" alt="选择SSR服务器节点"></p><p>如果设置正确，访问不存在的网站时，可以在 V2Ray 服务端日志中看到流量全部来自于我们选择机场服务器节点。</p><p><img src="https://i.loli.net/2019/04/01/5ca1b95e30487.png" alt="V2Ray服务端日志"></p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="V2Ray-配置文件"><a href="#V2Ray-配置文件" class="headerlink" title="V2Ray 配置文件"></a>V2Ray 配置文件</h2><p>刚开始使用 V2Ray 的人可能会困惑于 V2Ray 配置文件的繁琐，下面提供几个与本文相关的，本人目前正在使用的 V2Ray 完整配置文件，其中客户端配置文件集成了基本的广告屏蔽和大陆直连，本地监听端口为 <code>1082</code>，可根据自己需要进行修改。同时也提供了最简单的服务端配置文件，仅供参考：</p><ul><li><a href="https://gist.github.com/yhyy135/667251599e3e762ca6d86517d39554c8/raw/ba48ac317c5b658b55b4834516d897a4a201a473/ss-vmess-config.json" target="_blank" rel="noopener">SS 中转 V2Ray 客户端配置文件</a></li><li><a href="https://gist.github.com/yhyy135/667251599e3e762ca6d86517d39554c8/raw/ba48ac317c5b658b55b4834516d897a4a201a473/ssr-vmess-config.json" target="_blank" rel="noopener">SSR 中转 V2Ray 客户端配置文件</a></li><li><a href="https://gist.github.com/yhyy135/667251599e3e762ca6d86517d39554c8/raw/ba48ac317c5b658b55b4834516d897a4a201a473/server-config.json" target="_blank" rel="noopener">V2Ray 服务端配置文件</a></li></ul><p>另外，由于 SSR 中转 V2Ray 流量需要同时使用 SSR 客户端和 V2Ray 客户端，所以目前暂时无法在移动设备上实现，略有遗憾。但是既然都可以如此白嫖机场了，还是知足吧。如果你有什么好想法，不妨在评论区交流。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文目标读者：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;拥有自建 V2Ray 代理&lt;/li&gt;
&lt;li&gt;有机场使用经验&lt;/li&gt;
&lt;li&gt;没钱买高价机场 / 乐于使(bái)用(piáo)公益机场&lt;/li&gt;
&lt;li&gt;使用机场服务，但忌惮流量安全&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;目前市面上已经有很多机场（提供 SS/SSR 服务的网站），且不乏众多公益机场，这些机场因为拥有一些好线路的服务器，所以在使用的时候可以获得较好的突破网络封锁的体验。比起自己购买一个垃圾服务器，使用时的龟速；以及购买一个优质线路服务器，承受每月高额费用；更不用说还要担心自己服务器被 GFW 认证的风险——使用机场真是省钱省心。但是隐私问题也不容小觑，支付时的隐私泄露按下不表，本文的初衷是规避使用机场时流量隐私泄露的问题——如何使用机场服务的同时不暴露自己的流量隐私。&lt;/p&gt;
&lt;p&gt;V2Ray 除了支持自有协议 VMess 之外，还支持 Socks、Shadowsocks 等协议，配合自带的流量中转功能，可以在保护流量隐私的同时，借助机场起飞，最大程度上提升代理使用体验。&lt;/p&gt;
&lt;p&gt;前面说这么多，说人话就是——花最少的钱，用最好的线路，让偷窥流量 / 监控流量的机场见鬼去吧。&lt;/p&gt;
&lt;h1 id=&quot;基本原理&quot;&gt;&lt;a href=&quot;#基本原理&quot; class=&quot;headerlink&quot; title=&quot;基本原理&quot;&gt;&lt;/a&gt;基本原理&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/04/01/5ca1b95248225.png&quot; alt=&quot;无标题.png&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="教程" scheme="https://acuario.xyz/categories/%E6%95%99%E7%A8%8B/"/>
    
      <category term="软件使用" scheme="https://acuario.xyz/categories/%E6%95%99%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8/"/>
    
    
      <category term="教程" scheme="https://acuario.xyz/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="VPS" scheme="https://acuario.xyz/tags/VPS/"/>
    
      <category term="ShadowsocksR" scheme="https://acuario.xyz/tags/ShadowsocksR/"/>
    
      <category term="v2ray" scheme="https://acuario.xyz/tags/v2ray/"/>
    
      <category term="Shadowsocks" scheme="https://acuario.xyz/tags/Shadowsocks/"/>
    
  </entry>
  
  <entry>
    <title>使用HyperApp搭建Tiny Tiny RSS</title>
    <link href="https://acuario.xyz/set-up-tiny-tiny-rss-with-hyperapp/"/>
    <id>https://acuario.xyz/set-up-tiny-tiny-rss-with-hyperapp/</id>
    <published>2019-02-26T07:22:31.000Z</published>
    <updated>2019-04-29T14:16:35.001Z</updated>
    
    <content type="html"><![CDATA[<h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><ul><li>VPS 需要先安装好 <code>docker-ce</code></li><li><a href="https://itunes.apple.com/app/apple-store/id1179750280?pt=118260435&amp;ct=guide&amp;mt=8" target="_blank" rel="noopener">HyperApp</a></li><li>一个已经解析正确的域名（ping 验证）</li><li>耐心。仔细。认真</li></ul><h1 id="HyperApp-服务端配置"><a href="#HyperApp-服务端配置" class="headerlink" title="HyperApp 服务端配置"></a>HyperApp 服务端配置</h1><h2 id="安装-PostgreSQL"><a href="#安装-PostgreSQL" class="headerlink" title="安装 PostgreSQL"></a>安装 PostgreSQL</h2><p>虽然 HyperApp 提供了相应的 PostgreSQL 应用一键安装，但是由于安装 Tiny Tiny RSS 时无法与其衔接，所以一并使用 <code>Docker Image</code> 方法进行安装。</p><a id="more"></a><ol><li>转到商店页面。找到 <code>Docker Image</code> 然后选择服务器并且保存进入配置界面</li><li>请完全按照下图配置进行填写！</li></ol><table><thead><tr><th>应用设置名称</th><th>内容</th></tr></thead><tbody><tr><td>Image</td><td>sameersbn/postgresql:latest</td></tr><tr><td>Options</td><td><code>--restart=always -v /srv/docker/postgres/data/:/var/lib/postgresql/ -e PG_PASSWORD=mydbpass -e DB_EXTENSION=pg_trgm -p 5432:5432</code></td></tr><tr><td>Command</td><td></td></tr><tr><td>Args</td><td></td></tr><tr><td>其他</td><td>所有其他设置均为空</td></tr></tbody></table><h2 id="安装-Tiny-Tiny-RSS"><a href="#安装-Tiny-Tiny-RSS" class="headerlink" title="安装 Tiny Tiny RSS"></a>安装 Tiny Tiny RSS</h2><ol><li>转到商店页面。找到 <code>Docker Image</code> 然后选择服务器并且保存进入配置界面</li><li>请完全按照下图配置进行填写！</li></ol><table><thead><tr><th>应用设置名称</th><th>内容</th></tr></thead><tbody><tr><td>Image</td><td>wangqiru/ttrss</td></tr><tr><td>Options</td><td><code>--restart=always -e SELF_URL_PATH=https://你要给镜像站点的域名 -e DB_HOST=postgres -e DB_PORT=5432 -e DB_NAME=myttrss -e DB_USER=postgres -e DB_PASS=mydbpass</code></td></tr><tr><td>Command</td><td></td></tr><tr><td>Args</td><td></td></tr><tr><td>Nginx 设置名称</td><td>内容</td></tr><tr><td>域名</td><td>你要给镜像站点的域名</td></tr><tr><td>应用端口</td><td></td></tr><tr><td>Https</td><td>不重定向 HTTP 请求</td></tr><tr><td>域名</td><td>你要给镜像站点的域名（自动填写）</td></tr><tr><td>邮箱</td><td>域名所对应的邮箱</td></tr></tbody></table><ul><li>保存并且进行安装。请确保这时候 <code>Nginx Proxy</code> 以及 <code>Nginx SSL Support</code> 正常默认安装并且启动了</li></ul><h2 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h2><p>安装 PostgreSQL 和 Tiny Tiny RSS 后还不能正常使用，还需要将两者连接起来。进入 VPS 的 SSH 窗口执行命令：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker network create ttrss_network</span><br><span class="line">docker container ls | grep wangqiru/ttrss | awk &apos;&#123;print $1&#125;&apos; | xargs docker network connect ttrss_network</span><br><span class="line">docker container ls | grep sameersbn/postgresql | awk &apos;&#123;print $1&#125;&apos; | xargs docker network connect ttrss_network</span><br><span class="line">docker container ls | grep wangqiru/ttrss | awk &apos;&#123;print $1&#125;&apos; | xargs docker restart</span><br></pre></td></tr></table></figure><p>上述命令建立了一个名为 <code>ttrss_network</code> 的 docker 通讯网络，并将 <code>ttrss</code> 容器和 <code>postgres</code> 容器都连接到这个网络内部。最后重启 Tiny Tiny RSS 容器。</p><h2 id="防火墙设置"><a href="#防火墙设置" class="headerlink" title="防火墙设置"></a>防火墙设置</h2><ul><li><p>CentOS</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">firewall-cmd --add-port=80/tcp --permanent</span><br><span class="line">firewall-cmd --add-port=443/tcp --permanent</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure></li><li><p>Ubuntu</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo ufw allow 80</span><br><span class="line">sudo ufw allow 443</span><br></pre></td></tr></table></figure></li></ul><h1 id="配置使用-Tiny-Tiny-RSS"><a href="#配置使用-Tiny-Tiny-RSS" class="headerlink" title="配置使用 Tiny Tiny RSS"></a>配置使用 Tiny Tiny RSS</h1><h2 id="登录使用"><a href="#登录使用" class="headerlink" title="登录使用"></a>登录使用</h2><p><img src="https://i.loli.net/2019/02/26/5c74e8c180d1d.png" alt="Tiny Tiny RSS"></p><p>安装完成后，访问你给镜像站点设置的域名即可进入 Tiny Tiny RSS 登陆页面。默认账号是 <code>admin</code>，密码是 <code>password</code>。登录后务必修改密码。Tiny Tiny RSS 的其他设置技巧，可以参阅少数派的<a href="https://sspai.com/post/41302" target="_blank" rel="noopener">这篇文章</a>。</p><h2 id="全文输出"><a href="#全文输出" class="headerlink" title="全文输出"></a>全文输出</h2><p>一些网站并未提供完整的全文 RSS 源，而只提供了文章的摘要内容，阅读起来十分不便。作为 RSS 的重度用户，跳转到网站进行阅读实在是浪费时间。遇到这样的 RSS 源，除了可以使用内置了 Mercury 全文输出功能的客户端（iOS 平台 Reeder、Unread 等主流 RSS 阅读器支持）以外，还可以为自己搭建的 Tiny Tiny RSS 安装插件以支持 Mercury 功能。<br>下面还是使用 HyperApp 来操作，一步到位。</p><h3 id="安装-Mercury"><a href="#安装-Mercury" class="headerlink" title="安装 Mercury"></a>安装 Mercury</h3><ol><li>转到商店页面。找到 <code>Docker Image</code> 然后选择服务器并且保存进入配置界面</li><li>请完全按照下图配置进行填写！</li></ol><table><thead><tr><th>应用设置名称</th><th>内容</th></tr></thead><tbody><tr><td>Image</td><td>wangqiru/mercury-parser-api</td></tr><tr><td>Options</td><td><code>-p 3000:3000</code></td></tr><tr><td>Command</td><td></td></tr><tr><td>Args</td><td></td></tr><tr><td>其他</td><td>所有其他设置均为空</td></tr></tbody></table><h3 id="防火墙设置-1"><a href="#防火墙设置-1" class="headerlink" title="防火墙设置"></a>防火墙设置</h3><ul><li><p>CentOS</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">firewall-cmd --add-port=3000/tcp --permanent</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure></li><li><p>Ubuntu</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo ufw allow 3000</span><br></pre></td></tr></table></figure></li></ul><h3 id="配置-Mercury-插件"><a href="#配置-Mercury-插件" class="headerlink" title="配置 Mercury 插件"></a>配置 Mercury 插件</h3><ol><li>登陆 Tiny Tiny RSS，进入偏好设置（Preferences） - 插件（Plugins），启用 mercury_fulltext 的插件</li><li>登陆 Tiny Tiny RSS，进入偏好设置（Preferences） - 信息源（Feeds） -  Mercury_fulltext settings (mercury_fulltext) 选项卡。填入 <code>http://你要给镜像站点的域名或IP地址:3000</code> ，保存配置</li></ol><h3 id="开始使用-Mercury"><a href="#开始使用-Mercury" class="headerlink" title="开始使用 Mercury"></a>开始使用 Mercury</h3><ol><li>首先正常订阅一个 RSS 源</li><li>在首页左侧导航或订阅源管理中找到需要获取全文的订阅源，点击编辑订阅源（Edit Feed）</li><li>进入编辑订阅源（Edit Feed）窗口中的插件（Plugins）选项卡，勾选 <code>Get fulltext via Mercury Parser</code></li></ol><p>设置完成后，Tiny Tiny RSS 将根据你的自定义设定，对特殊 RSS 源使用 Mercury 拉取全文内容后再生成 RSS 内容。这样可以摆脱客户端的限制，在任何客户端上都能直接浏览全文 RSS 的文章。</p><h1 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h1><ol><li><p>为何连接数据库的命令这么长？<br>之所以命令这么长是因为在使用 HyperApp 安装 <code>ttrss</code> 容器和 <code>postgres</code> 容器时没有为其指定容器的 name，所以必须通过查找其容器 ID 后再进行绑定。</p></li><li><p>为什么安装时不指定容器的 name？<br>指定容器的 name 可以方便连接数据库，但由于 HyperApp 是通过一定规则生成容器 name 从而对已安装的应用进行管理的，如果自定义了容器的 name，HyperApp 将无法正常识别到容器，安装应用后也会显示尚未安装。</p></li></ol><hr><p>参考链接：<br><a href="https://github.com/HenryQW/docker-ttrss-plugins" target="_blank" rel="noopener">Tiny Tiny RSS 容器镜像</a><br><a href="https://henry.wang/2018/04/25/ttrss-docker-plugins-guide.html" target="_blank" rel="noopener">A ttrss setup guide - Start your own RSS aggregator today</a><br><a href="https://sspai.com/post/41302" target="_blank" rel="noopener">如何搭建属于自己的 RSS 服务，高效精准获取信息</a><br><a href="https://www.hyperapp.fun/zh/advanced/docker-image-introduction.html" target="_blank" rel="noopener">Docker-image 介绍</a><br><a href="https://www.hyperapp.fun/zh/mirror.html" target="_blank" rel="noopener">超简单搭建常见 404 站点镜像</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;准备&quot;&gt;&lt;a href=&quot;#准备&quot; class=&quot;headerlink&quot; title=&quot;准备&quot;&gt;&lt;/a&gt;准备&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;VPS 需要先安装好 &lt;code&gt;docker-ce&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://itunes.apple.com/app/apple-store/id1179750280?pt=118260435&amp;amp;ct=guide&amp;amp;mt=8&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;HyperApp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;一个已经解析正确的域名（ping 验证）&lt;/li&gt;
&lt;li&gt;耐心。仔细。认真&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;HyperApp-服务端配置&quot;&gt;&lt;a href=&quot;#HyperApp-服务端配置&quot; class=&quot;headerlink&quot; title=&quot;HyperApp 服务端配置&quot;&gt;&lt;/a&gt;HyperApp 服务端配置&lt;/h1&gt;&lt;h2 id=&quot;安装-PostgreSQL&quot;&gt;&lt;a href=&quot;#安装-PostgreSQL&quot; class=&quot;headerlink&quot; title=&quot;安装 PostgreSQL&quot;&gt;&lt;/a&gt;安装 PostgreSQL&lt;/h2&gt;&lt;p&gt;虽然 HyperApp 提供了相应的 PostgreSQL 应用一键安装，但是由于安装 Tiny Tiny RSS 时无法与其衔接，所以一并使用 &lt;code&gt;Docker Image&lt;/code&gt; 方法进行安装。&lt;/p&gt;
    
    </summary>
    
      <category term="教程" scheme="https://acuario.xyz/categories/%E6%95%99%E7%A8%8B/"/>
    
      <category term="软件使用" scheme="https://acuario.xyz/categories/%E6%95%99%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8/"/>
    
    
      <category term="教程" scheme="https://acuario.xyz/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="Linux" scheme="https://acuario.xyz/tags/Linux/"/>
    
      <category term="docker" scheme="https://acuario.xyz/tags/docker/"/>
    
      <category term="HyperApp" scheme="https://acuario.xyz/tags/HyperApp/"/>
    
      <category term="Tiny Tiny RSS" scheme="https://acuario.xyz/tags/Tiny-Tiny-RSS/"/>
    
  </entry>
  
  <entry>
    <title>非常简单的Python3 HTTP服务</title>
    <link href="https://acuario.xyz/create-simple-http-server-with-python3/"/>
    <id>https://acuario.xyz/create-simple-http-server-with-python3/</id>
    <published>2019-02-26T06:35:09.000Z</published>
    <updated>2019-02-26T06:41:15.749Z</updated>
    
    <content type="html"><![CDATA[<p>多年前在<a href="http://weibo.com/haoel?s=6cm7D0" title="左耳朵耗子" target="_blank" rel="noopener">左耳朵耗子</a>的博客上看到<a href="https://coolshell.cn/articles/1480.html" target="_blank" rel="noopener">《非常简单的 PYTHON HTTP 服务》</a>一文，在急需建立 HTTP Server 的场合十分有用，比如临时分享文件之类。在 HTTP Server 访问的根目录下只需执行一行命令就能搞定：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ python -m SimpleHTTPServer</span><br></pre></td></tr></table></figure></p><p>但是随着 Python 2 逐渐被 Python 3 取代，上述命令无法继续使用。在 Python3 中没有 <code>SimpleHTTPServer</code>，而是直接使用<code>http.server</code> 即可。所以对应的 Python 3 命令是：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ python3 -m http.server</span><br></pre></td></tr></table></figure></p><p>默认开启的 HTTP Server 服务监听的是 8000 端口，使用时注意系统防火墙是否放行。如需使用其他端口，只需在命令末尾加上端口号即可，如使用端口 1234：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ python3 -m http.server 1234</span><br></pre></td></tr></table></figure></p><h1 id="后台运行"><a href="#后台运行" class="headerlink" title="后台运行"></a>后台运行</h1><p>上述 Python 运行的 HTTP 服务器必须前台运行命令，并实时输出 log，断开终端后自动停止服务。这时可以借助 <code>nohup</code> 命令使其后台运行：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ nohup python3 -m http.server &gt;&gt;/dev/null &amp;</span><br></pre></td></tr></table></figure></p><p>当然你也可以使用其他方法如 <code>screen</code> 等工具实现后台运行，再此就不赘述了。不过既然有更复杂的需要，那还是老老实实用 Nginx 吧。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;多年前在&lt;a href=&quot;http://weibo.com/haoel?s=6cm7D0&quot; title=&quot;左耳朵耗子&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;左耳朵耗子&lt;/a&gt;的博客上看到&lt;a href=&quot;https://coolshell.cn/a
      
    
    </summary>
    
      <category term="教程" scheme="https://acuario.xyz/categories/%E6%95%99%E7%A8%8B/"/>
    
      <category term="Linux" scheme="https://acuario.xyz/categories/%E6%95%99%E7%A8%8B/Linux/"/>
    
    
      <category term="教程" scheme="https://acuario.xyz/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="Linux" scheme="https://acuario.xyz/tags/Linux/"/>
    
      <category term="Python3" scheme="https://acuario.xyz/tags/Python3/"/>
    
      <category term="Python" scheme="https://acuario.xyz/tags/Python/"/>
    
      <category term="HTTP" scheme="https://acuario.xyz/tags/HTTP/"/>
    
      <category term="HTTP Server" scheme="https://acuario.xyz/tags/HTTP-Server/"/>
    
      <category term="Web服务器" scheme="https://acuario.xyz/tags/Web%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="运维" scheme="https://acuario.xyz/tags/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>Linux各种包管理换国内源</title>
    <link href="https://acuario.xyz/replace-package-source-to-china-mirror/"/>
    <id>https://acuario.xyz/replace-package-source-to-china-mirror/</id>
    <published>2019-01-18T13:48:40.000Z</published>
    <updated>2019-01-18T14:11:07.734Z</updated>
    
    <content type="html"><![CDATA[<p>在国外的机器上开发倒是没什么麻烦事，也不用操心这么多。但是由于众所周知的原因，在天朝可就麻烦多了，不想点法子的话下载依赖就够摸鱼一下午了。这么多包管理，不碰不要紧，一碰要狗命（单押x1 XD<br>干脆把手头用的这几个记一下，免得以后查来查去麻烦。</p><h1 id="一键换源脚本"><a href="#一键换源脚本" class="headerlink" title="一键换源脚本"></a>一键换源脚本</h1><p>写完 yum 和 apt 的部分才想起来，这种常见的东西应该是有脚本可以搞定的吧。找了下果然有<a href="https://www.oldking.net/697.html" target="_blank" rel="noopener">大佬</a>写好了的。<br>如果只是 Linux 软件包的话就用一个脚本搞定：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget -qO- git.io/superupdate.sh | bash</span><br></pre></td></tr></table></figure></p><p>其他包管理的换源反正也不复杂，就手动弄一下。</p><a id="more"></a><hr><h1 id="YUM"><a href="#YUM" class="headerlink" title="YUM"></a>YUM</h1><p>使用 <a href="https://opsx.alibaba.com/mirror" target="_blank" rel="noopener">阿里镜像</a> 作镜像源</p><ol><li>备份原配置文件 <code>$ mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</code></li><li><p>换源（注意 OS Version）</p> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># CentOS 6</span></span><br><span class="line"><span class="comment"># wget 方式获取</span></span><br><span class="line">$ wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-6.repo</span><br><span class="line"><span class="comment"># curl 方式获取</span></span><br><span class="line">$ curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-6.repo    </span><br><span class="line"></span><br><span class="line"><span class="comment"># CentOS 7</span></span><br><span class="line"><span class="comment"># wget 方式获取</span></span><br><span class="line">$ wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line"><span class="comment"># curl 方式获取</span></span><br><span class="line">$ curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br></pre></td></tr></table></figure></li><li><p>刷新 cache 生效 <code>$ yum makecache</code></p></li></ol><h1 id="APT"><a href="#APT" class="headerlink" title="APT"></a>APT</h1><p>使用 <a href="https://opsx.alibaba.com/mirror" target="_blank" rel="noopener">阿里镜像</a> 作镜像源</p><ol><li>备份原配置文件 <code>$ cp /etc/apt/sources.list /etc/apt/sources.list_backup</code></li><li>清空配置 <code>$ echo &quot;&quot; &gt; /etc/apt/sources.list</code></li><li>换源（注意按 OS Version 进行添加） <code>$ vim /etc/apt/sources.list</code> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Ubuntu 14.04.5 LTS</span></span><br><span class="line">deb https://mirrors.aliyun.com/ubuntu/ trusty main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.aliyun.com/ubuntu/ trusty main restricted universe multiverse</span><br><span class="line">deb https://mirrors.aliyun.com/ubuntu/ trusty-security main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.aliyun.com/ubuntu/ trusty-security main restricted universe multiverse</span><br><span class="line">deb https://mirrors.aliyun.com/ubuntu/ trusty-updates main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.aliyun.com/ubuntu/ trusty-updates main restricted universe multiverse</span><br><span class="line">deb https://mirrors.aliyun.com/ubuntu/ trusty-backports main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.aliyun.com/ubuntu/ trusty-backports main restricted universe multiverse</span><br><span class="line"></span><br><span class="line"><span class="comment"># Ubuntu 16.04</span></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial main</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial main</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-updates main</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates main</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial universe</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial universe</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-updates universe</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates universe</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-security main</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-security main</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-security universe</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-security universe</span><br><span class="line"></span><br><span class="line"><span class="comment"># Ubuntu 18.04(bionic)</span></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line"></span><br><span class="line"><span class="comment"># Debian 7.x (wheezy)</span></span><br><span class="line">deb http://mirrors.aliyun.com/debian/ wheezy main non-free contrib</span><br><span class="line">deb http://mirrors.aliyun.com/debian/ wheezy-proposed-updates main non-free contrib</span><br><span class="line">deb-src http://mirrors.aliyun.com/debian/ wheezy main non-free contrib</span><br><span class="line">deb-src http://mirrors.aliyun.com/debian/ wheezy-proposed-updates main non-free contrib</span><br><span class="line"></span><br><span class="line"><span class="comment"># Debian 8.x (jessie)</span></span><br><span class="line">deb http://mirrors.aliyun.com/debian/ jessie main non-free contrib</span><br><span class="line">deb http://mirrors.aliyun.com/debian/ jessie-proposed-updates main non-free contrib</span><br><span class="line">deb-src http://mirrors.aliyun.com/debian/ jessie main non-free contrib</span><br><span class="line">deb-src http://mirrors.aliyun.com/debian/ jessie-proposed-updates main non-free contrib</span><br><span class="line"></span><br><span class="line"><span class="comment"># Debian 9.x (stretch)</span></span><br><span class="line">deb http://mirrors.aliyun.com/debian/ stretch main non-free contrib</span><br><span class="line">deb-src http://mirrors.aliyun.com/debian/ stretch main non-free contrib</span><br><span class="line">deb http://mirrors.aliyun.com/debian-security stretch/updates main</span><br><span class="line">deb-src http://mirrors.aliyun.com/debian-security stretch/updates main</span><br><span class="line">deb http://mirrors.aliyun.com/debian/ stretch-updates main non-free contrib</span><br><span class="line">deb-src http://mirrors.aliyun.com/debian/ stretch-updates main non-free contrib</span><br><span class="line">deb http://mirrors.aliyun.com/debian/ stretch-backports main non-free contrib</span><br><span class="line">deb-src http://mirrors.aliyun.com/debian/ stretch-backports main non-free contrib</span><br></pre></td></tr></table></figure></li></ol><h1 id="pip-pip3"><a href="#pip-pip3" class="headerlink" title="pip/pip3"></a>pip/pip3</h1><h2 id="永久换源"><a href="#永久换源" class="headerlink" title="永久换源"></a>永久换源</h2><p>使用 <a href="https://opsx.alibaba.com/mirror" target="_blank" rel="noopener">阿里镜像</a> 作镜像源<br>在配置文件中添加配置项 <code>vim ~/.pip/pip.conf</code><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[global]</span><br><span class="line">index-url = https://mirrors.aliyun.com/pypi/simple/</span><br><span class="line"></span><br><span class="line">[install]</span><br><span class="line">trusted-host=mirrors.aliyun.com</span><br></pre></td></tr></table></figure></p><h2 id="临时换源"><a href="#临时换源" class="headerlink" title="临时换源"></a>临时换源</h2><p>在使用 pip/pip3 命令安装软件时，在命令中添加参数 <code>-i https://mirrors.aliyun.com/pypi/simple/</code><br>例如升级 pip 的命令为：<code>pip install -U pip -i https://mirrors.aliyun.com/pypi/simple/</code></p><h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><p>使用 <a href="http://www.docker-cn.com/registry-mirror" target="_blank" rel="noopener">Docker 中国</a> 作镜像源<br>一般情况下修改配置文件<code>$ vim /etc/docker/daemon.json</code></p><p>添加下面配置项：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://registry.docker-cn.com/&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后重启 docker deamon 即可<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ systemctl daemon-reload</span><br><span class="line">$ systemctl restart docker</span><br></pre></td></tr></table></figure></p><p>如果是通过 snappy（Ubuntu 16.04+）安装的 docker 的话，配置文件路径和重启命令都不同，配置内容一样：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /var/snap/docker/current/config/daemon.json</span><br><span class="line">$ snap restart docker</span><br></pre></td></tr></table></figure></p><p>运行命令<code>$ docker info</code>，查看其中的配置项是否正确：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Registry Mirrors:</span><br><span class="line"> https://registry.docker-cn.com/</span><br></pre></td></tr></table></figure></p><p><a href="https://lug.ustc.edu.cn/wiki/mirrors/help/docker" target="_blank" rel="noopener">Docker 镜像使用帮助 [LUG@USTC]</a></p><h1 id="Composer"><a href="#Composer" class="headerlink" title="Composer"></a>Composer</h1><p>使用 <a href="https://pkg.phpcomposer.com/" target="_blank" rel="noopener">Packagist</a> 作镜像源</p><h2 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h2><p>任意目录下执行下例命令即可：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ composer config -g repo.packagist composer https://packagist.phpcomposer.com</span><br></pre></td></tr></table></figure></p><h2 id="单个项目配置"><a href="#单个项目配置" class="headerlink" title="单个项目配置"></a>单个项目配置</h2><p>进入项目目录 <code>dir</code> 执行命令：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ composer config repo.packagist composer https://packagist.phpcomposer.com</span><br></pre></td></tr></table></figure></p><h1 id="NPM"><a href="#NPM" class="headerlink" title="NPM"></a>NPM</h1><p>使用 <a href="https://npm.taobao.org/" target="_blank" rel="noopener">淘宝 NPM 镜像</a> 作镜像源<br>使用淘宝 NPM 定制的 <a href="https://github.com/cnpm/cnpm" target="_blank" rel="noopener">cnpm</a> (gzip 压缩支持) 命令行工具代替默认的 <code>npm</code>:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>或者通过添加 <code>npm</code> 参数 <code>alias</code> 一个新命令:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">alias</span> cnpm=<span class="string">"npm --registry=https://registry.npm.taobao.org \</span></span><br><span class="line"><span class="string">--cache=<span class="variable">$HOME</span>/.npm/.cache/cnpm \</span></span><br><span class="line"><span class="string">--disturl=https://npm.taobao.org/dist \</span></span><br><span class="line"><span class="string">--userconfig=<span class="variable">$HOME</span>/.cnpmrc"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Or alias it in .bashrc or .zshrc</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">'\n#alias for cnpm\nalias cnpm="npm --registry=https://registry.npm.taobao.org \</span></span><br><span class="line"><span class="string">  --cache=$HOME/.npm/.cache/cnpm \</span></span><br><span class="line"><span class="string">  --disturl=https://npm.taobao.org/dist \</span></span><br><span class="line"><span class="string">  --userconfig=$HOME/.cnpmrc"'</span> &gt;&gt; ~/.zshrc &amp;&amp; <span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在国外的机器上开发倒是没什么麻烦事，也不用操心这么多。但是由于众所周知的原因，在天朝可就麻烦多了，不想点法子的话下载依赖就够摸鱼一下午了。这么多包管理，不碰不要紧，一碰要狗命（单押x1 XD&lt;br&gt;干脆把手头用的这几个记一下，免得以后查来查去麻烦。&lt;/p&gt;
&lt;h1 id=&quot;一键换源脚本&quot;&gt;&lt;a href=&quot;#一键换源脚本&quot; class=&quot;headerlink&quot; title=&quot;一键换源脚本&quot;&gt;&lt;/a&gt;一键换源脚本&lt;/h1&gt;&lt;p&gt;写完 yum 和 apt 的部分才想起来，这种常见的东西应该是有脚本可以搞定的吧。找了下果然有&lt;a href=&quot;https://www.oldking.net/697.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;大佬&lt;/a&gt;写好了的。&lt;br&gt;如果只是 Linux 软件包的话就用一个脚本搞定：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ wget -qO- git.io/superupdate.sh | bash&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;其他包管理的换源反正也不复杂，就手动弄一下。&lt;/p&gt;
    
    </summary>
    
      <category term="教程" scheme="https://acuario.xyz/categories/%E6%95%99%E7%A8%8B/"/>
    
      <category term="Linux" scheme="https://acuario.xyz/categories/%E6%95%99%E7%A8%8B/Linux/"/>
    
    
      <category term="教程" scheme="https://acuario.xyz/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="Linux" scheme="https://acuario.xyz/tags/Linux/"/>
    
      <category term="docker" scheme="https://acuario.xyz/tags/docker/"/>
    
      <category term="包管理" scheme="https://acuario.xyz/tags/%E5%8C%85%E7%AE%A1%E7%90%86/"/>
    
      <category term="换源" scheme="https://acuario.xyz/tags/%E6%8D%A2%E6%BA%90/"/>
    
      <category term="国内源" scheme="https://acuario.xyz/tags/%E5%9B%BD%E5%86%85%E6%BA%90/"/>
    
      <category term="镜像源" scheme="https://acuario.xyz/tags/%E9%95%9C%E5%83%8F%E6%BA%90/"/>
    
      <category term="npm" scheme="https://acuario.xyz/tags/npm/"/>
    
      <category term="composer" scheme="https://acuario.xyz/tags/composer/"/>
    
      <category term="yum" scheme="https://acuario.xyz/tags/yum/"/>
    
      <category term="apt-get" scheme="https://acuario.xyz/tags/apt-get/"/>
    
      <category term="pip" scheme="https://acuario.xyz/tags/pip/"/>
    
      <category term="pip3" scheme="https://acuario.xyz/tags/pip3/"/>
    
      <category term="一键换源" scheme="https://acuario.xyz/tags/%E4%B8%80%E9%94%AE%E6%8D%A2%E6%BA%90/"/>
    
      <category term="脚本" scheme="https://acuario.xyz/tags/%E8%84%9A%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>如何优雅地找资源</title>
    <link href="https://acuario.xyz/how-to-get-source/"/>
    <id>https://acuario.xyz/how-to-get-source/</id>
    <published>2018-11-09T17:16:52.000Z</published>
    <updated>2019-02-26T05:43:38.666Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2018/11/10/5be5c84f8f10e.jpg" alt></p><p>其实在网络上需要查找一些什么资源并不像我们想象的那样难。如果学会利用搜索引擎，再加上几个好用的、值得信赖的网站，基本上可以事半功倍。所以对于普通人来说，做一个「资源帝」其实只是需要一个手册和方法论的指导而已。<br>著名的资源帝<a href="http://shedingkong.lofter.com/tag/%E7%BD%91%E7%AB%99%E6%8E%A8%E8%8D%90" target="_blank" rel="noopener">设定控</a>提供的各类手册当然十分完美，但是我们实际用不到如此多的网站。除非你是松鼠症患者，有收集整理的心理刚需，否则资源手册的噪音大过实际效益。</p><p>这篇水分满满的文章也仅仅只是梳理一下笔者的资源搜索路径，按照几个主要的资源类型进行展开，顺便配上一些评（fei）论（hua），以供各位参考，基本上能搞定 80% 的书、影、音需求。</p><p>p.s. 关于文中的软件推荐，均以 Windows 为平台，暂未收录 macOS 相关软件。</p><a id="more"></a><h1 id="电子书"><a href="#电子书" class="headerlink" title="电子书"></a>电子书</h1><h2 id="网站"><a href="#网站" class="headerlink" title="网站"></a>网站</h2><ul><li><p><a href="http://www.mlook.mobi/" target="_blank" rel="noopener">mLook</a><br>mLook 可以应付绝大多数的电子书需求，但是<strong>已经关闭开放注册</strong>。</p></li><li><p><a href="https://sk.kindleshare.cn/" target="_blank" rel="noopener">KindleShare</a><br>电子书搜索引擎 KindleShare 也还是不错的。</p></li><li><p><a href="http://readfree.me" target="_blank" rel="noopener">readfree</a><br>readfree 是我在众多书签中发掘到的质量上乘的付费下载网站，充值 10￥可以下载 1k 次，或者靠自己上传书籍的下载量来获取下载次数。我搜了几本书都有资源，当作备用网站不妨一试。</p></li><li><p><a href="https://www.easysearch.com.tw/" target="_blank" rel="noopener">EasySearch</a><br>EasySearch 是<a href="https://www.ymdie.com/archives/32219" target="_blank" rel="noopener">港台电子书</a>的搜索引擎，支持搜索博客來、<a href="https://www.kobo.com/tw/zh" target="_blank" rel="noopener">乐天 Kobo</a>、<a href="https://readmoo.com/" target="_blank" rel="noopener">读墨 Readmoo</a>、Taaze、Google Play 的电子书商品信息，你可以在上述网站购买电子书，使用各平台的客户端进行阅读。如果你想在 Kindle 上阅读 Kobo 商城购买的电子书，你可以按照<a href="https://twitter.com/yhyy135/status/1028389615730917376" target="_blank" rel="noopener">这个教程</a>进行操作。</p></li><li><p>Telegram 频道<br>如果你使用 <a href="https://telegram.org/" target="_blank" rel="noopener">Telegram</a> 的话（已被封锁），这里提供几个分享电子书的 Telegram 频道：<br><a href="https://t.me/zebookpush" target="_blank" rel="noopener">kindle电子书读书会</a>：频道每天据群友请求推书。只推原版无损高质 kindle 电子书。需要书时，直接前往<a href="https://t.me/zebook" target="_blank" rel="noopener">Telegram 群组</a>求书即可。<br><a href="https://t.me/booksforeverybody" target="_blank" rel="noopener">书籍分享</a><br><a href="https://t.me/free_programming_books" target="_blank" rel="noopener">电子书支援计划_技术分享</a>：分享技术类书籍为主</p></li></ul><h2 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h2><ul><li><p><a href="https://calibre-ebook.com/" target="_blank" rel="noopener">Calibre</a><br>Calibre 是使用 Kindle 的人必备的软件，可以把 mobi、epub、awz3、txt、pdf 等各种格式的电子书进行转换。</p></li><li><p><a href="https://www.sumatrapdfreader.org/free-pdf-reader.html" target="_blank" rel="noopener">SumatraPDF</a><br>SumatraPDF 是我在 Windows 上主要使用的电子阅读器，软件体积很小，而且可以打开 mobi、epub、azw3，满足了我日常所需。使用时，建议将<code>菜单 - 设置 - 高级选项</code>内的 <code>EbookUI - UseFixedPageUI</code> 值设为 <code>true</code>，否则无法在阅读时选中文本。</p></li></ul><h1 id="音乐"><a href="#音乐" class="headerlink" title="音乐"></a>音乐</h1><p>好像已经毫无疑问地迈入流媒体时代了，很久没有再下载过 mp3 文件，然后耐心维护本地曲库了。除非实在喜欢的音乐不妨下载一份在本地备用。</p><h2 id="网站-1"><a href="#网站-1" class="headerlink" title="网站"></a>网站</h2><ul><li><p><a href="https://zaihua.io/music/" target="_blank" rel="noopener">在花音乐搜索神器</a><br>该音乐搜索引擎支持网易、QQ、酷狗、酷我、虾米、百度、一听、咪咕、荔枝、蜻蜓、喜马拉雅、全民 K 歌、5sing。搜索后可试听、下载。音乐品质未知。</p></li><li><p><a href="https://lai.yuweining.cn/music" target="_blank" rel="noopener">音乐搜索神器</a><br>看样式应该和上面那个网站差不多。该音乐搜索引擎支持网易、QQ、酷狗、虾米、百度、咪咕。搜索后可试听、下载。音乐品质未知。</p></li><li><p><a href="https://pan.baidu.com/" target="_blank" rel="noopener">百度云</a><br>百度云依旧是文件分享的聚集地，利用<a href="http://www.xilinjie.com/" target="_blank" rel="noopener">西林街</a>和<a href="http://www.panc.cc/" target="_blank" rel="noopener">胖次</a>进行资源搜索以后，多半可以找到自己需要的资源。当然这两个网盘搜索引擎<strong>不仅限于查找音乐资源</strong>。</p></li><li><p><a href="http://www.mlook.mobi/" target="_blank" rel="noopener">OppsU!</a><br>站内有大量网友分享的正版专辑文件，多以 iTunes 的专辑文件为主。当然也由于版权和一些众所周知的原因，该网站注册门槛非常高，只有每年特定时间才会开放注册。</p></li></ul><h2 id="软件-1"><a href="#软件-1" class="headerlink" title="软件"></a>软件</h2><ul><li><p><a href="https://music.163.com/" target="_blank" rel="noopener">网易云音乐</a><br>在民谣、电音、翻唱方面，网易云的资源还是比较丰富的，免费流播，付费下载，可备不时之需。想要下载网易云的音乐拷贝到其他设备上听，但是现在网易云的音乐有自己的 NCM 格式怎么办？不妨试试<a href="https://github.com/yoki123/ncmdump" target="_blank" rel="noopener">这个项目</a>的工具来去除音乐文件的保护，还原成正常的 mp3。</p></li><li><p><a href="https://www.spotify.com/" target="_blank" rel="noopener">Spotify</a><br>这是笔者目前主力使用的流媒体音乐平台。需付费（按区域选择不同，<a href="http://mts.io/projects/spotify-pricing/" target="_blank" rel="noopener">价格不同</a>），跨平台，曲库以非华语音乐为主，当然主流的华语音乐也够应付大多数需求。</p></li></ul><h1 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h1><h2 id="网站-2"><a href="#网站-2" class="headerlink" title="网站"></a>网站</h2><h3 id="电影"><a href="#电影" class="headerlink" title="电影"></a>电影</h3><ul><li><p><a href="http://yyets.com/" target="_blank" rel="noopener">人人字幕组</a><br>人人字幕组毫无疑问是国内数一数二的字幕组。字幕样式和翻译功底都算上乘。官网提供了各平台客户端的下载链接，以及相关网站的链接。</p></li><li><p><a href="http://www.zimuzu.io/" target="_blank" rel="noopener">人人影视资源下载站</a><br>下载站的网址非常好记：<code>zimuzu.io</code>。免费注册会员，每日签到进行升级，除特殊影片可能会有等级限制查看，其他正常资源一律免费提供下载链接，登录后即可查看下载链接。</p></li><li><p><a href="http://cili001.com/" target="_blank" rel="noopener">磁力站</a><br>由于众所周知的原因，一部分资源不能在人人影视资源下载站提供下载，甚至不能提供下载链接，所以磁力站作为第三方搜索引擎，其数据基本涵盖了所有人人影视新旧资源的下载链接。你可以在这里找到几乎所有在人人影视字幕组发布过的资源链接。</p></li><li><p><a href="http://www.dysfz.cc/" target="_blank" rel="noopener">电影首发站</a><br>该站提供大量电影下载链接，无需注册，完全免费，使用迅雷等下载工具即可正常下载。笔者主要用来下载国产电影，该站也提供其他影视资源。</p></li></ul><h3 id="美剧"><a href="#美剧" class="headerlink" title="美剧"></a>美剧</h3><ul><li><a href="http://www.zimuzu.io/" target="_blank" rel="noopener">人人影视资源下载站</a><br>人人字幕组除了提供含有中文字幕的电影下载之外，还有丰富的美剧资源。</li></ul><h3 id="纪录片"><a href="#纪录片" class="headerlink" title="纪录片"></a>纪录片</h3><p><a href="https://space.bilibili.com/22121599/#/" target="_blank" rel="noopener">哔哩哔哩-纪录片之家</a><br>哔哩哔哩站内有很多纪录片，而且很多视频的弹幕已经有野生翻译君助力。你可以在纪录片之家的 B 站首页进行查找，然后在线观看。</p><ul><li><p><a href="http://www.daolan.net/index.php" target="_blank" rel="noopener">道兰同好会</a><br>该站是一个纪录片译制论坛，主要译制 NHK 纪录片。</p></li><li><p><a href="https://kamonka.blogspot.com/" target="_blank" rel="noopener">NHK纪录片精选</a><br>NHK（日本放送协会）制作和播放的纪录片，由国内爱好者翻译制作，可直接下载，无需注册。P.S. 该网站已被审查封锁</p></li></ul><h3 id="动漫"><a href="#动漫" class="headerlink" title="动漫"></a>动漫</h3><ul><li><a href="http://share.dmhy.org/" target="_blank" rel="noopener">动漫花园</a><br>一个朋友介绍给我的追番站点。不过如果你是 ACG 人士，应该也不需要我过多介绍。</li></ul><h2 id="软件-2"><a href="#软件-2" class="headerlink" title="软件"></a>软件</h2><ul><li><p><a href="https://potplayer.daum.net/" target="_blank" rel="noopener">PotPlayer</a><br>万能播放器。没有它打不开的视频文件，如果有，那多半是文件坏了。笔者有且只用它作为视频播放工具。</p></li><li><p>百度云文件下载软件<br>众所周知百度云非 VIP 会员有下载限速。这里提供三款不限速的下载软件。为了避免怀孕，建议以自己的小号登录使用。笔者使用的是 PanDownload，非常好用，下载速度非常快，首推。<br><a href="http://pandownload.com/" target="_blank" rel="noopener">PanDownload</a><br><a href="http://www.speedpan.com/" target="_blank" rel="noopener">速盘</a><br><a href="https://github.com/proxyee-down-org/proxyee-down" target="_blank" rel="noopener">Proxyee Down</a></p></li></ul><p>暂时写这么多，如果你有什么好的推荐不妨在评论区留言交流。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2018/11/10/5be5c84f8f10e.jpg&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;其实在网络上需要查找一些什么资源并不像我们想象的那样难。如果学会利用搜索引擎，再加上几个好用的、值得信赖的网站，基本上可以事半功倍。所以对于普通人来说，做一个「资源帝」其实只是需要一个手册和方法论的指导而已。&lt;br&gt;著名的资源帝&lt;a href=&quot;http://shedingkong.lofter.com/tag/%E7%BD%91%E7%AB%99%E6%8E%A8%E8%8D%90&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;设定控&lt;/a&gt;提供的各类手册当然十分完美，但是我们实际用不到如此多的网站。除非你是松鼠症患者，有收集整理的心理刚需，否则资源手册的噪音大过实际效益。&lt;/p&gt;
&lt;p&gt;这篇水分满满的文章也仅仅只是梳理一下笔者的资源搜索路径，按照几个主要的资源类型进行展开，顺便配上一些评（fei）论（hua），以供各位参考，基本上能搞定 80% 的书、影、音需求。&lt;/p&gt;
&lt;p&gt;p.s. 关于文中的软件推荐，均以 Windows 为平台，暂未收录 macOS 相关软件。&lt;/p&gt;
    
    </summary>
    
      <category term="教程" scheme="https://acuario.xyz/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="教程" scheme="https://acuario.xyz/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="mp3" scheme="https://acuario.xyz/tags/mp3/"/>
    
      <category term="资源" scheme="https://acuario.xyz/tags/%E8%B5%84%E6%BA%90/"/>
    
      <category term="美剧" scheme="https://acuario.xyz/tags/%E7%BE%8E%E5%89%A7/"/>
    
      <category term="电影" scheme="https://acuario.xyz/tags/%E7%94%B5%E5%BD%B1/"/>
    
      <category term="资源帝" scheme="https://acuario.xyz/tags/%E8%B5%84%E6%BA%90%E5%B8%9D/"/>
    
      <category term="找资源" scheme="https://acuario.xyz/tags/%E6%89%BE%E8%B5%84%E6%BA%90/"/>
    
      <category term="电子书" scheme="https://acuario.xyz/tags/%E7%94%B5%E5%AD%90%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>回忆就像衣柜里的春夏秋冬</title>
    <link href="https://acuario.xyz/memory-of-Aug/"/>
    <id>https://acuario.xyz/memory-of-Aug/</id>
    <published>2018-09-06T14:33:56.000Z</published>
    <updated>2018-09-06T20:24:48.081Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2018/09/07/5b9159755c82a.png" alt="Electric July"></p><p>特别喜欢这张<a href="https://movie.douban.com/subject/26312156/" target="_blank" rel="noopener">电影</a>画面，或许是因为正好自己的经历和电影如此的相映成趣，好像自己就站在那个田野里，静静地看着远方。因为自己心里的那个人或许已经再没有办法陪伴在自己的身边，而自己也无力去攀上通向远方的断桥。</p><a id="more"></a><p>当阳光洒在脸颊和手臂上的时候，当雨水淋湿衣袖的时候，增添的有可能是温暖和冰冷的回忆，也有可能只是在博客文章里寥寥的几笔。温度的差异，提醒自己的不是谁喜欢着谁，而是那个当下，你真真切切地和谁在一起。因为有了不一样的经历，所以它才能够像是收在柜子里的衣服那样，任着自己的性子取出那些让自己喜欢的和不喜欢的，然后花点心思慢慢更衣。最后在别人眼里，看到的其实是自己想要让人看到的衣冠，而那些丑陋的行迹，终究只能自己一个人去思考与犹豫。</p><p>回忆就像衣柜里的春夏秋冬，那些久久没有临幸的外衣，渐渐生出了令人厌恶的霉点。因为家乡四季如春，没有令人难受的湿气，所以面对发了霉的东西慌了阵脚、不知所措，索性把它们一件一件摊开来，检视它们的每一个细节，然后一声叹息。挑三拣四后的思绪一团乱麻，索性全都扔进洗衣机，好好洗涤一番。</p><p>亦或是长了教训，把它们一件一件展开来，找个衣架挨个挂起来晾晒一番。却在这时候才发现那些经不住时间考验的回忆，已经开始泛黄，任凭我怎么漂白，依旧褪不去历史的影子。最怕的应该是心爱的那件回忆上，不知什么时候破了洞，已经再也没有办法补齐，只能任由它这样下去，或者再一声叹息，就这样将其丢弃。</p><p>朋友戏谑我说：</p><blockquote><p>你已经可以写“八月，又溜走了”</p></blockquote><p>我什么也没有说，多半不是因为我没法正面回应自己的拖延，而是因为自己心里的八月还没有结束。</p><blockquote><p>这个八月，我到底在做什么？</p></blockquote><p>我一遍遍这样问自己，发现其实心里的答案早就如此明晰，只是我不愿承认与接受而已。如果要认真解释的话，那多半是因为夏日初秋时分，我拥有了和电影里如出一辙的悸动与情愫。在这段感情里，我试着在探寻「自我」的意识与定义，就像听到的那期<a href="http://cxks.in/16?t=720" target="_blank" rel="noopener">播客</a>里说，<code>理解某一刻的情绪，或许不像解题目一样可以获得确定的答案；对某一个情绪的理解，最后可能是对情绪状态中对自我的关注，是一整幅拼图中的一个碎片。当我们关注到越来越多的碎片，我们就会越来越感受到自我</code>。我好像越发明白在感情中成长所指的意义——我们总是感谢一些人一些事，教会我们了什么道理，实际上在人与人的互动关系中，更多的是自我的体察与反思，最终得出或利己或利他的选择。当自己真真切切地失去的时候，才会比得到的时候更加透彻地领悟某些老生常谈的道理。于是说到底，<strong>有些道理，毕竟还是需要自己经历过的才会明白。在自己亲历之前，别人说再多次也不以为意。</strong></p><p>一个人的夜晚，身体已经十分疲惫，却还是不愿睡去。不同于以往的无聊与烦躁，现时最不愿面对的，是睡眠带来的安稳——平日渴求的安逸，没什么值得被记忆和记录的；而现在的我却如此害怕闭上双眼进入梦乡的时候，回忆的气泡慢慢破碎，等我醒来的时候一个也不剩。在我拼命想要去写下些什么东西的时候，思来想去的结果，除了矫情，好像也难以道出什么心情。在旁人看来无所谓的事情，终究只有自己才知道它放在心里的什么位置。经常想起马伊俐在<a href="https://v.youku.com/v_show/id_XMjkxODg4MDM1Ng==.html" target="_blank" rel="noopener">《圆桌派》</a>里对「作」的举例，于是在自己身上发现了印证——<em>永不安分，永不知足，永远折腾，永远没完</em>。也许是自己还没长大吧，不过又有谁心甘情愿地承认自己是巨婴罢？</p><p>九月已经过去了几个白昼，可对于我来说，八月才刚刚结束。</p><p>八月，与其说是溜走了，不如说，是我还没来得及告别，就只能眼睁睁看着他的背影渐渐远去。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2018/09/07/5b9159755c82a.png&quot; alt=&quot;Electric July&quot;&gt;&lt;/p&gt;
&lt;p&gt;特别喜欢这张&lt;a href=&quot;https://movie.douban.com/subject/26312156/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;电影&lt;/a&gt;画面，或许是因为正好自己的经历和电影如此的相映成趣，好像自己就站在那个田野里，静静地看着远方。因为自己心里的那个人或许已经再没有办法陪伴在自己的身边，而自己也无力去攀上通向远方的断桥。&lt;/p&gt;
    
    </summary>
    
      <category term="随笔" scheme="https://acuario.xyz/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="https://acuario.xyz/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>V2ray配置Telegram的MTProto协议</title>
    <link href="https://acuario.xyz/set-mtproto-for-telegram-via-v2ray/"/>
    <id>https://acuario.xyz/set-mtproto-for-telegram-via-v2ray/</id>
    <published>2018-08-15T22:58:28.000Z</published>
    <updated>2019-01-18T13:32:34.072Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>V2ray 是继 ShadowSocks 后又一个蓬勃发展、欣欣向荣的代理利器，目前支持多种传输协议。现在可以使用它设置 MTProto 协议，搭建 Telegram 的内部代理服务器，实现无需打开其他突破网络封锁的客户端即可正常通讯的目的。</p><h1 id="V2ray-的代理原理"><a href="#V2ray-的代理原理" class="headerlink" title="V2ray 的代理原理"></a>V2ray 的代理原理</h1><p>v2ray 的代理原理和配置项的关系如下图：<br><img src="https://i.loli.net/2018/08/15/5b73c180d5ef0.png" alt="v2ray原理图及配置关系"></p><p>p.s.上图为 v2ray v4.0 之前的代理原理图。v2ray v4.1+ 合并了输入输出配置项：</p><ul><li><code>inbounds = inbound + inboundDetour</code></li><li><code>outbounds = outbound + outboundDetour</code></li><li>为便于理解，你可以将上图 <code>inbound</code>、<code>inboundDetour</code> 视为各种不同的代理方式，全部定义在新版配置文件的 <code>inbounds</code> 配置项中，<code>outbounds</code> 亦同理。</li></ul><a id="more"></a><p>v2ray 的的配置格式都是相同的，理论上不区分客户端和服务端，<code>客户端和服务器通用一种形式，只是实际的配置不一样。</code>v2ray 配置文件的配置项有以下几个部分：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;log&quot;: &#123;&#125;,</span><br><span class="line">  &quot;api&quot;: &#123;&#125;,</span><br><span class="line">  &quot;dns&quot;: &#123;&#125;,</span><br><span class="line">  &quot;stats&quot;: &#123;&#125;,</span><br><span class="line">  &quot;routing&quot;: &#123;&#125;,</span><br><span class="line">  &quot;policy&quot;: &#123;&#125;,</span><br><span class="line">  &quot;reverse&quot;: &#123;&#125;,</span><br><span class="line">  &quot;inbounds&quot;: [],</span><br><span class="line">  &quot;outbounds&quot;: [],</span><br><span class="line">  &quot;transport&quot;: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们重点关注其中传入、传出和路由配置，即：<code>inbounds</code>、<code>outbounds</code>、<code>routing</code>。</p><ul><li><code>inbounds</code> 和 <code>outbounds</code> 定义多种不同的传入、传出方式。</li><li>自定义不同的传入和传出方式，然后用路由（<code>routing</code>）进行绑定，就可以实现定制化代理。</li></ul><p>下面举几个栗子：</p><ol><li>仅用来突破网络封锁：客户端 <code>outbounds</code> 设置一个 VMess 协议传出、服务端 <code>inbounds</code> 设置一个 VMess 协议传入，服务端 <code>outbounds</code> 设置一个 freedom 方式传出。这样，客户端与服务端将使用 VMess 协议加密流量突破网络封锁，而服务端访问被封锁网站没有特殊加密，使用正常网络传输协议。</li><li>服务端配置其他的传入、传出协议实现不同于的传输需求。比如服务端添加一组 MTProto 协议对应的传入、传出方式，即可以使用 Telegram 内部代理。或者使用 shadowsocks 协议传入，再用 vmess 协议传出给下一个服务端，实现多级代理等等。</li><li>多种传入、传出方式可以共存，打上标签（<code>tag</code>）以后，用路由（<code>routing</code>）实现自由绑定，所以仅使用 v2ray 就可实现多种方式的传输需求，比如同时支持 VMess、Shadowsocks、MTProto、Socks 协议进行通讯。v2ray 支持<a href="https://www.v2ray.com/chapter_02/02_protocols.html" target="_blank" rel="noopener">多种协议</a>，发挥你的创造性去使用吧。</li></ol><h1 id="MTProto-的配置"><a href="#MTProto-的配置" class="headerlink" title="MTProto 的配置"></a>MTProto 的配置</h1><p>v2ray 的<a href="https://www.v2ray.com/chapter_02/protocols/mtproto.html" target="_blank" rel="noopener">官方手册</a>提供了不完整的样例配置</p><h2 id="传入代理"><a href="#传入代理" class="headerlink" title="传入代理"></a>传入代理</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line">"inbounds": [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"tag"</span>: <span class="string">"tg-in"</span>,</span><br><span class="line">    <span class="attr">"port"</span>: <span class="number">443</span>,</span><br><span class="line">    <span class="attr">"protocol"</span>: <span class="string">"mtproto"</span>,</span><br><span class="line">    <span class="attr">"settings"</span>: &#123;</span><br><span class="line">      <span class="attr">"users"</span>: [&#123;<span class="attr">"secret"</span>: <span class="string">"b0cbcef5a486d9636472ac27f8e11a9d"</span>&#125;]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>传出代理：<br><figure class="highlight"><table><tr><td class="code"><pre><span class="line">"outbounds": [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"tag"</span>: <span class="string">"tg-out"</span>,</span><br><span class="line">    <span class="attr">"protocol"</span>: <span class="string">"mtproto"</span>,</span><br><span class="line">    <span class="attr">"settings"</span>: &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>路由：<br><figure class="highlight"><table><tr><td class="code"><pre><span class="line">"routing": &#123;</span><br><span class="line">  "rules": [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"field"</span>,</span><br><span class="line">      <span class="attr">"inboundTag"</span>: [</span><br><span class="line">        <span class="string">"tg-in"</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">"outboundTag"</span>: <span class="string">"tg-out"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="配置文件示例"><a href="#配置文件示例" class="headerlink" title="配置文件示例"></a>配置文件示例</h1><p>这里提供一个主要使用 VMess 协议突破网络封锁，额外支持 MTProto 协议实现 Telegram 内部代理的配置文件，其中：</p><ul><li>服务端设置的端口务必加入服务器防火墙例外，否则可能无法正常连接</li><li>UUID 可以在 <a href="https://www.uuidgenerator.net/" target="_blank" rel="noopener">Online UUID Generator</a> 网站生成</li><li>用户密钥可以使用命令 <code>openssl rand -hex 16</code> 生成</li></ul><h2 id="服务端配置"><a href="#服务端配置" class="headerlink" title="服务端配置"></a>服务端配置</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"inbounds"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"port"</span>: 填写 VMess 协议监听端口,</span><br><span class="line">      ,</span><br><span class="line">      "protocol": "vmess",</span><br><span class="line">      "settings": &#123;</span><br><span class="line">        "clients": [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">"id"</span>: <span class="string">"填写UUID，不要去掉引号"</span>,</span><br><span class="line">            <span class="attr">"level"</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">"alterId"</span>: <span class="number">64</span></span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"tag"</span>: <span class="string">"tg-in"</span>,</span><br><span class="line">      <span class="attr">"listen"</span>: <span class="string">"0.0.0.0"</span>,</span><br><span class="line">      <span class="attr">"port"</span>: 填写 MTProto 协议监听端口,</span><br><span class="line">      <span class="attr">"protocol"</span>: <span class="string">"mtproto"</span>,</span><br><span class="line">      <span class="attr">"settings"</span>: &#123;</span><br><span class="line">        <span class="attr">"users"</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">"secret"</span>: <span class="string">"填写用户密钥，不要去掉引号"</span></span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  "outbounds": [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"protocol"</span>: <span class="string">"freedom"</span>,</span><br><span class="line">      <span class="attr">"settings"</span>: &#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"protocol"</span>: <span class="string">"blackhole"</span>,</span><br><span class="line">      <span class="attr">"settings"</span>: &#123;&#125;,</span><br><span class="line">      <span class="attr">"tag"</span>: <span class="string">"blocked"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"tag"</span>: <span class="string">"tg-out"</span>,</span><br><span class="line">      <span class="attr">"protocol"</span>: <span class="string">"mtproto"</span>,</span><br><span class="line">      <span class="attr">"settings"</span>: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  "routing": &#123;</span><br><span class="line">    "rules": [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"field"</span>,</span><br><span class="line">        <span class="attr">"ip"</span>: [</span><br><span class="line">          <span class="string">"geoip:private"</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">"outboundTag"</span>: <span class="string">"blocked"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"field"</span>,</span><br><span class="line">        <span class="attr">"inboundTag"</span>: [</span><br><span class="line">          <span class="string">"tg-in"</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">"outboundTag"</span>: <span class="string">"tg-out"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Telegram-内部代理设置"><a href="#Telegram-内部代理设置" class="headerlink" title="Telegram 内部代理设置"></a>Telegram 内部代理设置</h2><p>将服务器的 IP 地址、配置的 MTProto 协议监听端口、用户密钥填入 Telegram 的代理设置中即可使用。或者使用构造链接在 Telegram 内部打开进行自动设置：</p><p><code>https://t.me/proxy?server=服务器IP地址&amp;port=服务器MTProto协议监听端口&amp;secret=用户密钥</code></p><h2 id="客户端配置"><a href="#客户端配置" class="headerlink" title="客户端配置"></a>客户端配置</h2><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"inbounds"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"port"</span>: <span class="number">1082</span>,</span><br><span class="line">      <span class="attr">"listen"</span>: <span class="string">"127.0.0.1"</span>,</span><br><span class="line">      <span class="attr">"protocol"</span>: <span class="string">"socks"</span>,</span><br><span class="line">      <span class="attr">"settings"</span>: &#123;</span><br><span class="line">        <span class="attr">"auth"</span>: <span class="string">"noauth"</span>,</span><br><span class="line">        <span class="attr">"udp"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">"ip"</span>: <span class="string">"127.0.0.1"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"outbounds"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"protocol"</span>: <span class="string">"vmess"</span>,</span><br><span class="line">      <span class="attr">"settings"</span>: &#123;</span><br><span class="line">        <span class="attr">"vnext"</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">"users"</span>: [</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="attr">"alterId"</span>: <span class="number">64</span>,</span><br><span class="line">                <span class="attr">"security"</span>: <span class="string">"auto"</span>,</span><br><span class="line">                <span class="attr">"id"</span>: <span class="string">"填写 UUID 与服务端一致，不要去掉引号"</span></span><br><span class="line">              &#125;</span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">"port"</span>: 服务端 VMess 协议监听端口,</span><br><span class="line">            <span class="attr">"address"</span>: <span class="string">"服务端 IP 地址，可以去掉引号"</span>,</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"protocol"</span>: <span class="string">"freedom"</span>,</span><br><span class="line">      <span class="attr">"settings"</span>: &#123;&#125;,</span><br><span class="line">      <span class="attr">"tag"</span>: <span class="string">"direct"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"protocol"</span>: <span class="string">"blackhole"</span>,</span><br><span class="line">      <span class="attr">"settings"</span>: &#123;&#125;,</span><br><span class="line">      <span class="attr">"tag"</span>: <span class="string">"blocked"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"routing"</span>: &#123;</span><br><span class="line">    <span class="attr">"rules"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"field"</span>,</span><br><span class="line">        <span class="attr">"ip"</span>: [</span><br><span class="line">          <span class="string">"geoip:private"</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">"outboundTag"</span>: <span class="string">"direct"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"field"</span>,</span><br><span class="line">        <span class="attr">"domain"</span>: [</span><br><span class="line">          <span class="string">"geosite:cn"</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">"outboundTag"</span>: <span class="string">"direct"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"log"</span>: &#123;</span><br><span class="line">    <span class="attr">"loglevel"</span>: <span class="string">"warning"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>参考链接：<br><a href="https://www.v2ray.com/chapter_02/01_overview.html" target="_blank" rel="noopener">v2ray 配置文件格式</a><br><a href="https://ntgeralt.blogspot.com/2018/08/telegramv2raymtproxy.html" target="_blank" rel="noopener">让 Telegram 连接 V2ray 服务端 mtproxy 协议</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;V2ray 是继 ShadowSocks 后又一个蓬勃发展、欣欣向荣的代理利器，目前支持多种传输协议。现在可以使用它设置 MTProto 协议，搭建 Telegram 的内部代理服务器，实现无需打开其他突破网络封锁的客户端即可正常通讯的目的。&lt;/p&gt;
&lt;h1 id=&quot;V2ray-的代理原理&quot;&gt;&lt;a href=&quot;#V2ray-的代理原理&quot; class=&quot;headerlink&quot; title=&quot;V2ray 的代理原理&quot;&gt;&lt;/a&gt;V2ray 的代理原理&lt;/h1&gt;&lt;p&gt;v2ray 的代理原理和配置项的关系如下图：&lt;br&gt;&lt;img src=&quot;https://i.loli.net/2018/08/15/5b73c180d5ef0.png&quot; alt=&quot;v2ray原理图及配置关系&quot;&gt;&lt;/p&gt;
&lt;p&gt;p.s.上图为 v2ray v4.0 之前的代理原理图。v2ray v4.1+ 合并了输入输出配置项：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;inbounds = inbound + inboundDetour&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;outbounds = outbound + outboundDetour&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;为便于理解，你可以将上图 &lt;code&gt;inbound&lt;/code&gt;、&lt;code&gt;inboundDetour&lt;/code&gt; 视为各种不同的代理方式，全部定义在新版配置文件的 &lt;code&gt;inbounds&lt;/code&gt; 配置项中，&lt;code&gt;outbounds&lt;/code&gt; 亦同理。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="教程" scheme="https://acuario.xyz/categories/%E6%95%99%E7%A8%8B/"/>
    
      <category term="软件使用" scheme="https://acuario.xyz/categories/%E6%95%99%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8/"/>
    
    
      <category term="教程" scheme="https://acuario.xyz/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="VPS" scheme="https://acuario.xyz/tags/VPS/"/>
    
      <category term="v2ray" scheme="https://acuario.xyz/tags/v2ray/"/>
    
  </entry>
  
  <entry>
    <title>七月，已经溜走了</title>
    <link href="https://acuario.xyz/july-is-gone/"/>
    <id>https://acuario.xyz/july-is-gone/</id>
    <published>2018-07-31T15:51:12.000Z</published>
    <updated>2018-07-31T16:01:20.716Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2018/07/31/5b608698e9572.jpg" alt="joined-screenshot4.jpg"><br>(IMG Source: <a href="https://en.wikiquote.org/wiki/Fight_Club_%28film%29" target="_blank" rel="noopener">Fight Club</a>)</p><p>我好像已经忘了这个月是怎么开始的了。我试着从屏幕右下角的几个数字向前回溯，然后试图写下点什么无病呻吟的东西，用来给「时间」这把尺子多加一个叫做七月的刻度。</p><a id="more"></a><p>一直不愿意在自己的博客上写一些日记随笔类的东西，心想着这些胡思乱想被人看到那会是一件多么羞耻的事情。就像微信里的朋友圈，满足的不过是 Peeping Tom 们内心的窥私欲——在通讯录里上下滑动，看到某个叫做 A 的家伙，想起他对于自己的身份，想起自己是在何时何地因为什么机缘巧合与其相识，然后点开他的朋友圈。如果他没有使用那个叫做「仅显示最近三日的状态」的奇技淫巧的话，他一点一滴想被我窥视的东西，便毫不掩饰地冲入我的视野——哎哟喂，这兔崽子活得也还不错哦。哦哟，这龟孙子也不过如此嘛……<br>可能会感慨一下谁谁谁的人模狗样，或者某某某的人生轨迹。但这不过是给自己一个「这世界不过如此」的充分条件罢了，看似充满信息的摄入，不过只能留下转身便忘了的回忆罢了。</p><p>把过去一个月的经历写出来，然后琢磨着能有什么联系和想法，慢慢想到了几个关于「改变」的印记：</p><ul><li>人生第二次搬家——明显的空间尺度上的「改变」</li><li>看了一场城市历史摄影展——明显的时间尺度上的「改变」</li><li>闲逛了一场动漫展——不同次元间的「改变」</li><li>一本<a href="https://books.google.com.hk/books?id=QGw7DwAAQBAJ&amp;dq=%E5%87%BA%E8%B3%A3%E4%B8%AD%E5%9C%8B&amp;hl=zh-CN" target="_blank" rel="noopener">政治类书籍</a>，但是写读书笔记时又在考虑要不要做自我审查——在言论身份上的「改变」</li><li>一本<a href="https://book.douban.com/subject/30217599/" target="_blank" rel="noopener">推理小说</a>——虚构与现实间的「改变」</li></ul><p>在此之前，从没有用这样的视角去观察过周遭的事情，也就想到了关于「时间」的概念。一次和 <a href="https://twitter.com/ibingfei" target="_blank" rel="noopener">Andy</a> 聊天提及<a href="https://zh.wikipedia.org/zh/%E7%8F%BE%E4%BB%A3%E6%80%A7" target="_blank" rel="noopener">现代性</a>中时间概念对人类社会和自我的影响，自然地顺着这条思维路径去反思自身行为方式和目的。<br>也就是最近一段时间的事情，突然想买一个卡片相机拍 vlog，至少「拥有一个 DV 去记录动态的生活和经历」是几年前代购清单上的一笔，只是取代 DV 位置的已不再是新款的 DV，而是一个又一个样貌趋同的被称之为 smart phone 的 stupid phone。<br>「你到底是为了什么想去拍？是为你自己，还是为了分享？」<br>「你留恋的，是那时那人那地的瞬间，还是春夏交替间的变换？」<br>若不是因为「时间」这人类社会定义的概念，若不是我们每个人拥有的时间观念，我们又怎会产生种种臆想？<br>我很难坚定地去说做的事情完完全全为了自己，因为如此廉价的分享渠道和人类自身的社会性，在冥冥中促使我们更想把自己的所思所想所记录传达出去，让自己的文字和思想通过如此低效的方式转移到另外的地方去。</p><p>尼采在《查拉图斯特拉如是说》里这样写道：</p><blockquote><p><strong><strong>我教你们超人</strong></strong>。人是应该被超越的东西。你们做了什么来超越他呢？<br>一切生物至今都创造了超越自己的东西：你们要做这大潮中的落潮，宁可回到动物那里去，也不愿意超越人类？<br>对人类来说，猿猴是什么？一个笑柄或是一个痛苦的耻辱。对超人来说，人也一样：一个笑柄或是一个痛苦的耻辱。<br>你们完成了由虫到人的过程，你们身上许多东西仍然是虫。你们曾经是猿猴，现在人比任何一只猿猴更是猿猴。<br>但是你们当中的最聪明者，也不过是植物与幽灵的矛盾体与共同体。但是我吩咐你们变成幽灵还是植物？<br>瞧，我教你们超人！</p></blockquote><p>如果说，hack myself 也算是一种趋近「超人」的行径的话，那么我相信<a href="https://zh.wikipedia.org/wiki/%E5%BE%B7%E7%88%BE%E6%96%90%E7%AE%B4%E8%A8%80" target="_blank" rel="noopener">德尔斐箴言</a>里那句 <code>Be Yourself or Know Yourself. （认识你自己。）</code> 也许会是我一辈子值得探索和作答的考题。</p><p>我还没落笔，七月，已经溜走了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2018/07/31/5b608698e9572.jpg&quot; alt=&quot;joined-screenshot4.jpg&quot;&gt;&lt;br&gt;(IMG Source: &lt;a href=&quot;https://en.wikiquote.org/wiki/Fight_Club_%28film%29&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Fight Club&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;我好像已经忘了这个月是怎么开始的了。我试着从屏幕右下角的几个数字向前回溯，然后试图写下点什么无病呻吟的东西，用来给「时间」这把尺子多加一个叫做七月的刻度。&lt;/p&gt;
    
    </summary>
    
      <category term="随笔" scheme="https://acuario.xyz/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="https://acuario.xyz/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>《拜訪革命》读书笔记</title>
    <link href="https://acuario.xyz/the-portrait-of-revolution-clip/"/>
    <id>https://acuario.xyz/the-portrait-of-revolution-clip/</id>
    <published>2018-06-06T14:04:25.000Z</published>
    <updated>2018-06-06T14:11:58.781Z</updated>
    
    <content type="html"><![CDATA[<p>第 11 頁<br>似曾相識的開端，踏出截然不同的路徑，兩厢對照，變革的命運更加清晰。對當權者而言，如果開放可以延續權力，他便鬆手，如果鐵腕能夠穩固執政，他便握拳。然覆手雲雨之間，時機、地理、民意、外力，多少偶然互相撞擊，革命的軌道像雲霄飛車一樣不知道下一秒的起落。</p><hr><p>第 12 頁<br>許多美國人不關心世界，連護照都沒有，但這並不妨礙美國成為頭號自由之邦。但是否正因如此，以強烈排外為面貌的右翼風潮，近些年在美國、在歐洲急速抬頭？外交政策的制訂雖是精英之事，若大眾與精英之間嚴重脫節，英國脫歐、川普上台之類的事情就會一再震驚世界。</p><a id="more"></a><hr><p>第 13 頁<br>「走到某處邊界，總想看看，邊界背後是什麼，於是一路走下去。」</p><hr><p>第 20 頁<br>我好奇地追問篤信神明的尼泊爾人，為何支持不信宗教的「毛澤東主義」。「哦，不，這沒有關係，他們為國家做好事。」私營旅行社的庫馬拉說，毛派改變了窮苦大眾的命運，他押寶毛派主導的政府將帶來新的穩定、新的生意。</p><hr><p>第 21 頁<br>紅色到來之前，尼泊爾經歷了血色。<br>一九九六年起，普拉昌達領導毛派武裝與政府展開長達十年的內戰，造成約一萬三千人死亡，兩萬多人逃離家園，超過八百人失蹤。<br>有西方記者稱毛派武裝曾在加德滿都街頭射殺不服從命令的計程車司機，而他們雇傭十六歲以下的娃娃兵，也不是什麼秘密。萬幸，毛派最後放棄武力進占加德滿都， 一紙協議，國人止血。</p><hr><p>第 36 頁<br>整個尼泊爾百分之八十以上的人務農，其中一半人口掙扎在聯合國劃定的貧困線以下。土地掌握在極少數世襲地主手中，耕者衹賺取微薄的酬勞。</p><hr><p>第 42 頁<br>「兩伊戰爭對伊朗，相當於中國的朝鮮戰爭。」一名常駐當地的中國記者分析說，都是新生政權第一次遭遇對外戰爭，必傾性命一搏。何梅尼曾經流亡伊拉克宗教聖地納吉夫。迫於伊朗國王壓力，伊拉克總統薩達姆·海珊(Saddam Hussein)逐他出境。雖轉投巴黎，如魚得水，但革命成功後，何梅尼沒有忘記海珊落井下石，而海珊更惦記著在鄰國政權更迭時乘虛而入。</p><hr><p>第 44 頁<br>巴勒維國王的父親禮薩廢除了面紗。這位騎兵出身的將軍不以伊斯蘭教為生活準則，相信伊朗的出路在於全面西化。二十世紀初，東方文明國度或主動或被動，認可現代化道路的面貌就是西方化告別面紗，就是告別過去與落後。<br>二十世紀七〇年代，在反對巴勒維國王的抗議中，許多城市婦女主動包上頭巾——不是因為贊同伊斯蘭生活方式，而是表達對王權的不滿和對宗教女性的同情。但是她們沒有料到，推翻王權之後戴不戴面紗不再是一個選項——底層宗教熱情釋放出來，鋪天蓋地呼應何梅尼政教合一的設想。</p><hr><p>第 45 頁<br>我在伊朗的時候，趕上巴西世界盃半決賽。伊朗人酷愛足球，但是政府有令，不得聚眾圍觀。二〇〇九年事件以來，「人多」是個敏感詞，足球也變得政治起來。二〇一〇年南非世界盃，伊朗國家隊球員手腕上纏著綠絲帶上場，表達對穆薩維的支持。但既然政府有令，大部分伊朗人就在家關起門看電視。</p><hr><p>第 48 頁<br>艾哈邁迪內賈德借助打擊社會自由風氣，擴大了革命衛隊和巴斯基的權力，著裝要求更嚴，言論受到空前壓制。愛國主義也被用來挑釁反對者。他積極尋回兩伊戰爭遺骸，特別安置在青年男女偷偷約會的公園和大學校園，多次引發抗議。德黑蘭人說，別人「種樹」，艾哈邁迪內賈德「種烈士」。</p><hr><p>第 49 頁<br>「死亡、監禁、抓捕、毆打，所有這些耗盡了我們的能量。」達拉說。即便是二〇一一年阿拉伯抗議風潮驟起，伊朗也沒有重演綠色革命。桌上其他人紛紛點頭。人心疲累，現在學生們在一起不大談論政治。</p><hr><p>第 50 頁<br>紮小辮的舞台劇導演，為這過時的藝術家髮型蹲過幾天監獄。最近他排了一齣劇，按達拉的說法，「分明是舞蹈」，但不能叫「舞蹈」，因為伊斯蘭政府嚴禁跳舞。小辮改了名字叫「韻律活動」，希望掩人耳目通過審查。當他們議論政府管制的愚蠢時，臉上會露出興奮，你可以感受到他們的苦悶和無奈，但也夾雜一絲遊戲的快樂。</p><hr><p>第 51 頁<br>美國人介紹達拉時愛說：「這個姑娘為了信仰勇敢鬥爭，終於抵達美利堅。」可是達拉並不認同自己是什麼「英雄」，只是「出現在錯誤的地點（被便衣聽到電話）」。以美國公民身分出入德黑蘭並非難事，她說，好多伊朗毛拉（mullah）政客、富商的孩子都持有美國護照，國籍不會成為不能入境的理由，只要你「不惹事」。</p><ul><li>毛拉泛指精通伊斯蘭神學與律法的學者。</li></ul><hr><p>第 51 頁<br>玫瑰園正式竣工還是在兩伊戰爭之後，但「商場」概念的引入者，卻是末代國王巴勒維。他希望借此打擊巴札商人與伊斯蘭教士的勢力。「巴札」指的是中世紀以來中亞、北非的集市，不僅僅是貿易場所，更是當地商人、手工製造者和銀行（或借貸者）的一張關係網。在伊朗，巴札控制著國內三分之二的批發銷售，也把持著本地毯子和堅果的出口。巴札商人自然不喜歡外國商品進來競爭。國際封鎖傷害了伊朗産品外銷，但實際效果又保護了巴札商人在國內的壟斷。<br>幾個世紀以來，巴札商人捐錢給教士，教士們負責將伊斯蘭教義解釋得有利於他們的生意和生活模式。很多清真寺就建在巴札裡面。「金錢與教義」結盟，在一八九一年發起「菸草抗議」，抵制吸食英國商人專營的水菸，在一九〇五年參與立憲革命，削弱國王特權。而一九七九年反對國王的革命中，這種聯盟的效果更是決定性的。</p><hr><p>第 53 頁<br>走私在今天伊朗經濟的比重難以計算。後來我漸漸發現， iPhone 手機在德黑蘭很普遍，街上還有蘋果專賣店，彷彿整個從美國加州鑽地道大搖大擺地走了進來。店員穿的也是藍色 T 恤，胸前懸掛白色卡片。但誰都知道，蘋果和伊朗尚未「建交」。倒賣外國産品的走私生意，經手者很可能是掌握特權的革命衛隊，也可能跟巴札商人有關。錢，令政治界線模糊，利益圖譜變得複雜。</p><hr><p>第 54 頁<br>「你想不到他們會託我從美國帶什麼。」達拉每次回國，朋友們點名要的是「真的星巴克紙杯、原裝可口可樂」。玫瑰園商場有店鋪賣仿製的星巴克馬克杯，被當作高檔工藝品擺在黑絲絨軟墊上展出。而伊朗的可口可樂，來自一九七九年美國人落跑時留下的配方和工廠。「見過世面」的米夏講了一個更好笑的故事：他在義大利的時候，接待過父親的同事和他的兒子。這對伊朗父子每天都點名要吃麥當勞。「我勸他們義大利菜好吃，但他們只想吃麥當勞。」一次去鄉村，沒有麥當勞，不得不吃了一回當地餐。伊朗父子承認非常美味，可是第二天回到城裡，他們又要求吃麥當勞。米夏很生氣，當真實世界攤開在眼前，伊朗老鄉竟執著尋找臆想中的那一個。他們對那個世界的想像相當狹隘，縮小到美國，縮小到美國流行文化，縮小到起士漢堡。</p><hr><p>第 55 頁<br>現在，商場二樓正對何梅尼和哈米尼畫像的地方，貼著「免費無線上網」。幾乎所有人都能嫻熟地使用捷克產的翻牆軟體，越過政府在網際網路上設置的障礙，連最高領袖本人都在「被遮罩」的海外社交媒體上開了帳號。技術的發展似乎站在了反抗者這一邊，但當局並不打算放棄。如果沒有特殊軟體，直接在伊朗網際網路上搜索西方歌曲、電影或敏感政治，都會被立即連結到「伊斯蘭政府網站」的主頁。有時你覺得伊朗人與外面的世界就隔了一層紙，但那層紙是鐵打的。</p><hr><p>第 57 頁<br>何梅尼的學生和長期追隨者拉夫桑賈尼（Akbar Hashemi Rafsanjani），成了哈米尼的第一任總統，被稱為「伊朗鄧小平」。在許多發展中國家，「鄧小平」是「市場經濟啟動者」的代名詞。兩伊戰後百廢待興，拉夫桑賈尼推出兩個「五年計劃」，對超過一千家國營企業實行私有化。伊朗出現了股票市場、自由貿易區，農業國家開始向工業化轉變。</p><hr><p>第 62 頁<br>達拉鬥爭經驗不足，米夏更像是在抗議洗禮中長大。在德黑蘭藝術大學念書時，他崇拜一個高大壯實的學長——差不多有兩公尺高。米夏說起來的時候，還要向上仰望。學長是政治活躍分子。一天午餐，學長突然來到食堂，說不要吃今天的肉，那是國王時代就存在冰箱裡的。肉怎麼可能保存三十年？學長拿出從食堂偷來的一條牛後腿， 一看印章，真是巴勒維時代的。不管怎麼說，大家發現那天午餐的味道確實古怪。學長號召絕食，敲盤子繞著校園遊行。堅持三天，校方道歉承諾改善伙食。那一次，米夏看到了反抗的力量。</p><hr><p>第 69 頁<br>在他記憶中，綠色革命的結束，不僅僅因為政府的鐵腕鎮壓，還因為「抗議者和政府都懼怕國家動盪，上下一起停了」。<br>也許我流露了出些許驚訝，他接著說：「伊朗人和中國人一樣害怕國家動盪。」雷拉茲曾經是一家國有企業廠長，很早就到廣州考察過，對中國這些年的情況很熟悉。他仰慕中國經濟成就，十年前就預言中國應該在國際關係中領頭。</p><hr><p>第 77 頁<br>賈維爾笑了：「這真得怪他們。」他在我的筆記本上畫了一個「馬斯洛需求層次金字塔」，頂層是「自我成就」，最底層是「呼吸、食物、性、住房、健康」。他在「性」上劃了個叉：「我們的政權非常聰明，管住人最基本的需求，於是我們滿腦子就剩下這些，其他什麼都不想了。」<br>伊朗禁止公開戀愛。儘管女人戴面紗、男女授受不親等伊斯蘭習俗，在一九七九年革命之前就在伊朗社會存在，但是革命之後才寫進法律，出動風紀警察監管。性禁忌還常常與政治聯繫在一起。異議者不管做了什麼，對他們的譴責首先跟性醜聞扯上關係，並迫使他們向公眾懺悔。「我們的傳統文化還是比較保守， 一提『性醜聞』，大家馬上覺得這是個壞人。」賈維爾說。<br>性有時還比政治更危險。賈維爾有一本喬治·歐威爾《一九八四》——這本書刻畫了一個處處受到監管的虛擬社會，在伊朗翻譯並出版的波斯文版，刪去了幾處溫斯頓與茱麗葉溫存的性描寫，其他都保留了下來。</p><hr><p>第 80 頁<br>當地朋友說反美標語不只我看到的這些，還有直白樸實些的，比如「我們把美國踩在腳下」等等。但終究沒有我想像中滿街「反美話語的海洋」。十多年前伊朗學者搞過一次民意調查，百分之七十四受訪者願意跟美國談判，百分之六十四支持跟美國復交。結果，組織調查的人被關起來了。<br>伊朗的「性禁忌」常跟「西方文化滲透」聯繫在一起。何梅尼說：「公共場合男女混雜，是外國人的陰謀，用來瓦解穆斯林青年的意志。」「外國」很多時候單指美國。</p><hr><p>第 82 頁<br>賈維爾始終沒找到「百分之三十五的性壓抑」數據的出處。倒是伊朗議會在二〇一四年夏天，發佈一份八十二頁正式調查報告，承認百分之八十伊朗未婚女性有男友，中學生談戀愛都十分普遍。受訪的一萬四千兩百名學生中，百分之十七承認同性取向。本地媒體對這份報告不做討論，我是在英國《經濟學人》雜誌網站上讀到的。</p><hr><p>第 83 頁<br>地鐵隧道又深又廣，戰時也可作防空洞。末代國王時期做了規劃，承包給一家法國公司，可還沒動工，革命就爆發了，於是被迫擱置下來，直到伊斯蘭共和國也生出現代交通的煩惱，國王時代的地鐵設計圖才被翻出來，請中國長春和上海的公司來參與建設。</p><hr><p>第 97 頁<br>什葉派與遜尼派的分歧，概括來說，就是先知穆罕默德歸真之後，誰有資格成為繼任者。什葉派推崇先知的女婿阿里。阿里遇刺，他的兒子胡笙全家也遭主流派伏擊，慘遭滅門。此後什葉派無論從人數還是影響力，一直處於弱勢，演化出一套自己的信仰與智慧，與遜尼派有共識，也有差異。「胡笙的血」、千年的冤屈和復仇，構建了什葉派的情感共同體。薩法維王朝立什葉為國教， 一個原因是為了對抗強大的鄂圖曼帝國，與那裡的遜尼派切割。但立教之初，伊朗國內教法學家不夠，要從敘利亞、黎巴嫩借來，填充清真寺和學校。</p><hr><p>第 117 頁<br>第納爾是目前世界上許多國家的貨幣名稱，但幣值各不相同。此稱呼源自古羅馬帝國的銀幣Denarius。</p><hr><p>第 118 頁<br>一九二〇年，英國人取得對伊拉克的委任統治，預見到統治成本太高，只要了十年委任期（美軍或許早該料到自己的駐紮期限）。英國人臨走前劃定伊拉克、科威特邊境，以各自的椰棗林終點為界。結果當天夜裡，伊拉克、科威特兩邊都開始瘋狂補種椰棗樹。邊界爭議，正是海珊後來入侵科威特的理據。</p><hr><p>第 123 頁<br>伊拉克軍警打算驅散抗議者，不是因為集會內容，而是因為事先沒有申請。伊拉克新憲法賦予公民「集會、抗議的自由」，但必須提前向內政部申請，以便佈置警力，維持秩序。我向薩拉丁求證這件事，他說審批程序不是特別複雜，如今，抗議議員、抗議政府，上街遊行喊口號，理論上並不困難，但有些行動註定不會被批准，比如二〇一一年受到「阿拉伯之春」影響，伊拉克當地遜尼派抗議馬利基政府，還是遭到了軍警拘捕打壓。<br>「跟我說說，言論自由了有什麼好處？」<br>沒想到，這一問薩拉丁竟哀傷起來：「我們說什麼都行，但解決不了問題。」<br>「那沒有行嗎？」<br>「我想只會更糟。重要的是，今天每個伊拉克人看待自己不同了。」</p><hr><p>第 126 頁<br>美軍已經撤走，再不見灰綠色迷彩。十年治後，巴格達地面上看不出明顯的美國痕跡。雖然美式速食在中東非常普遍，但巴格達沒有麥當勞。所有人相信，它開張的第一天會被炸成「ground zero」（核爆點，亦指「九一一 」廢墟） 。一般餐館裡依舊沒有咖啡，只提供「伊拉克茶」，阿拉伯人愛喝的紅茶。<br>但是你也會看到，很多伊拉克人用最新款蘋果手機。由於免稅（或者走私），這裡的售價跟美國本土幾乎一樣。初次見面，我問美聯社攝影師穆罕默德，能不能找張巴格達全圖。「誰還用紙質地圖，用 Google 地圖吧。」他邊說邊在蘋果手機上給我示範，「伊拉克用的全是美國衛星，上美國網站快著呢。」</p><hr><p>第 132 頁<br>在東方，強權仍然受到推崇。而那些憎恨強權的，往往只是憎恨自己沒有成為強權。</p><hr><p>第 134 頁<br>西元8世紀阿拔斯王朝的「外文翻譯局」智慧宮，據說遺址仍在，但參觀要事先向文化部申請，拿著鑰匙開門進去。當時，在阿拉伯人主持下，外族人和新進穆斯林把無數希臘著作翻譯成阿拉伯文，無意中為後來的歐洲文藝復興留存了火種。但是，阿拉伯人對希臘著作的翻譯有選擇，取捨標準是教育性，或者說實用性。所以，他們孜孜不倦地在哲學和科學書籍中尋找真理，卻懶得理會希臘詩歌、戲劇和歷史。最遭忽視的，是地理和政治。有學者認為，就在這裡，伊斯蘭與西方現代文明的分野出現了：亞里斯多德的大部分作品都被翻譯，但巴格達的阿拉伯人禁止引進他的《政治學》。這本書論述了國家的性質，統治者與被統治者的關係。這個概念沒有釐清，導致伊斯蘭至今沒有做到政教分離。<br>一本書的缺失，阻礙了中東民主化進程，這個說法未免誇張。曾經向歐洲輸出文明的伊拉克。如今迎來了美國人的 nightclub，卻還沒有真正的民主。「現代性孕育穩定，但現代化過程卻滋生動亂」，杭廷頓的後半句，恰恰是今日中東、今日伊拉克的現實。</p><hr><p>第 139 頁<br>中國在伊拉克的大型計畫很難招到本地工程師。高級技工集中在巴格達，不願離開家人去外省。而中國工人們，無一不是跋涉兩萬多公里，把家人留在身後。<br>在伊拉克的中國人，幾乎人人背負這樣的故事，無論使館官員，還是建築工人。中國駐伊拉克使館，全館上下衹有大使夫人一名異性。常駐當地的一對中國記者夫婦，辦公室擺著兒子一歲時的全家福，而他現在已經兩歲，由親戚照料。<br>人人都以暫時犧牲換個好一點的將來。為了將來，眼前什麼是可以犧牲的呢——自由？歡樂？親情？愛情？青春？矛盾的是，這些犧牲，往往是為了家庭的共同未來，而放棄的，首先是與家人共處的歡愉。中國人的幸福，似乎不在眼前。<br>外國媒體常常感慨，中國人好像「怪物」，不惜抛家捨命。我向一名在伊拉克工作三年的中國企業領導提起這種評論，他不否認：「我也認為這樣不好，因為是被迫的。但是，過去三十年，中國能夠實現超常發展，必定因為有人付出了代價。」</p><hr><p>第 154 頁<br>跟這裡的中國人交談，發現他們大多喜歡杜拜，而吸引他們留下來的，首先是免稅、物質豐富，其次是不談政治。淑容結合中西醫之長，在這裡已行醫九年。問她在杜拜找到了什麼，答：「自由。她的前半生在希臘和美國度過，這個回答令我疑惑：「美國和希臘沒有自由嗎？」「不一樣，在美國，病人走進我的診所，我都得考慮一下他是民主黨還是共和黨，話別說錯了，而杜拜的政治氣氛太弱了。」在她看來，遠離政治，才是自由。</p><hr><p>第 195 頁<br>艾明大學畢業時打定主意不在政府系統工作，「因為沒有『關係』」。他說，在國家部委或國營企業找份好工作，首先要在複雜的資格考試中獲得高分。但他認識一些「不知道怎麼可能考及格」的同齡人，捧到金飯碗。「『背景』比能力更重要，進去之後也要憑關係上去。」所以他選擇留在民營企業——爸爸工作的醫藥公司。<br>「國家富裕了，但錢都到了執政黨口袋裡。」艾明抱怨正義發展黨的「關係網」把持經濟利益。<br>眼下他打算跟幾個朋友創業，做電信資料服務，儘管這跟他的化工系學位不搭界。土耳其電信被國營資本和大財團壟斷，我小心翼翼問艾明，涉足這個領域是不是得「認識什麼人」？他難為情地笑了：「哈哈，當然。」他的「關係」來自反對黨。我也笑了，人們跟「關係」的關係常常很複雜。</p><hr><p>第 197 頁<br>父親說話平和。他認為每個家庭成員的看法因記憶而不同。六十八歲的外婆經歷過土耳其最動盪的時期，上世紀九〇年代庫德人四處製造恐怖襲擊，二十多年來造成四萬人死亡。七、八〇年代，土耳其左右兩派政黨爭權，街頭每天發生劫掠、燒殺。自凱末爾的政黨一九五〇年輸掉選舉以來，土耳其一直由不同黨派組成的聯合政府經營，分分合合，風波不止，直到正義發展黨拿下議會半數以上席位， 一黨包攬政府，才穩定下來。外婆這般年紀的人，自然珍惜這十來年的好日子。<br>這讓我想起，母親是土耳其人的英國女記者阿勒夫·斯科特（Alev Scott）寫過一個細節：今天伊斯坦堡治安很好，但土耳其人對「亂」的恐懼根深蒂固。她看見房東執意把木製百葉窗換成鋁合金的，忍不住笑出來，「好像夏天裹著棉被」。但是只有經歷過動盪的人，才能理解這份恐懼。<br>父親親歷了一九八〇年政變，確切來說，是軍隊鎮壓學生反政府行動，傳言數萬名大學生慘死，但這在土耳其仍是個禁忌話題，確切數字不詳。所以當艾明走向蓋齊公園，父親就知道政府不會忌憚動武，跟上去保護兒子，卻終究沒有讓女兒去現場。博拉薩到現在都生爸爸的氣。<br>艾明和妹妹打記事起，大部分時間生活在厄多安時代。他們經歷的土耳其，既沒有亂過，也沒有窮過，通過衛星頻道網際網路，他們的生活跟歐洲年輕人零距離。艾明幾個月後要去奧地利，跟我的那位朋友周遊。二〇〇一年的經濟危機只是小插曲，博拉薩說「根本不記得」。她無法感念厄多安的好處，衹討厭他侵犯「個人自由」——比照歐洲各國， 一個政府搞好經濟不是理所應當嗎？「這個老傢伙怎麼不明白，我們是不一樣的人？」如果說厄多安開創了富強的土耳其，他卻認不出富強起來的土耳其人。</p><hr><p>第 199 頁<br>土耳其三十年來的經濟發展，成就了人們對命運的不同選擇。即便是一家人，有的到大城市發展，有的留在農村。整個國家在進步，不同人群的物質差異在縮小，但生活方式和精神世界的差異並沒有消失，當他們見面時，這種差異就更明顯。</p><hr><p>第 206 頁<br>道別艾明一家，我深感不安，外婆可能會反感這個外來者挑起家庭爭論。沒想到，合影的時候，她一隻手暖暖圈住我後腰，歡迎我下次再來。爸爸說，家裡經常爭論，「才是民主」。<br>「看來你家裡，外婆是唯一會投票給厄多安當總統的人了？」我問艾明。他開「爸爸公司的車」送我回酒店。「不見得。」小夥子狡黠一笑。上次地方選舉時，他身在外地不能投票，外婆替他去了投票站，以自己的名義投給反對黨。外婆說，未來不是她的，是外孫的，要聽從他的選擇。</p><hr><p>第 217 頁<br>托克維爾在《舊制度與大革命》中有這麼一句結論：「對一個糟糕的政府來說，最危險的時刻，是它開始了改革。」他認為，路易十六時期的法國實際上比之前更富裕、更開明，可是革命發生的時候，往往不在人民生活越來越壞的年頭，相反，是在人們發現暴政壓力減少、鐵鉗慢慢鬆開的契機——他們開始相信，自己有能力推翻暴政。</p><hr><p>第 260 頁<br>我眼前出現了更大的圖景：沙烏地阿拉伯給塞西政府十倍於美國的援助，拉攏埃及。卡達與沙烏地阿拉伯是對頭，接收與埃及現政權勢不兩立的穆兄會青年。這兩個國家都坐在從天而降的巨大能源財富上，隱隱的不安敦促著它們尋求長久的政治影響力。上一次，阿巴斯和瓦利德相逢在國家內部融合的舞台上，眼下，他們又出現在地區角力的棋盤上。這盤棋上所謂的「外來勢力」，主角不再是西方，而是同為阿拉伯族裔的鄰居們。從這個意義上說，大概有邊界有競爭，「外部勢力」就不會消亡吧。</p><hr><p>第 274 頁<br>革命沒有發生在埃及經濟陷入困難的時候，相反，恰恰是在埃及人經濟條件改善、對自身權利也愈加關注的階段。陳舊的統治結構遭遇新的變化時，如摧枯折腐。<br>二〇一一年二月十一日傍晚，我在拉姆西斯酒店房間傳稿，窗外傳來潮水般的掌聲和歡呼——不像是抗議。打開電視一看：穆巴拉克下台了！我和攝影師趕緊奔出去，立刻被歡慶的隊伍裹挾，我對著鏡頭說話時，竟被旁邊的人拉起手跳舞， 一面埃及國旗覆蓋了鏡頭。我們搭車去穆巴拉克總統府，司機居然不收錢：「為了革命！」他打了個勝利的手勢後，消失在狂歡的夜裡。沒有人到拉姆西斯酒店鬧事。人們主動清理垃圾，維持交通。十天後，在我離開時，沒有聽說任何打砸事件。<br>持續動盪打擊了旅遊、出口、外資幾乎所有行業，二〇一一年以來，埃及經濟發展急劇減緩，與革命爆發的前一年相比，多了一百三十萬失業者，其中近七成是持有高校畢業證的年輕人。各種街頭運動中的死亡人數，超過了二〇一一年的「倒穆」運動。</p><hr><p>第 279 頁<br>卡薩姆的妻子原本默默坐在牆角，這時開始高聲譴責穆兄會禍亂國家，她斬釘截鐵地說：「『一二五』不是真正的民眾革命，『六三〇』才是！」過去三年，兩個日子對埃及人尤為重要：二〇一一年一月二十五日，要求穆巴拉克下台的遊行爆發；二〇一二年六月三十日，軍方出手鎮壓穆斯林兄弟會， 一星期後逮捕了第一位民選總統莫爾西。然而，埃及人對這兩個日子的定義卻迥然不同：前一天，另外一個埃及人告訴我，「六三〇」是假民眾之名的兵變，「一二五」才是「純潔的革命」。不同定義，未必出自對穆兄會的好惡，而是每個人對錯綜局面的不同解讀。</p><hr><p>第 284 頁<br>波蘭歷史學家亞當·米奇尼克（Adana Michnik）說過，革命有兩個階段，第一為了自由，第二為了權力。第一階段煥發出人性最好最純潔的一面，第二階段卻釋放出壞的一面。</p><hr><p>第 291 頁<br>自一七九八年拿破崙在埃及登陸以來，歐美影響像一把利刃，不斷地塑造著中東，打磨出一個現代社會的模樣，但也留下不少硬傷（如殖民者不合理的邊界劃分） 、更不用說揮之不去的心靈創痛至今縈繞阿拉伯人、伊朗人、土耳其人的問題還是， 一種曾經燦爛的文明如何面對強盛的西方？</p><hr><p>第 292 頁<br>幾百年來，各種「主義」試圖為伊斯蘭文明復興找到一條出路。但二〇一一年發生的變革，卻沒有意識形態主宰。它也不像是關於「哪一種制度更適合」的嚴密論證，而是一聲樸素的生活要求：「別人有的，我也要：自由、公正、尊嚴。」</p><hr><p>第 302 頁<br>滿眼領導人畫像這道風景線，利比亞有，突尼西亞、埃及、巴林、敘利亞、葉門……最近如多米諾骨牌一樣發生騷亂的國家都有。畫中領導人或微笑或沉思，只是眼睛都不會平視地上的民眾。目光高於觀看者的角度，令他們顯得深邃，總是知道民眾不知道的事情。只可惜那些密佈的畫像，更像是江湖術士的符咒，關鍵時刻竟然失靈，埃及人只用了十八天，就扳倒了穆巴拉克，貼了三十多年的畫像一夜隨風去。從街道，從教室，從餐廳，從超市，從藥房，他都剛剛離去，「穆巴拉克橋」、「穆巴拉克地鐵站」立時換了名字。<br>二〇〇八年金融海嘯的時候，有人半開玩笑地提出「星巴克理論」——星巴克咖啡館越多的地方，遭受這輪危機衝擊的情況越嚴重。理由是，星巴克分店往往靠近金融街、房産交易中心，而銀行倒閉、房產泡沫正是這次危機的導火線。如此說來二〇一一年刮起的中東變革海嘯，是否也見到了一個「畫像理論」？領導人畫像頻密的地方，局勢註定不穩。因為通街畫像的本質是「少數人統治多數人」的模式，正是此番民間怒潮所指。<br>伊斯蘭教本來不容忍「畫像」、「造像」等一切有形的裝飾。清真寺裡絕對見不到人形圖案。教義認為，真主無形，因此無所不在。<br>但利比亞人向領袖致敬，有一句特別用語：「真主、格達費、利比亞，其他什麼都不是。」把領導人與真主並論，在穆斯林世界非常罕見，更何況「格達費」排名真主之後，國家之前。在一些虔誠的宗教人士眼中，格達費甚至是一個狂妄的異教徒。的黎波里一場足球賽後，離開賽場的人們曾湧上街頭，拍手高歌「格達費不是穆斯林」。滿眼領導人畫像，看似一個又一個神話，其實無關宗教，強調的是凡人在地上的統治。</p><hr><p>第 305 頁<br>比利時攝影師布魯諾告訴同行們，他無意中進入過穆薩新聞團隊辦公室，裡面沒人，辦公桌上攤著格達費畫像，還有寫了一半的遊行標語。同一天下午，新聞部組織記者去市中心廣場採訪示威民眾，布魯諾見過的畫像和標語就出現在那裡。不僅如此，「示威民眾」都是可携式的，可以出現在記者團所到的任何地方。新聞部大巴載著記者去往二百公里外的米蘇拉塔（Misrata）， 一輛小型巴士如影隨形，玻璃窗背後是標語、綠旗，乘客正是多名市中心「民眾」，準備出現在米蘇拉塔。中途休息，記者與他們相逢一笑，荒謬到極點，反成娛樂。</p><hr><p>第 309 頁<br>獨裁政權特徵之一，是給維護統治的「體制內」人員支付高於體制外民眾的收入，以此維繫忠誠。一旦這種好處喪失，就可能瓦解維護獨裁的體系。看似銅牆鐵壁的舊制，放大看來漏洞百出，崩潰起來也是一朝之事。</p><hr><p>第 313 頁<br>利比亞全稱為「大阿拉伯利比亞人民社會主義民眾國」（The Great Socialist People’s Libyan Arab Jamahiriya）。「民眾國」（Al-Jamahiriyyah）是格達費上校憑空造出來的一個阿拉伯詞彙，他認為百分之五十一壓倒百分之四十九的民主選舉最不合理，利比亞只能搞全民主政。根據中國社科院西亞非洲所研究員殷罡的考察，全民主政是這樣實施的：全國數千「人民委員會」構成地方管理機構，牽頭人不是選舉産生，而是「推舉」出來的，「遇有不同意見，不能決定時，要深入討論，直至達成一致」。偏偏湊巧的是，「一致達成的意見」，每次都把重要部門歸於格達費的心腹掌控。<br>二十世紀八〇年代，格達費武力鎮壓班加西起義。一九九六年，阿布·薩利姆監獄抗爭，三小時內一千兩百七十名政治犯被殺。所謂「協商達成一致」，不過是獨裁者「用一批聽話的人民換掉另一批不聽話的人民」而已。<br>「全民主政」的招牌下，組建政黨會以「叛國罪」論處。沒有政治光譜可以安放異議，民眾的訴求只剩下了擁戴或憎惡格達費統治。於是，推翻格達費的革命， 一上來也成了一群民眾壓倒另一群民眾。</p><hr><p>第 322 頁<br>歷史學家認為， 一個國家政治與經濟的運作效率，往往與掌權者在位時間呈反比。體系內若有超越個人的制度，可以減少「時間」的影響，但是如果沒有約束個人或集體長期把持利益的行為，終究會產生負面效應。石油大國利比亞，腐敗指數遠高於非洲鄰國。首都街道坑坑窪窪，統治者無心治理。<br>真正維繫「卡里斯馬」統治的是什麼呢？秘密警察、武裝鎮壓。有數據說，利比亞百分之十至十五的人負責向政府彙報百姓言行——全民噤聲顯而易見，當政府發言人安排記者到某地採訪，幾次有人在我們耳邊飛快扔下一句「格達費不好」後，即刻走遠。對待反對者，格達費絕不手軟，公開處刑或在電視上直播血淋淋的畫面。另一邊，親格達費派別、部落又往往得到莫大的好處，比如利比亞中部格達費家鄉地區，人們感念政府福利周全，口口聲聲喊效忠上校。「卡里斯馬」有兩隻手， 一隻是神一般的感召，另一隻則是魔一般的恐嚇。<br>答案也許稍嫌諷刺。突尼西亞與埃及恰恰因為統治者留下一線公共空間，令怒火有管道表達，而不致走火。穆巴拉克統治時期，民眾有權在可控範圍內和平示威。換句話說，透過非暴力手段表達訴求，埃及人並不陌生。<br>相反，格達費統治下的利比亞，不存在表達公共意見的平台。他對異議者鐵腕鎮壓，反對派銘記的只有「血債血償」。更壞的消息是，世界「理性抗爭」組織統計一九四〇年至二〇〇六年全球暴力及非暴力鬥爭，結果顯示，暴力革命即便成功，五年內達至民主的先例只有百务之五，但百分之四十一的非暴力鬥爭最終過渡到民主政治，而「十年內再爆發內戰的可能」，前者高出一倍。格達費身亡之後，利比亞境內暴力不止，令人擔憂理論成讖。</p><hr><p>第 332 頁<br>《後美國時代》（The Post American World）作者法里德·札卡瑞亞（Fareed Zakaria）、在早年另一本書《自由的未來》（The Future of Freedom）中，首先把這種現象稱作「不自由的民主」（illiberal democracy）。真正的民主是個套餐，不僅有顯而易見的選舉，還得有配套的司法獨立、權力監督、言論自由、集會自由、信仰自由、私產保護等等。這些總稱為「自由」（liberty）的護航措施有比較隱蔽的彈性，不像選舉那樣，「有還是沒有」一望便知。<br>中文裡的「自由」，常讓人想起「無拘無束」，甚至「無法無天」、「隨心所欲」，而札卡瑞亞在這裡講的「自由」恰恰相反，是一套細緻縝密的法律保障。有了這番保障，選票才有價值。可惜的是，札卡瑞亞慨歎，「以選舉為特徵的民主」橫掃全球，「自由」卻還只在西方徘徊。</p><hr><p>第 346 頁<br>飛機降落，全體乘客鼓掌，慶賀平安抵達。這似乎是非常西方的習慣。</p><hr><p>第 349 頁<br>「看，俄羅斯的源頭。」伊萬指了指廣場中心雕像，拍拍心口，「基輔是俄羅斯的母親。」雕像是傳說中建立基輔的四兄妹，名字首字連在一起拼成「基輔」的拉丁寫法。<br>古代俄羅斯人的第一個政治活動中心在基輔。十三世紀蒙古入侵，俄羅斯人棄守基輔一路向北。先是 Vladmimir-na-Klaizarn，然後是莫斯科，十八世紀終於落腳在聖彼得堡。<br>烏克蘭與俄羅斯的歷史，就是歷史學家打架的歷史。在俄羅斯看來，烏克蘭沒有歷史，它是十九世紀德國、奧地利為了削弱俄羅斯搗鼓出來的一個「概念」。可是俄羅斯又把基輔當作自己的「母親」，說自己的祖先是最早在基輔建都的羅斯國王。羅斯統治的地區也叫瓦良格，就是烏克蘭賣給中國那艘航母的名字。</p><hr><p>第 353 頁<br>「你要是有孩子，希望他們在哪裡接受教育呢？」「當然是俄羅斯。我們的考試叫考試，美國那種只能叫測驗，太簡單了……聽我說，俄羅斯有油，中國有錢，我們應該聯合起來，西方就不敢這麼橫了。」<br>「告訴我，到底什麼是俄羅斯的靈魂？」<br>「就是誰也壓不垮我們，誰也不能叫我們屈服。」<br>跟伊萬道別後，我邊往地鐵走，邊試圖梳理他的思路：在烏克蘭長大的半個俄羅斯人，對烏克蘭有感情，但歸根結底又把烏克蘭與俄羅斯看作一個共同體：個體的價值，必須依靠強大的共同體去實現。</p><hr><p>第 354 頁<br>英雄。民主。自由。獨立。解放。祖國。吃飽穿暖以後，細小的詞語滿足不了我們，而這些宏大的，又面目模糊、含義不清。</p><hr><p>第 386 頁<br>邊界初開，東西柏林經歷了巨大的經濟落差。二十年後，西柏林漸漸變為高檔住宅區，東柏林則因為房租低廉，成為整個歐洲年輕藝術家的天堂。東柏林咖啡館的早餐以豐盛和漫長著稱，這裡無人早起，半數人口都是藝術家。藝術家提供不了太多稅收，柏林欠下很多外債，靠借貸發展。柏林圍牆倒下之初，世界為之興奮，跨國企業摩拳擦掌，但是這裡不具備商業城市的氛圍。十五年後，索尼影視中心（Sony Center）黯然出售。西門子盤算了很久，終於也沒有來。</p><hr><p>第 396 頁<br>世界驚訝，但並不反感。希特勒完結，柏林圍牆倒塌，德國人不斷道歉和自省——「整個國家從對『強大』的渴求，轉為正常。沒什麼比正常更美好的了。」毛斯巴赫愉快地笑起來。他有一種舉重若輕的天分，在任何極端的集體情緒中，都要努力回到心裡那個平衡點。</p><hr><p>第 399 頁<br>德國墨卡托智庫（Mercator Institute for China Studies）統計過歐洲人在 Google 上搜索關於「中國」的熱門詞彙：「長城」、「創新」、「統治世界」、「中國菜」、「吃狗肉」等等，各國不一而足。他們也列出中國網民在百度上想知道的歐洲：「雅思」、「屠猶」、「足球」……但有一個詞是中國人對歐洲各國必搜的，出現頻率非常高：「買什麼便宜」。<br>二十年前，柏林圍牆西邊的資本主義，理直氣壯用物質去誘惑東邊的人。而今天，在中國人面前，這種誘惑僅僅是為他們的旅途增添「帝王般的享受」。中國護照仍然處處需要簽證，但中國錢包早已全球通用。那晚，在梅克爾發願吃生蠔的凱賓斯基酒店對面，我見到一個中國人。因為言論無忌，他無法回去。世界在中國遊客面前暢通無礙，但祖國本身，有時正是一道牆。</p><hr><p>第 400 頁<br>在柏林居住另一個十三年後，她給自己的生活做了個總結，創作成《東西相遇》，用漫畫對照德國人與中國人思維舉止細微處的差異。德國人用眼睛旅行，中國人離不開相機。德國人直面問題，中國人繞道而行。德國人安靜小聲，中國人熱熱鬧鬧。</p><hr><p>第 402 頁<br>東西德人本是一家。二戰結束後，德國被蘇聯和西方分而占之， 一九四九年東德、西德分別建國， 一九六一年柏林圍牆豎起。四十年間，兩邊的人變得不再是一個模子裡刻出來的。圍牆倒塌後二十多年，彼此還是立刻能從舉止言談裡辨認出差異。這是何等的驚人和悲哀。</p><hr><p>第 403 頁<br>一名同行激動地拉我去看另一塊展板：<br>（正面寫著：）<br>德意志民主共和國憲法第二條第一段：「德意志民主共和國所有權力由工人行使。」<br>（反面）<br>人民代表在工人階級政黨的領導下，行使工人農民的權力。<br>（正面）<br>德意志民主共和國憲法第二十七條第二段：「保障報紙、電台和電視台的自由。」<br>（反面）<br>如果新聞傷害社會主義意識形態，它的自由就可能被剝奪。<br>正面，是堂皇的說詞。反面，是實際發生的事情。</p><hr><p>第 408 頁<br>三年前，我在瑞士聽說列支敦斯登準備公投，立刻來了興趣：列國雖小，人可是全世界最富裕的居民——查一下世界銀行、聯合國及美國中情局發佈的資料，列支敦斯登人均國內生產總值（GDP per capital）或人均國民收入，幾乎年年進三甲。二○一二年人均國內生產總值世界第一，是那一年中國的二十三倍。我向來以為，揭竿而起是因為活不下去，這群「天堂裡的人民」怎麼也鬧起來了？</p><hr><p>第 409 頁<br>在君主制次第灰飛煙滅的歐洲，列支敦斯登大公百年實權在握，其中一個原因——國是他家買的。四百多年前，列支敦斯登家族買下兩塊直屬德意志神聖羅馬帝國的小莊園，合併為小型公國， 一轉身，地主有了政治身分，頂著大公頭銜翩然坐上帝國議會。今天這個小公國的國名，仍然是列支敦斯登家族姓氏。國民的身分意識，與王室家族不可分割。<br>二戰後公國也曾拮据困頓。後來，在現任大公的父親弗朗茨·約瑟夫二世（Franz Joseph II）治下，通過比瑞士更低的稅賦，更開放的銀行制度，吸引源源資金，再加上製造業沒有鬆懈， 一躍成為首富。</p><hr><p>第 409 頁<br>漢斯·亞當二世的公開形象更接近學者，花白頭髮，西服翩翩，熱衷著書傳播執政理念。列支敦斯登街道上看不見他的畫像，旅遊紀念品上也沒有。從大公的父親開始，列支敦斯登王室就以低調、親民為人稱道。珍妮說，列支敦斯登年輕人出國，最終大多選擇回來，哪裡都不如祖國的福利好。</p><hr><p>第 412 頁<br>P 先生曾提到一個細節，令我驚奇。他反大公否決權的立場眾所周知，但作為議會黨派代表，每週進宮面見大公。<br>「你每星期都見到你反對的人？」<br>「是的，作為黨派代表，我隨時可以打電話到王宮，要求會面，通常第二、第三天就可以見到大公或他的兒子王儲。」<br>電影裡進宮面聖的情形浮現腦海，我試著問：「你得下跪嗎？吻手嗎？」面見列支敦斯登大公，一般禮節性地稱呼「殿下」。P 是大公特權的反對者，拒絕行禮。第一次進宮，他問大公：「我的名字是畢伯·佛里克，請問我該如何稱呼您？」「叫我列支敦斯登先生。」大公答道。從此，會面代表中只有他不用口呼「殿下」。 「父母從小教導，別人如何對待你，取決於你是否允許他們那樣做。如果列支敦斯登大公變成獨裁者，那是人民縱容他那樣做。」</p><hr><p>第 414 頁<br>「世界上無數人會對你們說，這是最富裕的地方，宛如天堂，還有什麼不滿意？廢除了大公的否決權，你們的明天會更好嗎？」<br>賈妮往椅子上靠了靠，緩緩說：「廢除否決權，對我們的日常生活沒什麼影響，早晨起來太陽不會更亮。但重要的是，我們不想有個人坐在那裡『允許』改變發生，人民應該自行決定。大公的權力，是我們脖子上的一根繩索。」</p><hr><p>第 416 頁<br>通常而言，經濟發展到一定程度，人們會要求更加透明、更多參與感的政治體制，列支敦斯登已經沒有「絕對意義上的窮人」，就連收入相對較低的百分之十人群，都獲得國家補貼，有車有房。P 先生說，粗略一分，百分之六十列支敦斯登國民為中產階級，百分之三十高收入者大多從事金融業。但反對大公否決權的人，很難以收入、年齡、性別劃分，「只是一群思想超群的人」。<br>然而，這群人太少了。列支敦斯登屢次公投失敗，展現了一種令人困惑的景象：當經濟達到一定水準時，人們對改變上層建築的要求減弱。又如，另一個國民最富裕的國家卡達，實行的是絕對君主制，超然穩定。新加坡有繁榮無自由，也證明了經濟非政治變革的充分條件，甚至不是必要條件。</p><hr><p>第 416 頁<br>千百年來，奧地利大地上的王朝公國，此起彼伏，盛極一時，奥匈帝國半個世紀的榮光與傳奇似乎從未遠離，往事沉澱在血液裡，封建意識遊蕩在現代國家的呼吸中。今日實行代議制民主制度的奥地利，早就不見了王室，但人際關係中身分等級依然分明，個體不習慣做決定，遇事第一反應必是「問我的長官」。瑞士建築師在列支敦斯登人身上，同樣看到個體精神的缺乏。</p><hr><p>第 426 頁<br>眾院大廳裡，潔西嘉請大家傳閱兩個厚厚的本子。原來每個議員發言的每一句話，都會被記錄下來。這兩本是今年以來的現場紀錄。兩院大廳還安裝了直播攝影鏡頭，記者、公眾都可以同步收看。<br>我讀不懂本子上的筆記，薩賓娜叫我留意其中不同文字。瑞士有四種官方語言：德語、法語、義大利語和羅曼什語（Romansh）。多民族、多語言的國家很多，瑞士的奇特之處在於，不推廣統一語言，也沒有統一語言可推廣。即便在莊嚴的國會，議員們也是操不同方言，筆錄員飛速切換。現場配同聲傳譯，但議員大多精通兩三種語言，不需要翻譯，雞同鴨講，溝通無礙。當他們宣誓成為議員時，誓詞都是用不同語言念出來的。</p><hr><p>第 428 頁<br>國會走廊盡頭是個簡單的辦公室，總統問政處。瑞士總統不是一個人，而是七個人，輪流坐莊，一人當一年總統。七人班子其實是七個部長，各司兩三個部。目前輪值總統是女性，問政處門楣上的「總統」一詞改成陰性。</p><hr><p>第 430 頁<br>另外，「直接民主」的原則並非「簡單多數」，而是以「雙重多數」，避免人們做出愚蠢的選擇（比如戰爭），涉及修憲，除了獲得全民多數，還須取得以各州為單位的「州多數」，這一程序賦予公投結果更多理性。<br>是不是瑞士小國寡民，直接民主才找到合適的土壤？格達費的利比亞人口五百六十萬，少於瑞士的八百萬，也號稱採用直接民主，到頭來卻是獨裁者「溫情脈脈的面紗」。委內瑞拉人的公投，賦予查維斯終身連任權，更像是維護統治的工具。他們的「直接民主」少了瑞士版的兩大基礎：堅定的法律保障、嚴格的程序限定。克里斯·科巴克（Kris W. Kobach）在《公投：瑞士的直接民主》 （The Referendum: Direct Democracy in Switzerland）一書中指出，瑞士以罕見的直接民主，實現了罕見的穩定和富裕，「與其說它是個特例，不如稱之為先鋒」，它的經驗不無可取之處。</p><hr><p>第 431 頁<br>瑞士的存在，證明了另一種可能：人民的理性值得信賴，「大一統」的牢靠來自個體的平等與自由，而不是誰要誰犧牲一些權利。</p><hr><p>第 446 頁<br>平心而論，劇中英國首相不過具備一般政客都會犯的毛病：野心比能力大，私欲比公益重要。成天囈語要是英國救了歐元，自己就該成為歐盟主席。選舉前做的一切，就是為了上位，上位之後，全部目標就是保位。當局面終於搞砸，哭著喊著要找女王請辭。二號秘書終於看破，冷冷道：「首相，其實您的位子保不住，對百姓並不是壞事。」唐寧街大小人物，都被一根看不見的繩索牽制，那就是民意。一切都是為了取悅民意。媒體或理直氣壯，或死纏爛打，也是因為公眾輿論後盾堅強。</p><hr><p>第 449 頁<br>二戰後，殖民地獨立浪潮驚濤掠岸。始於伊莉莎白二世的父親喬治六世，印度、緬甸、斯里蘭卡相繼獨立。伊莉莎白二世初登王位，蘇伊士運河危機爆發，英國棄守埃及，後人多將此視為帝國衰弱的真正信號。一九五七年的馬來西亞，六〇年代的非洲諸國， 一九九四年的南非， 一九九七年的香港。帝國版圖，如沙灘上作畫，終為潮流吞沒，倏忽不見蹤影。</p><hr><p>第 454 頁<br>名義上「率土之濱，莫非王臣」，但英國君主三百年來沒有否定過議會做出的決定。普天之下就算還是王土，我花十英鎊進入的下議院，卻是女王終身不可踏足的禁地。導遊說，如果女王膽敢走過來，下院大門將毫不留情地在她面前狠狠關上。下議院英文是「House of Commons」，「平民或庶民之所」。國王的歸國王，庶民的歸庶民。</p><hr><p>第 456 頁<br>「君子訥於言而敏於行」。「說話」於我們不算頭等大事。但現實是，很多事情沒有說明，沒有解釋，於是連「行」也變得語焉不詳。</p><hr><p>第 462 頁<br>未來全球不穩定因素之一，正是飛速增長的中產階級與落後的管治之間的衝突。<br>但是這種衝突本身，很難單獨帶來徹底、積極的改變。中產階級革命改變不了什麼。他們通常手無寸鐵，跟傳統勢力缺乏聯繫。</p><hr><p>第 464 頁<br>經濟不是催生革命的決定性因素，但是統治者手中如果有經濟這張牌，就可以拖延革命的發生，土耳其、巴林鬧得再凶也無法翻天，列支敦斯登的富裕令大多數人安於現狀。經不起「阿拉伯之春」吹拂的，往往是推行經濟改革的共和體制，而躺在石油上的君主制國家，最多是吹縐春水，卻興不起浪潮。中國向委内瑞拉提供的數百億美金貸款，客觀上令查維斯和他的繼承者兩手不空。</p><hr><p>第 470 頁<br>中國人好論成敗，然而成敗最經不起時間考驗。歷史不在意歡呼或鞭撻，它多稜鏡般的顏色、謎一般的命運，期待注視與思考。阿拉伯社會變革始於二〇一〇年末，展示了無窮側面：中產革命缺乏組織，「窮人政黨」與中産對立，選票被曲解為民主政治唯一手段，舊勢力在新變局中的影響，民主轉型中的威權懷舊，威權手段在新變局中的笨拙，先進生產力第一次不為統治者壟斷，民主大門該不該向地下組織敞開，革命神聖感與神聖感的消散，法治缺失民主無以維繫，國際干預的法律模糊地帶……變革中有太多值得探討的話題，值得汲取的教訓。簡單歸於成敗，不知是因為禁忌重重，還是思維惰性？我們關上電視，看完微博上的互罵之後洗洗睡去，很少心平氣和地探尋得失原委。</p><hr><p>以上摘自：<br><img src="https://img1.doubanio.com/view/subject/l/public/s29166267.jpg" alt="《拜訪革命》"><br><a href="https://book.douban.com/subject/26919483/" target="_blank" rel="noopener">《拜訪革命》</a><br>副标题: 從加德滿都、德黑蘭到倫敦，全球民主浪潮的見證<br>作者: 周軼君<br>出版社: 八旗文化<br>ISBN: 9789869384421</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;第 11 頁&lt;br&gt;似曾相識的開端，踏出截然不同的路徑，兩厢對照，變革的命運更加清晰。對當權者而言，如果開放可以延續權力，他便鬆手，如果鐵腕能夠穩固執政，他便握拳。然覆手雲雨之間，時機、地理、民意、外力，多少偶然互相撞擊，革命的軌道像雲霄飛車一樣不知道下一秒的起落。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;第 12 頁&lt;br&gt;許多美國人不關心世界，連護照都沒有，但這並不妨礙美國成為頭號自由之邦。但是否正因如此，以強烈排外為面貌的右翼風潮，近些年在美國、在歐洲急速抬頭？外交政策的制訂雖是精英之事，若大眾與精英之間嚴重脫節，英國脫歐、川普上台之類的事情就會一再震驚世界。&lt;/p&gt;
    
    </summary>
    
      <category term="读书笔记" scheme="https://acuario.xyz/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="读书笔记" scheme="https://acuario.xyz/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>使用SCP命令转移Linux文件</title>
    <link href="https://acuario.xyz/how-to-use-scp-cmd-to-transfer-linux-file/"/>
    <id>https://acuario.xyz/how-to-use-scp-cmd-to-transfer-linux-file/</id>
    <published>2018-05-30T12:51:46.000Z</published>
    <updated>2018-05-30T13:00:28.994Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>出于更换 VPS 的目的，不得不对文件进行转移。最原始的办法可能是从 <code>A</code> 服务器拷贝一份到<code>本机</code>，然后再重新上传到 <code>B</code> 服务器。这样做既繁琐又费时。不如使用 Linux 的 <code>scp</code> 命令进行快速转移来的方便。</p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p><code>scp</code>（secure copy），可以用于在 Linux 下进行远程文件拷贝。类似于 <code>cp</code> 命令，<code>scp</code> 是应用于多设备间的传输拷贝，而前者是 Linux 本地命令。另外，<code>scp</code> 为 SSH 加密传输，安全性有保障——也因此，连接的端口为远端服务器的 SSH 服务端口（SSH 一般默认端口为 22）。</p><a id="more"></a><h1 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scp -参数 [[user@]host1:]file1 ... [[user@]host2:]file2</span><br></pre></td></tr></table></figure><h1 id="常用命令参数"><a href="#常用命令参数" class="headerlink" title="常用命令参数"></a>常用命令参数</h1><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>-P</td><td>SSH 端口，缺省值为 22</td></tr><tr><td>-i</td><td>SSH 密钥登录，后面一个参数为私钥地址</td></tr><tr><td>-l</td><td>带宽限制，单位 Kbps</td></tr><tr><td>-r</td><td>递归复制整个目录</td></tr><tr><td>-C</td><td>允许压缩</td></tr></tbody></table><h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><p>以下命令假设已登录<strong>本地机器</strong>为 <code>A</code>(IP: 192.168.1.1)，<strong>远端机器</strong>为 <code>B</code>(IP: 192.168.2.1)<br>根据 SSH 登录方式和 SSH 端口的不同，拷贝命令分为以下两种：</p><ol><li><p>远端 <code>B</code> 为密码登录， SSH 为默认端口 22<br><code>A:/abc/</code> &gt;&gt;&gt;上传&gt;&gt;&gt; <code>B:/root</code> ：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scp -r /abc root@192.168.2.1:/root</span><br></pre></td></tr></table></figure><p><code>A:/root</code> &lt;&lt;&lt;下载&lt;&lt;&lt; <code>B:/abc/</code> ：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scp -r root@192.168.2.1:/abc /root</span><br></pre></td></tr></table></figure></li><li><p>远端 <code>B</code> 为密钥（密钥文件为 <code>.ssh/id_rsa</code>）登录， SSH 端口为 2222<br><code>A:/abc/</code> &gt;&gt;&gt;上传&gt;&gt;&gt; <code>B:/root</code> ：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scp -P 2222 -i .ssh/id_rsa -r /abc root@192.168.2.1:/root</span><br></pre></td></tr></table></figure><p><code>A:/root</code> &lt;&lt;&lt;下载&lt;&lt;&lt; <code>B:/abc/</code> ：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scp -P 2222 -i .ssh/id_rsa -r root@192.168.2.1:/abc /root</span><br></pre></td></tr></table></figure><p>p.s. 使用密钥进行 <code>scp</code> 时，需保证密钥文件 <code>.ssh/id_rsa</code> 对应的公钥 <code>.ssh/id_rsa.pub</code> 内容已经写入到 <code>B</code> 的 <code>/root/.sshauthorized_keys</code> 文件中，否则无法正常使用密钥登录。具体原因与 SSH 密钥登录一致。</p></li></ol><hr><p>参考链接：<br><a href="http://linuxtools-rst.readthedocs.io/zh_CN/latest/tool/scp.html" target="_blank" rel="noopener">scp 跨机远程拷贝</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;出于更换 VPS 的目的，不得不对文件进行转移。最原始的办法可能是从 &lt;code&gt;A&lt;/code&gt; 服务器拷贝一份到&lt;code&gt;本机&lt;/code&gt;，然后再重新上传到 &lt;code&gt;B&lt;/code&gt; 服务器。这样做既繁琐又费时。不如使用 Linux 的 &lt;code&gt;scp&lt;/code&gt; 命令进行快速转移来的方便。&lt;/p&gt;
&lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;&lt;code&gt;scp&lt;/code&gt;（secure copy），可以用于在 Linux 下进行远程文件拷贝。类似于 &lt;code&gt;cp&lt;/code&gt; 命令，&lt;code&gt;scp&lt;/code&gt; 是应用于多设备间的传输拷贝，而前者是 Linux 本地命令。另外，&lt;code&gt;scp&lt;/code&gt; 为 SSH 加密传输，安全性有保障——也因此，连接的端口为远端服务器的 SSH 服务端口（SSH 一般默认端口为 22）。&lt;/p&gt;
    
    </summary>
    
      <category term="教程" scheme="https://acuario.xyz/categories/%E6%95%99%E7%A8%8B/"/>
    
      <category term="Linux" scheme="https://acuario.xyz/categories/%E6%95%99%E7%A8%8B/Linux/"/>
    
    
      <category term="教程" scheme="https://acuario.xyz/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="Linux" scheme="https://acuario.xyz/tags/Linux/"/>
    
      <category term="运维" scheme="https://acuario.xyz/tags/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="VPS" scheme="https://acuario.xyz/tags/VPS/"/>
    
      <category term="命令行" scheme="https://acuario.xyz/tags/%E5%91%BD%E4%BB%A4%E8%A1%8C/"/>
    
  </entry>
  
</feed>
